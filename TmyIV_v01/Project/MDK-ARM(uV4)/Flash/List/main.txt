; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -I..\..\User\delay -I.\RTE\_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;1243   */
;;;1244   static void AppTaskCreate (void)
000000  b51f              PUSH     {r0-r4,lr}
;;;1245   {
;;;1246   	xTaskCreate( vTaskLCD,    		/* 任务函数  */
000002  2000              MOVS     r0,#0
000004  4a21              LDR      r2,|L1.140|
000006  2304              MOVS     r3,#4
000008  e9cd2001          STRD     r2,r0,[sp,#4]
00000c  9300              STR      r3,[sp,#0]
00000e  9003              STR      r0,[sp,#0xc]
000010  4603              MOV      r3,r0
000012  f44f7200          MOV      r2,#0x200
000016  a11e              ADR      r1,|L1.144|
000018  4820              LDR      r0,|L1.156|
00001a  f7fffffe          BL       xTaskGenericCreate
;;;1247                    "vTaskLCD",  		/* 任务名    */
;;;1248                    STKSIZE_TaskLCD,         		/* 任务栈大小，单位word，也就是4字节 */
;;;1249                    NULL,        		/* 任务参数  */
;;;1250                    PRIO_TaskLCD,      /* 任务优先级*/
;;;1251                    &xHandleTaskLCD ); /* 任务句柄  */
;;;1252   	
;;;1253   	xTaskCreate( vTaskMotorCtrl,     		/* 任务函数  */
00001e  2000              MOVS     r0,#0
000020  4a1f              LDR      r2,|L1.160|
000022  2303              MOVS     r3,#3
000024  e9cd2001          STRD     r2,r0,[sp,#4]
000028  9300              STR      r3,[sp,#0]
00002a  9003              STR      r0,[sp,#0xc]
00002c  4603              MOV      r3,r0
00002e  f44f7200          MOV      r2,#0x200
000032  a11c              ADR      r1,|L1.164|
000034  481f              LDR      r0,|L1.180|
000036  f7fffffe          BL       xTaskGenericCreate
;;;1254                    "vTaskMotorCtrl",   		/* 任务名    */
;;;1255                    STKSIZE_TaskMotorCtrl,     /* 任务栈大小，单位word，也就是4字节 */
;;;1256                    NULL,           		    /* 任务参数  */
;;;1257                    PRIO_TaskMotorCtrl,        /* 任务优先级*/
;;;1258                    &xHandleTaskMotorCtrl );  /* 任务句柄  */
;;;1259   	
;;;1260       xTaskCreate( vTaskSensor,     		    /* 任务函数  */
00003a  2000              MOVS     r0,#0
00003c  4a1e              LDR      r2,|L1.184|
00003e  2301              MOVS     r3,#1
000040  e9cd2001          STRD     r2,r0,[sp,#4]
000044  9300              STR      r3,[sp,#0]
000046  9003              STR      r0,[sp,#0xc]
000048  4603              MOV      r3,r0
00004a  2280              MOVS     r2,#0x80
00004c  a11b              ADR      r1,|L1.188|
00004e  481e              LDR      r0,|L1.200|
000050  f7fffffe          BL       xTaskGenericCreate
;;;1261                    "vTaskSensor",   		    /* 任务名    */
;;;1262                    STKSIZE_TaskSensor,        /* 任务栈大小，单位word，也就是4字节 */
;;;1263                    NULL,           		    /* 任务参数  */
;;;1264                    PRIO_TaskSensor,           /* 任务优先级*/
;;;1265                    &xHandleTaskSensor );      /* 任务句柄  */
;;;1266       
;;;1267       xTaskCreate( vTaskAdc,   	/* 任务函数  */
000054  2000              MOVS     r0,#0
000056  4a1d              LDR      r2,|L1.204|
000058  2302              MOVS     r3,#2
00005a  e9cd2001          STRD     r2,r0,[sp,#4]
00005e  9300              STR      r3,[sp,#0]
000060  9003              STR      r0,[sp,#0xc]
000062  4603              MOV      r3,r0
000064  2280              MOVS     r2,#0x80
000066  a11a              ADR      r1,|L1.208|
000068  481c              LDR      r0,|L1.220|
00006a  f7fffffe          BL       xTaskGenericCreate
;;;1268                    "vTaskAdc",     	/* 任务名    */
;;;1269                    STKSIZE_TaskAdc,               	/* 任务栈大小，单位word，也就是4字节 */
;;;1270                    NULL,              	/* 任务参数  */
;;;1271                    PRIO_TaskAdc,                 	/* 任务优先级*/
;;;1272                    &xHandleTaskAdc );  /* 任务句柄  */
;;;1273                    
;;;1274       xTaskCreate( vTaskBle,   	/* 任务函数  */
00006e  2000              MOVS     r0,#0
000070  4a1b              LDR      r2,|L1.224|
000072  2305              MOVS     r3,#5
000074  e9cd2001          STRD     r2,r0,[sp,#4]
000078  9300              STR      r3,[sp,#0]
00007a  9003              STR      r0,[sp,#0xc]
00007c  4603              MOV      r3,r0
00007e  2280              MOVS     r2,#0x80
000080  a113              ADR      r1,|L1.208|
000082  4818              LDR      r0,|L1.228|
000084  f7fffffe          BL       xTaskGenericCreate
;;;1275                    "vTaskAdc",     	/* 任务名    */
;;;1276                    STKSIZE_TaskBle,               	/* 任务栈大小，单位word，也就是4字节 */
;;;1277                    NULL,              	/* 任务参数  */
;;;1278                    PRIO_TaskBle,                 	/* 任务优先级*/
;;;1279                    &xHandleTaskBle );  /* 任务句柄  */
;;;1280   }
000088  bd1f              POP      {r0-r4,pc}
;;;1281   
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      xHandleTaskLCD
                  |L1.144|
000090  76546173          DCB      "vTaskLCD",0
000094  6b4c4344
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L1.156|
                          DCD      vTaskLCD
                  |L1.160|
                          DCD      xHandleTaskMotorCtrl
                  |L1.164|
0000a4  76546173          DCB      "vTaskMotorCtrl",0
0000a8  6b4d6f74
0000ac  6f724374
0000b0  726c00  
0000b3  00                DCB      0
                  |L1.180|
                          DCD      vTaskMotorCtrl
                  |L1.184|
                          DCD      xHandleTaskSensor
                  |L1.188|
0000bc  76546173          DCB      "vTaskSensor",0
0000c0  6b53656e
0000c4  736f7200
                  |L1.200|
                          DCD      vTaskSensor
                  |L1.204|
                          DCD      xHandleTaskAdc
                  |L1.208|
0000d0  76546173          DCB      "vTaskAdc",0
0000d4  6b416463
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L1.220|
                          DCD      vTaskAdc
                  |L1.224|
                          DCD      xHandleTaskBle
                  |L1.228|
                          DCD      vTaskBle

                          AREA ||i.BLE_Test||, CODE, READONLY, ALIGN=1

                  BLE_Test PROC
;;;225    
;;;226    void BLE_Test(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;227    {
;;;228        uint8_t err, bleChar, localChar;
;;;229    //    uint8_t StrTem[20];
;;;230        
;;;231    //    err = BLE_GetMsg( StrTem, 20);
;;;232    //    StrTem[err] = 0;
;;;233        
;;;234    //    if(err)
;;;235    //    {
;;;236    //        SetTextValue(0,26, StrTem);
;;;237    //    }
;;;238        
;;;239        err = comGetChar(BLE_COM, &bleChar);
000002  a901              ADD      r1,sp,#4
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       comGetChar
00000a  4604              MOV      r4,r0
;;;240        if (err)
00000c  b124              CBZ      r4,|L2.24|
;;;241        {
;;;242            comSendChar(LOCAL_COM, bleChar);
00000e  f89d1004          LDRB     r1,[sp,#4]
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       comSendChar
                  |L2.24|
;;;243            //SetTextValue(0,26,"自动给药取消");
;;;244        }
;;;245    
;;;246        err = comGetChar(LOCAL_COM, &localChar);
000018  4669              MOV      r1,sp
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       comGetChar
000020  4604              MOV      r4,r0
;;;247        if(err)
000022  b124              CBZ      r4,|L2.46|
;;;248        {
;;;249            comSendChar(BLE_COM, localChar);
000024  f89d1000          LDRB     r1,[sp,#0]
000028  2003              MOVS     r0,#3
00002a  f7fffffe          BL       comSendChar
                  |L2.46|
;;;250        }
;;;251    }
00002e  bd1c              POP      {r2-r4,pc}
;;;252    
                          ENDP


                          AREA ||i.P_GetMsgFromUart||, CODE, READONLY, ALIGN=1

                  P_GetMsgFromUart PROC
;;;71     
;;;72     uint16_t P_GetMsgFromUart(COM_PORT_E _ucPort, uint8_t *msg)
000000  b5f8              PUSH     {r3-r7,lr}
;;;73     {
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
;;;74     	uint16_t i=0;
000006  2400              MOVS     r4,#0
;;;75         uint8_t tem8=0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;76         uint32_t tem32 = 0;
00000c  2600              MOVS     r6,#0
;;;77         
;;;78         if( comGetLen(_ucPort) > 3 ) //收接收数据
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       comGetLen
000014  2803              CMP      r0,#3
000016  dd28              BLE      |L3.106|
;;;79         {
;;;80             while( comGetLen(_ucPort) )
000018  e022              B        |L3.96|
                  |L3.26|
;;;81             {
;;;82                 comGetChar(_ucPort, &tem8);
00001a  4669              MOV      r1,sp
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       comGetChar
;;;83                 if( i == 0 )
000022  b954              CBNZ     r4,|L3.58|
;;;84                 {
;;;85                     if( tem8 == 0xEE ) 
000024  f89d0000          LDRB     r0,[sp,#0]
000028  28ee              CMP      r0,#0xee
00002a  d116              BNE      |L3.90|
;;;86                     {
;;;87                         *( msg + i++ ) = tem8;
00002c  f89d2000          LDRB     r2,[sp,#0]
000030  4620              MOV      r0,r4
000032  1c61              ADDS     r1,r4,#1
000034  b28c              UXTH     r4,r1
000036  542a              STRB     r2,[r5,r0]
000038  e00f              B        |L3.90|
                  |L3.58|
;;;88                     }
;;;89                 }else
;;;90                 {
;;;91                     *( msg + i++ ) = tem8;
00003a  f89d2000          LDRB     r2,[sp,#0]
00003e  4620              MOV      r0,r4
000040  1c61              ADDS     r1,r4,#1
000042  b28c              UXTH     r4,r1
000044  542a              STRB     r2,[r5,r0]
;;;92                     
;;;93                     tem32 = ((tem32<<8)|tem8);                           //拼接最后4个字节，组成一个32位整数
000046  f89d0000          LDRB     r0,[sp,#0]
00004a  ea402606          ORR      r6,r0,r6,LSL #8
;;;94                     if( tem32 == 0xFFFCFFFF )
00004e  f46f3040          MVN      r0,#0x30000
000052  4286              CMP      r6,r0
000054  d101              BNE      |L3.90|
;;;95                     {
;;;96                         return i;
000056  4620              MOV      r0,r4
                  |L3.88|
;;;97                     }
;;;98     //                if( i > 13 )
;;;99     //                {
;;;100    //                    if( tem8 == 0xFF ) 
;;;101    //                    {
;;;102    //                        return i;
;;;103    //                    }else
;;;104    //                    {
;;;105    //                        return 0;
;;;106    //                    }
;;;107    //                }
;;;108                }
;;;109                vTaskDelay(pdMS_TO_TICKS(1));
;;;110            }
;;;111        }
;;;112        return 0;
;;;113    }
000058  bdf8              POP      {r3-r7,pc}
                  |L3.90|
00005a  2001              MOVS     r0,#1                 ;109
00005c  f7fffffe          BL       vTaskDelay
                  |L3.96|
000060  4638              MOV      r0,r7                 ;80
000062  f7fffffe          BL       comGetLen
000066  2800              CMP      r0,#0                 ;80
000068  d1d7              BNE      |L3.26|
                  |L3.106|
00006a  2000              MOVS     r0,#0                 ;112
00006c  e7f4              B        |L3.88|
;;;114    
                          ENDP


                          AREA ||i.TMY_ParaInit||, CODE, READONLY, ALIGN=2

                  TMY_ParaInit PROC
;;;115    //默认参数
;;;116    void TMY_ParaInit( void )
000000  4811              LDR      r0,|L4.72|
;;;117    {
;;;118    	//步进电机初始化
;;;119        //方向
;;;120    	Motor.state.bit.dir = UP;
000002  7880              LDRB     r0,[r0,#2]  ; Motor
000004  f0200001          BIC      r0,r0,#1
000008  490f              LDR      r1,|L4.72|
00000a  7088              STRB     r0,[r1,#2]
;;;121        //速度
;;;122    	Motor.speed = SLOW;
00000c  2001              MOVS     r0,#1
00000e  7008              STRB     r0,[r1,#0]
;;;123    	Motor.gear = GEAR_SLOW_NORMAL_FAST; //慢中快速，默认有效
000010  2002              MOVS     r0,#2
000012  7048              STRB     r0,[r1,#1]
;;;124        //SetTextValue(0, 16,"停止\x00");
;;;125        
;;;126        //频率
;;;127        //SetTextValue(0, 17,"0");
;;;128        
;;;129    	Motor.max_step = MAX_STEP_18ML; //最大步数
000014  480d              LDR      r0,|L4.76|
000016  6088              STR      r0,[r1,#8]  ; Motor
;;;130    	Motor.counter_step = 0; //步数
000018  2000              MOVS     r0,#0
00001a  6048              STR      r0,[r1,#4]  ; Motor
;;;131    	
;;;132    	//其它初始化
;;;133    	Tmy.pressure = 0; //压力
00001c  490c              LDR      r1,|L4.80|
00001e  60c8              STR      r0,[r1,#0xc]  ; Tmy
;;;134    	Tmy.power_percent = 100; //电量
000020  2064              MOVS     r0,#0x64
000022  7248              STRB     r0,[r1,#9]
;;;135    	
;;;136        Tmy.Key.zdpk = 1; //自动排空，默认有效
000024  4608              MOV      r0,r1
000026  7980              LDRB     r0,[r0,#6]  ; Tmy
000028  f0200002          BIC      r0,r0,#2
00002c  1c80              ADDS     r0,r0,#2
00002e  7188              STRB     r0,[r1,#6]
;;;137        Tmy.Key.hx = 1; //回吸，默认有效
000030  4608              MOV      r0,r1
000032  7980              LDRB     r0,[r0,#6]  ; Tmy
000034  f0200001          BIC      r0,r0,#1
000038  1c40              ADDS     r0,r0,#1
00003a  7188              STRB     r0,[r1,#6]
;;;138        Tmy.Key.zh = 0; //1.8ml，默认有效
00003c  4608              MOV      r0,r1
00003e  7980              LDRB     r0,[r0,#6]  ; Tmy
000040  f0200008          BIC      r0,r0,#8
000044  7188              STRB     r0,[r1,#6]
;;;139    }
000046  4770              BX       lr
;;;140    
                          ENDP

                  |L4.72|
                          DCD      Motor
                  |L4.76|
                          DCD      0x0003b97e
                  |L4.80|
                          DCD      Tmy

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;169    */
;;;170    int main(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;171    {
;;;172    	/* 
;;;173    	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;174    	  这样做的好处是：
;;;175    	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;176    	  2. 保证系统正常启动，不受别的中断影响。
;;;177    	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;178    	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;179    	  和cpsie i是等效的。
;;;180         */
;;;181    	__set_PRIMASK(1);  
;;;182    	
;;;183    	/* 硬件初始化 */
;;;184    	bsp_Init(); 
000008  f7fffffe          BL       bsp_Init
;;;185    	debug_en(1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       debug_en
;;;186    
;;;187    	ReadFromFlash();
000012  f7fffffe          BL       ReadFromFlash
;;;188    	
;;;189        TMY_ParaInit();
000016  f7fffffe          BL       TMY_ParaInit
;;;190    	start_set();
00001a  f7fffffe          BL       start_set
;;;191    	
;;;192    	/* 创建任务 */
;;;193    	AppTaskCreate();
00001e  f7fffffe          BL       AppTaskCreate
;;;194    	
;;;195        /* 启动调度，开始执行任务 */
;;;196        vTaskStartScheduler();
000022  f7fffffe          BL       vTaskStartScheduler
;;;197    
;;;198    	/* 
;;;199    	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;200    	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;201    	  #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 17 * 1024 ) )
;;;202    	*/
;;;203    	while(1);
000026  bf00              NOP      
                  |L5.40|
000028  e7fe              B        |L5.40|
;;;204    }
;;;205    
                          ENDP


                          AREA ||i.start_set||, CODE, READONLY, ALIGN=2

                  start_set PROC
;;;141    
;;;142    void start_set( void )
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144        // if(RCC_GetFlagStatus(RCC_FLAG_PORRST))
;;;145        // {
;;;146        //     debug_usr("power reset:");//上电重启
;;;147        // }else
;;;148        // {
;;;149        //     debug_usr("other reset:");//软重启
;;;150        // }
;;;151        
;;;152        //debug_usr("%d %d\r\n", data_saved.data.n_reset, data_saved.data.n_error);//
;;;153        
;;;154        RCC->CSR|=0X1000000    ; //清除中断标示
000002  480a              LDR      r0,|L6.44|
000004  6a40              LDR      r0,[r0,#0x24]
000006  f0407080          ORR      r0,r0,#0x1000000
00000a  4908              LDR      r1,|L6.44|
00000c  6248              STR      r0,[r1,#0x24]
;;;155        
;;;156        debug_usr("************************************\r\n");
00000e  a008              ADR      r0,|L6.48|
000010  f7fffffe          BL       debug_usr
;;;157        debug_usr("          推麻仪 IV型\r\n\r\n");
000014  a010              ADR      r0,|L6.88|
000016  f7fffffe          BL       debug_usr
;;;158        debug_usr("Version : %s\r\n", HW_VER);
00001a  a116              ADR      r1,|L6.116|
00001c  a017              ADR      r0,|L6.124|
00001e  f7fffffe          BL       debug_usr
;;;159        printf("************************************\r\n");
000022  a003              ADR      r0,|L6.48|
000024  f7fffffe          BL       __2printf
;;;160    }
000028  bd10              POP      {r4,pc}
;;;161    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      0x40021000
                  |L6.48|
000030  2a2a2a2a          DCB      "************************************\r\n",0
000034  2a2a2a2a
000038  2a2a2a2a
00003c  2a2a2a2a
000040  2a2a2a2a
000044  2a2a2a2a
000048  2a2a2a2a
00004c  2a2a2a2a
000050  2a2a2a2a
000054  0d0a00  
000057  00                DCB      0
                  |L6.88|
000058  20202020          DCB      "          ",205,198,194,233,210,199," IV",208,205,"\r\n"
00005c  20202020
000060  2020cdc6
000064  c2e9d2c7
000068  204956d0
00006c  cd0d0a  
00006f  0d0a00            DCB      "\r\n",0
000072  00                DCB      0
000073  00                DCB      0
                  |L6.116|
000074  56312e30          DCB      "V1.0.0",0
000078  2e3000  
00007b  00                DCB      0
                  |L6.124|
00007c  56657273          DCB      "Version : %s\r\n",0
000080  696f6e20
000084  3a202573
000088  0d0a00  
00008b  00                DCB      0

                          AREA ||i.vTaskAdc||, CODE, READONLY, ALIGN=2

                  vTaskAdc PROC
;;;214    */
;;;215    static void vTaskAdc(void *pvParameters)
000000  f7fffffe          BL       HX711_Init
;;;216    {
;;;217        HX711_Init();
;;;218        while(1)
000004  e00c              B        |L7.32|
                  |L7.6|
;;;219        {
;;;220            vTaskDelay(1000);
000006  f44f707a          MOV      r0,#0x3e8
00000a  f7fffffe          BL       vTaskDelay
;;;221            Tmy.pressure = HX711_Read();
00000e  f7fffffe          BL       HX711_Read
000012  4904              LDR      r1,|L7.36|
000014  60c8              STR      r0,[r1,#0xc]  ; Tmy
;;;222            Tmy.pressureLevel = PRE_GetLevel(Tmy.pressure);
000016  68c8              LDR      r0,[r1,#0xc]  ; Tmy
000018  f7fffffe          BL       PRE_GetLevel
00001c  4901              LDR      r1,|L7.36|
00001e  7148              STRB     r0,[r1,#5]
                  |L7.32|
000020  e7f1              B        |L7.6|
;;;223    	}
;;;224    }
;;;225    
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      Tmy

                          AREA ||i.vTaskBle||, CODE, READONLY, ALIGN=2

                  vTaskBle PROC
;;;252    
;;;253    static void vTaskBle(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;254    {
;;;255        uint8_t err, bleChar;
;;;256        //GPIO_InitTypeDef GPIO_InitStructure;
;;;257        
;;;258        BLE_Init();
000002  f7fffffe          BL       BLE_Init
;;;259    //    BLE_HwReset( );
;;;260    //    BLE_PapaInit( );
;;;261        BLE_HwReset( );
000006  f7fffffe          BL       BLE_HwReset
;;;262        vTaskDelay( 2000 );
00000a  f44f60fa          MOV      r0,#0x7d0
00000e  f7fffffe          BL       vTaskDelay
;;;263        
;;;264        
;;;265        // //升级程序，串口设置成浮空输入
;;;266        // RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
;;;267        // GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
;;;268        // GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;269    
;;;270    
;;;271        printf( "vTaskBle\r\n" );
000012  a00e              ADR      r0,|L8.76|
000014  f7fffffe          BL       __2printf
;;;272        
;;;273    //    while (1)
;;;274    //    {
;;;275    //        vTaskDelay(5);
;;;276    //        BLE_Test();
;;;277    //    }
;;;278    
;;;279        while (1)
000018  e017              B        |L8.74|
                  |L8.26|
;;;280        {
;;;281            vTaskDelay(20);
00001a  2014              MOVS     r0,#0x14
00001c  f7fffffe          BL       vTaskDelay
;;;282            
;;;283            err = comGetChar(BLE_COM, &bleChar);
000020  4669              MOV      r1,sp
000022  2003              MOVS     r0,#3
000024  f7fffffe          BL       comGetChar
000028  4604              MOV      r4,r0
;;;284            if (err)
00002a  b174              CBZ      r4,|L8.74|
;;;285            {
;;;286                if (bleChar == 0xAA) //脚踏抬起
00002c  f89d0000          LDRB     r0,[sp,#0]
000030  28aa              CMP      r0,#0xaa
000032  d103              BNE      |L8.60|
;;;287                {
;;;288                    //Ble.state.bit.link = 0;
;;;289                    bsp_PutKey(PEDAL_UP);
000034  201a              MOVS     r0,#0x1a
000036  f7fffffe          BL       bsp_PutKey
00003a  e006              B        |L8.74|
                  |L8.60|
;;;290                }else
;;;291                if (bleChar == 0x55) //脚踏踩下
00003c  f89d0000          LDRB     r0,[sp,#0]
000040  2855              CMP      r0,#0x55
000042  d102              BNE      |L8.74|
;;;292                {
;;;293                    //Ble.state.bit.link = 1
;;;294                    bsp_PutKey(PEDAL_DOWN);
000044  2019              MOVS     r0,#0x19
000046  f7fffffe          BL       bsp_PutKey
                  |L8.74|
00004a  e7e6              B        |L8.26|
;;;295                }
;;;296                
;;;297                //SetTextValue(0,26,"自动给药取消");
;;;298            }
;;;299    
;;;300    	}
;;;301    }
;;;302    
                          ENDP

                  |L8.76|
00004c  76546173          DCB      "vTaskBle\r\n",0
000050  6b426c65
000054  0d0a00  
000057  00                DCB      0

                          AREA ||i.vTaskLCD||, CODE, READONLY, ALIGN=2

                  vTaskLCD PROC
;;;452    */
;;;453    static void vTaskLCD(void *pvParameters)
000000  f7fffffe          BL       ULCD_Init
;;;454    {      
;;;455    //    uint8_t err, tem8;
;;;456        
;;;457        ULCD_Init();
;;;458        printf( "vTaskLCD\r\n" );
000004  a006              ADR      r0,|L9.32|
000006  f7fffffe          BL       __2printf
;;;459        bsp_LedOff(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_LedOff
;;;460        
;;;461        //vTaskDelay(pdMS_TO_TICKS(10000));
;;;462        
;;;463        //LCD_ParaInit( );
;;;464        
;;;465        while(1)
000010  e004              B        |L9.28|
                  |L9.18|
;;;466        {
;;;467            vTaskDelay(1);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       vTaskDelay
;;;468            ULCD_Task();
000018  f7fffffe          BL       ULCD_Task
                  |L9.28|
00001c  e7f9              B        |L9.18|
;;;469            
;;;470    //        if( lg_lcd_init == 1 )
;;;471    //        {
;;;472    //            //SetBuzzer(100);
;;;473    //            lg_lcd_init = 2;
;;;474    //            LCD_ParaInit();
;;;475    //            Tmy.State.bit.InitPara = 1;
;;;476    //        }
;;;477            
;;;478        }
;;;479    }
;;;480    
                          ENDP

00001e  0000              DCW      0x0000
                  |L9.32|
000020  76546173          DCB      "vTaskLCD\r\n",0
000024  6b4c4344
000028  0d0a00  
00002b  00                DCB      0

                          AREA ||i.vTaskMotorCtrl||, CODE, READONLY, ALIGN=2

                  vTaskMotorCtrl PROC
;;;490    //void SetControlVisiable(uint16 screen_id,uint16 control_id,uint8 visible)
;;;491    static void vTaskMotorCtrl(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;492    {
;;;493        uint8_t key_v, tem8;
;;;494        //uint8_t  key_state, key_state_c;
;;;495        uint8_t count_init_down;
;;;496        
;;;497        uint8_t dg_sta_c;
;;;498        uint8_t lg_zdgy = 0;//自动给药抬起标志，不回吸
000002  f04f0800          MOV      r8,#0
;;;499    	
;;;500        MOTOR_Init( 1000 );
000006  f44f707a          MOV      r0,#0x3e8
00000a  f7fffffe          BL       MOTOR_Init
;;;501        key_v = 0;
00000e  2600              MOVS     r6,#0
;;;502        MOTOR_SetDir( UP );
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       MOTOR_SetDir
;;;503        
;;;504        Motor.max_hx_step = 31495;
000016  f6473007          MOV      r0,#0x7b07
00001a  49f4              LDR      r1,|L10.1004|
00001c  6108              STR      r0,[r1,#0x10]  ; Motor
;;;505        
;;;506        count_init_down = 0;
00001e  2700              MOVS     r7,#0
;;;507        dev_sta = DEV_INIT;
000020  2000              MOVS     r0,#0
000022  49f3              LDR      r1,|L10.1008|
000024  7008              STRB     r0,[r1,#0]
;;;508        dg_sta = DG_INIT;
000026  2001              MOVS     r0,#1
000028  49f2              LDR      r1,|L10.1012|
00002a  7008              STRB     r0,[r1,#0]
;;;509        //dg_sta = DG_STOP; // 测试 不进行顶杆归零动作
;;;510        
;;;511        vTaskDelay(10000);
00002c  f2427010          MOV      r0,#0x2710
000030  f7fffffe          BL       vTaskDelay
;;;512        
;;;513        while(1)
000034  e3fe              B        |L10.2100|
                  |L10.54|
;;;514        {
;;;515            vTaskDelay(2);
000036  2002              MOVS     r0,#2
000038  f7fffffe          BL       vTaskDelay
;;;516    		
;;;517    		if(lg_lcd_init == 0) continue; //等待LCD初始化完成
00003c  48ee              LDR      r0,|L10.1016|
00003e  7800              LDRB     r0,[r0,#0]  ; lg_lcd_init
000040  b900              CBNZ     r0,|L10.68|
000042  e3fd              B        |L10.2112|
                  |L10.68|
;;;518    		    
;;;519    		key_v = bsp_GetKey();
000044  f7fffffe          BL       bsp_GetKey
000048  4606              MOV      r6,r0
;;;520            //if( LCD_GetScreenId() == 0 ) //主界面一
;;;521            {
;;;522                switch( key_v ) //
00004a  2e19              CMP      r6,#0x19
00004c  d002              BEQ      |L10.84|
00004e  2e1a              CMP      r6,#0x1a
000050  d166              BNE      |L10.288|
000052  e046              B        |L10.226|
                  |L10.84|
;;;523        		{
;;;524        		    case PEDAL_DOWN : //踩下脚踏，电机运行
;;;525        			
;;;526        				timer_pedal_up = 0;
000054  2000              MOVS     r0,#0
000056  49e9              LDR      r1,|L10.1020|
000058  7008              STRB     r0,[r1,#0]
;;;527        		        
;;;528        				if( dg_sta == DG_UP ) //顶杆上升期间
00005a  48e6              LDR      r0,|L10.1012|
00005c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00005e  2806              CMP      r0,#6
000060  d13e              BNE      |L10.224|
;;;529        		        {   
;;;530        					//自动给药情况下，踩下脚踏，不做任何动作，等到抬起再停止
;;;531        					if( Tmy.State.bit.zdgy )
000062  48e7              LDR      r0,|L10.1024|
000064  79c0              LDRB     r0,[r0,#7]  ; Tmy
000066  f3c01080          UBFX     r0,r0,#6,#1
00006a  b170              CBZ      r0,|L10.138|
;;;532        					{
;;;533        					    timer_pedal_down = 1;
00006c  2001              MOVS     r0,#1
00006e  49e5              LDR      r1,|L10.1028|
000070  7008              STRB     r0,[r1,#0]
;;;534        					    Tmy.State.bit.zdgy = 0; //取消自动给药
000072  48e3              LDR      r0,|L10.1024|
000074  79c0              LDRB     r0,[r0,#7]  ; Tmy
000076  f0200040          BIC      r0,r0,#0x40
00007a  49e1              LDR      r1,|L10.1024|
00007c  71c8              STRB     r0,[r1,#7]
;;;535        					    //lg_zdgy = 0;//自动给药抬起标志，取消
;;;536        					    //播放语音:自动给药取消？
;;;537        					    SetTextValue(0,26,"自动给药取消");
00007e  a2e2              ADR      r2,|L10.1032|
000080  211a              MOVS     r1,#0x1a
000082  2000              MOVS     r0,#0
000084  f7fffffe          BL       SetTextValue
000088  e02a              B        |L10.224|
                  |L10.138|
;;;538        					    
;;;539        					}else //非自动给药
;;;540        					{
;;;541            					timer_pedal_down = 1;
00008a  2001              MOVS     r0,#1
00008c  49dd              LDR      r1,|L10.1028|
00008e  7008              STRB     r0,[r1,#0]
;;;542            					//Tmy.State.bit.zdgy = 0;//取消自动给药
;;;543            					lg_zdgy = 0;//自动给药抬起标志，取消
000090  f04f0800          MOV      r8,#0
;;;544            					
;;;545                	            Motor.speed++;
000094  48d5              LDR      r0,|L10.1004|
000096  7800              LDRB     r0,[r0,#0]  ; Motor
000098  1c40              ADDS     r0,r0,#1
00009a  49d4              LDR      r1,|L10.1004|
00009c  7008              STRB     r0,[r1,#0]
;;;546                	            if( Motor.speed > 3 ) 
00009e  4608              MOV      r0,r1
0000a0  7800              LDRB     r0,[r0,#0]  ; Motor
0000a2  2803              CMP      r0,#3
0000a4  dd01              BLE      |L10.170|
;;;547                	            {
;;;548                	                Motor.speed = 1;
0000a6  2001              MOVS     r0,#1
0000a8  7008              STRB     r0,[r1,#0]
                  |L10.170|
;;;549                	            }
;;;550                	            
;;;551                	            tem8 = MOTOR_SPEED_INDEX[Motor.gear][Motor.speed-1];
0000aa  48d0              LDR      r0,|L10.1004|
0000ac  7840              LDRB     r0,[r0,#1]  ; Motor
0000ae  eb000040          ADD      r0,r0,r0,LSL #1
0000b2  49d9              LDR      r1,|L10.1048|
0000b4  eb010140          ADD      r1,r1,r0,LSL #1
0000b8  48cc              LDR      r0,|L10.1004|
0000ba  7800              LDRB     r0,[r0,#0]  ; Motor
0000bc  1e40              SUBS     r0,r0,#1
0000be  f8115010          LDRB     r5,[r1,r0,LSL #1]
;;;552                	            Tmy.speed = tem8;
0000c2  48cf              LDR      r0,|L10.1024|
0000c4  7105              STRB     r5,[r0,#4]
;;;553                	             
;;;554                	            MOTOR_SetSpeed( MOTOR_SPEED_CYCLE[tem8] ); //设置电机速度
0000c6  49d5              LDR      r1,|L10.1052|
0000c8  f8310015          LDRH     r0,[r1,r5,LSL #1]
0000cc  f7fffffe          BL       MOTOR_SetSpeed
;;;555                	            SetTextValue(0, 16, &MOTOR_SPEED_DISPLAY[tem8][0]); 
0000d0  eb0500c5          ADD      r0,r5,r5,LSL #3
0000d4  49d2              LDR      r1,|L10.1056|
0000d6  1842              ADDS     r2,r0,r1
0000d8  2110              MOVS     r1,#0x10
0000da  2000              MOVS     r0,#0
0000dc  f7fffffe          BL       SetTextValue
                  |L10.224|
;;;556                	            //SetTextInt32(0, 17, MOTOR_SPEED_CYCLE[tem8], 0, 1);
;;;557                	            //Tmy.work_state = STA_MOVE;
;;;558        					}
;;;559        		        }
;;;560        		        
;;;561        		        break;
0000e0  e01f              B        |L10.290|
                  |L10.226|
;;;562        		    case PEDAL_UP : //抬起脚踏
;;;563        			
;;;564        				timer_pedal_down = 0;
0000e2  2000              MOVS     r0,#0
0000e4  49c7              LDR      r1,|L10.1028|
0000e6  7008              STRB     r0,[r1,#0]
;;;565        				
;;;566        		        if( dg_sta == DG_UP ) //顶杆上升期间
0000e8  48c2              LDR      r0,|L10.1012|
0000ea  7800              LDRB     r0,[r0,#0]  ; dg_sta
0000ec  2806              CMP      r0,#6
0000ee  d116              BNE      |L10.286|
;;;567        		        {
;;;568        					if( Tmy.State.bit.zdgy ) //自动给药
0000f0  48c3              LDR      r0,|L10.1024|
0000f2  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000f4  f3c01080          UBFX     r0,r0,#6,#1
0000f8  b988              CBNZ     r0,|L10.286|
;;;569            		        {
;;;570        						;//自动给药
;;;571        					}else //非自动给药
;;;572        					{
;;;573        						//Motor.speed = 0;
;;;574        						MOTOR_Stop(); //电机停止
0000fa  f7fffffe          BL       MOTOR_Stop
;;;575        						timer_pedal_up = 1;//启动脚踏抬起计时
0000fe  2001              MOVS     r0,#1
000100  49be              LDR      r1,|L10.1020|
000102  7008              STRB     r0,[r1,#0]
;;;576        						
;;;577        						SetTextValue(0, 16,"停止\x00");
000104  a2c7              ADR      r2,|L10.1060|
000106  2110              MOVS     r1,#0x10
000108  2000              MOVS     r0,#0
00010a  f7fffffe          BL       SetTextValue
;;;578        						SetTextInt32(0, 17, 0, 0, 1);
00010e  2001              MOVS     r0,#1
000110  2300              MOVS     r3,#0
000112  461a              MOV      r2,r3
000114  2111              MOVS     r1,#0x11
000116  9000              STR      r0,[sp,#0]
000118  4618              MOV      r0,r3
00011a  f7fffffe          BL       SetTextInt32
                  |L10.286|
;;;579        						//Tmy.work_state = STA_IDLE;
;;;580        					}
;;;581            	        }
;;;582        	            break;
00011e  e000              B        |L10.290|
                  |L10.288|
;;;583        		    default : break;
000120  bf00              NOP      
                  |L10.290|
000122  bf00              NOP                            ;561
;;;584        		}
;;;585                
;;;586        		if( dg_sta == DG_UP ) //顶杆上升期间
000124  48b3              LDR      r0,|L10.1012|
000126  7800              LDRB     r0,[r0,#0]  ; dg_sta
000128  2806              CMP      r0,#6
00012a  d169              BNE      |L10.512|
;;;587        		{
;;;588        			// if( timer_pedal_up > DLY_PEDAL_UP_MOTOR_STOP ) //抬起脚踏时间大于 DLY_PEDAL_UP_MOTOR_STOP 秒
;;;589        			// {
;;;590        				// timer_pedal_up = 0;
;;;591        				// Motor.speed = 0; //恢复速度
;;;592        				// if( Tmy.Key.hx )//&& (!Motor.state.bit.dir) )//回吸模式有效 Motor.state.bit.dir
;;;593        				// {
;;;594        					// if(!lg_zdgy) //非自动给药
;;;595        					// {
;;;596        						// lg_zdgy = 0;//自动给药抬起标志，取消
;;;597        						// if( ( Tmy.speed == SLOWEST )   //慢慢速
;;;598        						 // || ( Tmy.speed == SLOW    ) ) //常慢速
;;;599        						// {
;;;600        							// Motor.counter_hx_step = Motor.counter_step - Motor.max_hx_step;
;;;601        							// dg_sta = DG_HX_DOWN;//
;;;602        						// }
;;;603        					// }
;;;604        				// }
;;;605        			// }
;;;606        			//回吸判断
;;;607        			//if( ( Tmy.speed == SLOWEST )   //慢慢速
;;;608        			// || ( Tmy.speed == SLOW    ) ) //常慢速
;;;609        			{
;;;610        				if( timer_pedal_up > DLY_PEDAL_UP_MOTOR_STOP ) //抬起脚踏时间大于 DLY_PEDAL_UP_MOTOR_STOP 秒
00012c  48b3              LDR      r0,|L10.1020|
00012e  7800              LDRB     r0,[r0,#0]  ; timer_pedal_up
000130  2802              CMP      r0,#2
000132  dd2c              BLE      |L10.398|
;;;611        				{
;;;612        					timer_pedal_up = 0;
000134  2000              MOVS     r0,#0
000136  49b1              LDR      r1,|L10.1020|
000138  7008              STRB     r0,[r1,#0]
;;;613        					Motor.speed = 0; //恢复速度
00013a  49ac              LDR      r1,|L10.1004|
00013c  7008              STRB     r0,[r1,#0]
;;;614        					if( ( Tmy.Key.hx ) //回吸模式有效
00013e  48b0              LDR      r0,|L10.1024|
000140  7980              LDRB     r0,[r0,#6]  ; Tmy
000142  f0000001          AND      r0,r0,#1
000146  b310              CBZ      r0,|L10.398|
;;;615        					  &&( ( Tmy.speed == SLOWEST ) || ( Tmy.speed == SLOW ) ) )//慢慢速 常慢速
000148  48ad              LDR      r0,|L10.1024|
00014a  7900              LDRB     r0,[r0,#4]  ; Tmy
00014c  b118              CBZ      r0,|L10.342|
00014e  48ac              LDR      r0,|L10.1024|
000150  7900              LDRB     r0,[r0,#4]  ; Tmy
000152  2801              CMP      r0,#1
000154  d11b              BNE      |L10.398|
                  |L10.342|
;;;616        					{
;;;617        						if(!lg_zdgy) //非自动给药
000156  f1b80f00          CMP      r8,#0
00015a  d118              BNE      |L10.398|
;;;618        						{
;;;619        							lg_zdgy = 0;//自动给药抬起标志，取消
00015c  f04f0800          MOV      r8,#0
;;;620        							Motor.counter_hx_step_up = Motor.counter_step; //存储回吸位置
000160  48a2              LDR      r0,|L10.1004|
000162  6840              LDR      r0,[r0,#4]  ; Motor
000164  49a1              LDR      r1,|L10.1004|
000166  6148              STR      r0,[r1,#0x14]  ; Motor
;;;621        							//判断回吸距离，此处可判断大于STEP_HX_ENABLE距离才可以回吸，STEP_HX_ENABLE默认0
;;;622        							if( Motor.counter_step > ( Motor.max_hx_step + STEP_HX_ENABLE ) ) //有效距离
000168  4608              MOV      r0,r1
00016a  6841              LDR      r1,[r0,#4]  ; Motor
00016c  6900              LDR      r0,[r0,#0x10]  ; Motor
00016e  4281              CMP      r1,r0
000170  d907              BLS      |L10.386|
;;;623        							{
;;;624        								Motor.counter_hx_step = Motor.counter_step - Motor.max_hx_step; 
000172  489e              LDR      r0,|L10.1004|
000174  6840              LDR      r0,[r0,#4]  ; Motor
000176  499d              LDR      r1,|L10.1004|
000178  6909              LDR      r1,[r1,#0x10]  ; Motor
00017a  1a40              SUBS     r0,r0,r1
00017c  499b              LDR      r1,|L10.1004|
00017e  60c8              STR      r0,[r1,#0xc]  ; Motor
000180  e002              B        |L10.392|
                  |L10.386|
;;;625        								
;;;626        							}else //判断回吸距离不够的情况，最低触底
;;;627        							{
;;;628        								Motor.counter_hx_step = 0;
000182  2000              MOVS     r0,#0
000184  4999              LDR      r1,|L10.1004|
000186  60c8              STR      r0,[r1,#0xc]  ; Motor
                  |L10.392|
;;;629        							}
;;;630        							dg_sta = DG_HX_DOWN;//进入回吸
000188  200b              MOVS     r0,#0xb
00018a  499a              LDR      r1,|L10.1012|
00018c  7008              STRB     r0,[r1,#0]
                  |L10.398|
;;;631        						}
;;;632        					}
;;;633        				}
;;;634        			}
;;;635        			
;;;636        			//自动给药判断
;;;637        			if( ( Tmy.speed == SLOWEST )   //慢慢速
00018e  489c              LDR      r0,|L10.1024|
000190  7900              LDRB     r0,[r0,#4]  ; Tmy
000192  b118              CBZ      r0,|L10.412|
;;;638        			 || ( Tmy.speed == SLOW    ) ) //常慢速
000194  489a              LDR      r0,|L10.1024|
000196  7900              LDRB     r0,[r0,#4]  ; Tmy
000198  2801              CMP      r0,#1
00019a  d131              BNE      |L10.512|
                  |L10.412|
;;;639        			{
;;;640        				if( ( !Tmy.State.bit.zdgy ) && ( timer_pedal_down > TIME_ZDGY_ENABLE ) ) //踩下脚踏时间大于TIME_CRUISE_START秒
00019c  4898              LDR      r0,|L10.1024|
00019e  79c0              LDRB     r0,[r0,#7]  ; Tmy
0001a0  f3c01080          UBFX     r0,r0,#6,#1
0001a4  b9a0              CBNZ     r0,|L10.464|
0001a6  4897              LDR      r0,|L10.1028|
0001a8  7800              LDRB     r0,[r0,#0]  ; timer_pedal_down
0001aa  2805              CMP      r0,#5
0001ac  dd10              BLE      |L10.464|
;;;641        				{
;;;642        					Tmy.State.bit.zdgy = 1; //进入自动给药
0001ae  4894              LDR      r0,|L10.1024|
0001b0  79c0              LDRB     r0,[r0,#7]  ; Tmy
0001b2  f0200040          BIC      r0,r0,#0x40
0001b6  3040              ADDS     r0,r0,#0x40
0001b8  4991              LDR      r1,|L10.1024|
0001ba  71c8              STRB     r0,[r1,#7]
;;;643        					SetTextValue(0,26,"自动给药...");
0001bc  a29b              ADR      r2,|L10.1068|
0001be  211a              MOVS     r1,#0x1a
0001c0  2000              MOVS     r0,#0
0001c2  f7fffffe          BL       SetTextValue
;;;644        					PlayMusic("a:/sounds/zdgy.mp3"); //播放语音:自动给药
0001c6  a09c              ADR      r0,|L10.1080|
0001c8  f7fffffe          BL       PlayMusic
;;;645        					//如果2秒内，抬脚，自动给药
;;;646        					//如果2秒内，没有抬脚，不进自动给药
;;;647        					lg_zdgy = 1;//自动给药抬起标志，不回吸
0001cc  f04f0801          MOV      r8,#1
                  |L10.464|
;;;648        				}
;;;649        				
;;;650        				if( ( Tmy.State.bit.zdgy ) && ( timer_pedal_down > TIME_ZDGY_CANCLE ) ) //踩下脚踏时间大于5秒
0001d0  488b              LDR      r0,|L10.1024|
0001d2  79c0              LDRB     r0,[r0,#7]  ; Tmy
0001d4  f3c01080          UBFX     r0,r0,#6,#1
0001d8  b190              CBZ      r0,|L10.512|
0001da  488a              LDR      r0,|L10.1028|
0001dc  7800              LDRB     r0,[r0,#0]  ; timer_pedal_down
0001de  2808              CMP      r0,#8
0001e0  dd0e              BLE      |L10.512|
;;;651        				{
;;;652        					Tmy.State.bit.zdgy = 0;//取消自动给药
0001e2  4887              LDR      r0,|L10.1024|
0001e4  79c0              LDRB     r0,[r0,#7]  ; Tmy
0001e6  f0200040          BIC      r0,r0,#0x40
0001ea  4985              LDR      r1,|L10.1024|
0001ec  71c8              STRB     r0,[r1,#7]
;;;653        					timer_pedal_down = 0;
0001ee  2000              MOVS     r0,#0
0001f0  4984              LDR      r1,|L10.1028|
0001f2  7008              STRB     r0,[r1,#0]
;;;654        					SetTextValue(0,26,"自动给药取消");
0001f4  a284              ADR      r2,|L10.1032|
0001f6  211a              MOVS     r1,#0x1a
0001f8  f7fffffe          BL       SetTextValue
;;;655        					//播放语音:自动给药取消xxx
;;;656        					//如果2秒内，抬脚，自动给药
;;;657        					//如果2秒内，没有抬脚，不进自动给药
;;;658        					lg_zdgy = 0;//自动给药抬起标志，取消
0001fc  f04f0800          MOV      r8,#0
                  |L10.512|
;;;659        				}
;;;660        			}
;;;661        		}
;;;662    		
;;;663    		//紧急制动功能有待完善
;;;664    //		if( Tmy.Key.jjzd ) //紧急制动
;;;665    //		{
;;;666    //			MOTOR_Stop();//步进电机停止
;;;667    //			Tmy.Motor.state = MOTOR_STOP;//更改步进电机状态
;;;668    //			dg_sta = DG_STOP;
;;;669    //		}
;;;670    		
;;;671                switch( dg_sta )
000200  487c              LDR      r0,|L10.1012|
000202  7800              LDRB     r0,[r0,#0]  ; dg_sta
000204  2810              CMP      r0,#0x10
000206  d27d              BCS      |L10.772|
000208  e8dff000          TBB      [pc,r0]
00020c  ef082a5e          DCB      0xef,0x08,0x2a,0x5e
000210  eeb4edec          DCB      0xee,0xb4,0xed,0xec
000214  ebeae9e8          DCB      0xeb,0xea,0xe9,0xe8
000218  7c7ce7e6          DCB      0x7c,0x7c,0xe7,0xe6
;;;672                {
;;;673                    case DG_INIT : //上电，参数初始化
;;;674                        if( dg_sta_c != dg_sta )
00021c  4875              LDR      r0,|L10.1012|
00021e  7800              LDRB     r0,[r0,#0]  ; dg_sta
000220  4284              CMP      r4,r0
000222  d001              BEQ      |L10.552|
;;;675                        {
;;;676                            dg_sta_c = dg_sta;
000224  4873              LDR      r0,|L10.1012|
000226  7804              LDRB     r4,[r0,#0]  ; dg_sta
                  |L10.552|
;;;677                            //SetTextValue(0,26,"初始化...");
;;;678                        }
;;;679                        
;;;680                        if( !Tmy.State.bit.InitPara ) //参数尚未初始化
000228  4875              LDR      r0,|L10.1024|
00022a  79c0              LDRB     r0,[r0,#7]  ; Tmy
00022c  f0000001          AND      r0,r0,#1
000230  b968              CBNZ     r0,|L10.590|
;;;681                        {
;;;682                            if( lg_lcd_init == 1 )
000232  4871              LDR      r0,|L10.1016|
000234  7800              LDRB     r0,[r0,#0]  ; lg_lcd_init
000236  2801              CMP      r0,#1
000238  d111              BNE      |L10.606|
;;;683                            {
;;;684                                //lg_lcd_init = 2;
;;;685                                LCD_ParaInit();
00023a  f7fffffe          BL       LCD_ParaInit
;;;686                                Tmy.State.bit.InitPara = 1;
00023e  4870              LDR      r0,|L10.1024|
000240  79c0              LDRB     r0,[r0,#7]  ; Tmy
000242  f0200001          BIC      r0,r0,#1
000246  1c40              ADDS     r0,r0,#1
000248  496d              LDR      r1,|L10.1024|
00024a  71c8              STRB     r0,[r1,#7]
00024c  e007              B        |L10.606|
                  |L10.590|
;;;687                            }
;;;688                            //Tmy.State.bit.InitPara = 1;
;;;689                        }else //参数初始化完成
;;;690                        {
;;;691                            SetTextValue(0,26,"LCD初始化完成。");
00024e  a27f              ADR      r2,|L10.1100|
000250  211a              MOVS     r1,#0x1a
000252  2000              MOVS     r0,#0
000254  f7fffffe          BL       SetTextValue
;;;692                            dg_sta = DG_INIT_DOWN;//顶杆归零
000258  2003              MOVS     r0,#3
00025a  4966              LDR      r1,|L10.1012|
00025c  7008              STRB     r0,[r1,#0]
                  |L10.606|
;;;693                        }
;;;694                        
;;;695                        break;
00025e  e2ed              B        |L10.2108|
;;;696                    
;;;697                    case DG_INIT_UP : //上电初始化过程，顶杆不在零位，先归零，然后再先上升一小段再归零
;;;698                        
;;;699                        if( dg_sta_c != dg_sta )
000260  4864              LDR      r0,|L10.1012|
000262  7800              LDRB     r0,[r0,#0]  ; dg_sta
000264  4284              CMP      r4,r0
000266  d006              BEQ      |L10.630|
;;;700                        {
;;;701                            dg_sta_c = dg_sta;
000268  4862              LDR      r0,|L10.1012|
00026a  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;702                            SetTextValue(0,26,"检测归零传感器,上升...");
00026c  a27b              ADR      r2,|L10.1116|
00026e  211a              MOVS     r1,#0x1a
000270  2000              MOVS     r0,#0
000272  f7fffffe          BL       SetTextValue
                  |L10.630|
;;;703                        }
;;;704                        
;;;705                        if( !Tmy.Sensor.bit.bottom )//检测离开底部
000276  4862              LDR      r0,|L10.1024|
000278  7a00              LDRB     r0,[r0,#8]  ; Tmy
00027a  f0000001          AND      r0,r0,#1
00027e  b910              CBNZ     r0,|L10.646|
;;;706                        {
;;;707                            dg_sta = DG_INIT_DOWN;//再次复位
000280  2003              MOVS     r0,#3
000282  495c              LDR      r1,|L10.1012|
000284  7008              STRB     r0,[r1,#0]
                  |L10.646|
;;;708                        }
;;;709                        
;;;710                        if( Tmy.Motor.state != MOTOR_UP ) //步进电机不是在上升
000286  485e              LDR      r0,|L10.1024|
000288  7800              LDRB     r0,[r0,#0]  ; Tmy
00028a  2801              CMP      r0,#1
00028c  d00b              BEQ      |L10.678|
;;;711                        {
;;;712                            MOTOR_Stop();//步进电机停止
00028e  f7fffffe          BL       MOTOR_Stop
;;;713                            MOTOR_SetDir( UP );//方向上升
000292  2000              MOVS     r0,#0
000294  f7fffffe          BL       MOTOR_SetDir
;;;714                            MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度 XXX
000298  2086              MOVS     r0,#0x86
00029a  f7fffffe          BL       MOTOR_SetSpeed
;;;715                            Tmy.Motor.state = MOTOR_UP;//更改步进电机状态
00029e  2001              MOVS     r0,#1
0002a0  4957              LDR      r1,|L10.1024|
0002a2  7008              STRB     r0,[r1,#0]
0002a4  e00f              B        |L10.710|
                  |L10.678|
;;;716                        }else //步进电机在上升
;;;717                        {
;;;718                            //上升5秒还未检测到离开底部
;;;719                            if (!timer_dg_init)
0002a6  4873              LDR      r0,|L10.1140|
0002a8  7800              LDRB     r0,[r0,#0]  ; timer_dg_init
0002aa  b960              CBNZ     r0,|L10.710|
;;;720                            {
;;;721                                dev_sta = DEV_ERR;
0002ac  2002              MOVS     r0,#2
0002ae  4950              LDR      r1,|L10.1008|
0002b0  7008              STRB     r0,[r1,#0]
;;;722    
;;;723                                MOTOR_Stop();//步进电机停止
0002b2  f7fffffe          BL       MOTOR_Stop
;;;724                                MOTOR_SetDir( UP );//方向上升
0002b6  2000              MOVS     r0,#0
0002b8  f7fffffe          BL       MOTOR_SetDir
;;;725                                Tmy.Motor.state = MOTOR_STOP;//更改步进电机状态
0002bc  2000              MOVS     r0,#0
0002be  4950              LDR      r1,|L10.1024|
0002c0  7008              STRB     r0,[r1,#0]
;;;726                                dg_sta = DG_STOP;//
0002c2  494c              LDR      r1,|L10.1012|
0002c4  7008              STRB     r0,[r1,#0]
                  |L10.710|
;;;727                            }
;;;728        //                    if( key_v == PEDAL_UP )//检测到脚踏抬起
;;;729        //                    {
;;;730        //                        dg_sta = DG_STOP;//停止
;;;731        //                    }
;;;732                        }
;;;733                        
;;;734                        break;
0002c6  e2b9              B        |L10.2108|
;;;735                    case DG_INIT_DOWN : //上电初始化过程，顶杆不在零位，先归零，然后再先上升一小段再归零
;;;736                        
;;;737                        if( dg_sta_c != dg_sta )
0002c8  484a              LDR      r0,|L10.1012|
0002ca  7800              LDRB     r0,[r0,#0]  ; dg_sta
0002cc  4284              CMP      r4,r0
0002ce  d006              BEQ      |L10.734|
;;;738                        {
;;;739                            dg_sta_c = dg_sta;
0002d0  4848              LDR      r0,|L10.1012|
0002d2  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;740                            SetTextValue(0,26,"顶杆归零...");
0002d4  a268              ADR      r2,|L10.1144|
0002d6  211a              MOVS     r1,#0x1a
0002d8  2000              MOVS     r0,#0
0002da  f7fffffe          BL       SetTextValue
                  |L10.734|
;;;741                        }
;;;742                        
;;;743                        if( key_v == ZERO_DETECT )//检测到触底
0002de  2e1d              CMP      r6,#0x1d
0002e0  d10f              BNE      |L10.770|
;;;744                        {
;;;745                            Tmy.Sensor.bit.bottom = 1;
0002e2  4847              LDR      r0,|L10.1024|
0002e4  7a00              LDRB     r0,[r0,#8]  ; Tmy
0002e6  f0200001          BIC      r0,r0,#1
0002ea  1c40              ADDS     r0,r0,#1
0002ec  4944              LDR      r1,|L10.1024|
0002ee  7208              STRB     r0,[r1,#8]
;;;746            		        MOTOR_Stop();
0002f0  f7fffffe          BL       MOTOR_Stop
;;;747            		        Motor.counter_step = 0;
0002f4  2000              MOVS     r0,#0
0002f6  493d              LDR      r1,|L10.1004|
0002f8  6048              STR      r0,[r1,#4]  ; Motor
;;;748            		        SetTextValue(0,18,"已触底");
0002fa  a262              ADR      r2,|L10.1156|
0002fc  2112              MOVS     r1,#0x12
0002fe  f7fffffe          BL       SetTextValue
                  |L10.770|
;;;749                        }
;;;750                        
;;;751                        if( Tmy.Sensor.bit.bottom )//到达底部
000302  e000              B        |L10.774|
                  |L10.772|
000304  e299              B        |L10.2106|
                  |L10.774|
000306  483e              LDR      r0,|L10.1024|
000308  7a00              LDRB     r0,[r0,#8]  ; Tmy
00030a  f0000001          AND      r0,r0,#1
00030e  b308              CBZ      r0,|L10.852|
;;;752                        {
;;;753                            if( !count_init_down ) //第一次触底
000310  b96f              CBNZ     r7,|L10.814|
;;;754                            {
;;;755                                SetTextValue(0,26,"已触底");
000312  a25c              ADR      r2,|L10.1156|
000314  211a              MOVS     r1,#0x1a
000316  2000              MOVS     r0,#0
000318  f7fffffe          BL       SetTextValue
;;;756                                count_init_down++;
00031c  1c78              ADDS     r0,r7,#1
00031e  b2c7              UXTB     r7,r0
;;;757                                dg_sta = DG_INIT_UP;//上升一段
000320  2002              MOVS     r0,#2
000322  4934              LDR      r1,|L10.1012|
000324  7008              STRB     r0,[r1,#0]
;;;758                                timer_dg_init = 5; //5秒初始化限制
000326  2005              MOVS     r0,#5
000328  4952              LDR      r1,|L10.1140|
00032a  7008              STRB     r0,[r1,#0]
00032c  e021              B        |L10.882|
                  |L10.814|
;;;759                            }else //第二次触底
;;;760                            {
;;;761                                SetBuzzer(100);
00032e  2064              MOVS     r0,#0x64
000330  f7fffffe          BL       SetBuzzer
;;;762                                SetTextValue(0,26,"顶杆归零完成");
000334  a255              ADR      r2,|L10.1164|
000336  211a              MOVS     r1,#0x1a
000338  2000              MOVS     r0,#0
00033a  f7fffffe          BL       SetTextValue
;;;763                                Tmy.State.bit.init = 1; //初始化完成
00033e  4830              LDR      r0,|L10.1024|
000340  79c0              LDRB     r0,[r0,#7]  ; Tmy
000342  f0200002          BIC      r0,r0,#2
000346  1c80              ADDS     r0,r0,#2
000348  492d              LDR      r1,|L10.1024|
00034a  71c8              STRB     r0,[r1,#7]
;;;764                                dg_sta = DG_STOP_BOT;//停在底部
00034c  2005              MOVS     r0,#5
00034e  4929              LDR      r1,|L10.1012|
000350  7008              STRB     r0,[r1,#0]
000352  e00e              B        |L10.882|
                  |L10.852|
;;;765                                //dev_sta = DEV_STANDBY;//设备待机  
;;;766                            }
;;;767                            
;;;768                        }else //未到达底部
;;;769                        {
;;;770                            if( Tmy.Motor.state != MOTOR_DOWN ) //步进电机不是在下降
000354  482a              LDR      r0,|L10.1024|
000356  7800              LDRB     r0,[r0,#0]  ; Tmy
000358  2802              CMP      r0,#2
00035a  d00a              BEQ      |L10.882|
;;;771                            {
;;;772                                MOTOR_Stop();//步进电机停止
00035c  f7fffffe          BL       MOTOR_Stop
;;;773                                MOTOR_SetDir( DOWN );//方向下降
000360  2001              MOVS     r0,#1
000362  f7fffffe          BL       MOTOR_SetDir
;;;774                                MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度 XXX
000366  2086              MOVS     r0,#0x86
000368  f7fffffe          BL       MOTOR_SetSpeed
;;;775                                Tmy.Motor.state = MOTOR_DOWN;//更改步进电机状态
00036c  2002              MOVS     r0,#2
00036e  4924              LDR      r1,|L10.1024|
000370  7008              STRB     r0,[r1,#0]
                  |L10.882|
;;;776                            }else //步进电机在下降
;;;777                            {
;;;778            //                    if( key_v == PEDAL_UP )//检测到脚踏抬起
;;;779            //                    {
;;;780            //                        dg_sta = DG_STOP;//停止
;;;781            //                    }
;;;782                            }
;;;783                        }
;;;784                        break;
000372  e263              B        |L10.2108|
;;;785                    
;;;786                    case DG_STOP_BOT : //停留在底部
;;;787                        //触底步数归零
;;;788                        MOTOR_ClrStep( );
000374  f7fffffe          BL       MOTOR_ClrStep
;;;789                        
;;;790                        if( dg_sta_c != dg_sta )
000378  481e              LDR      r0,|L10.1012|
00037a  7800              LDRB     r0,[r0,#0]  ; dg_sta
00037c  4284              CMP      r4,r0
00037e  d006              BEQ      |L10.910|
;;;791                        {
;;;792                            dg_sta_c = dg_sta;
000380  481c              LDR      r0,|L10.1012|
000382  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;793                            SetTextValue(0,26,"触底待机");
000384  a245              ADR      r2,|L10.1180|
000386  211a              MOVS     r1,#0x1a
000388  2000              MOVS     r0,#0
00038a  f7fffffe          BL       SetTextValue
                  |L10.910|
;;;794                        }
;;;795                        
;;;796                        if( Tmy.Motor.state != MOTOR_STOP ) //步进电机在运行
00038e  481c              LDR      r0,|L10.1024|
000390  7800              LDRB     r0,[r0,#0]  ; Tmy
000392  b148              CBZ      r0,|L10.936|
;;;797                        {
;;;798                            MOTOR_Stop();//步进电机停止
000394  f7fffffe          BL       MOTOR_Stop
;;;799                            MOTOR_SetDir( UP );//方向上升
000398  2000              MOVS     r0,#0
00039a  f7fffffe          BL       MOTOR_SetDir
;;;800                            Tmy.Motor.state = MOTOR_STOP;//更改步进电机状态
00039e  2000              MOVS     r0,#0
0003a0  4917              LDR      r1,|L10.1024|
0003a2  7008              STRB     r0,[r1,#0]
;;;801                            MOTOR_ClrStep( ); //步数清零
0003a4  f7fffffe          BL       MOTOR_ClrStep
                  |L10.936|
;;;802                        }
;;;803                        
;;;804                        if( key_v == PEDAL_DOWN ) //检测到踩脚踏
0003a8  2e19              CMP      r6,#0x19
0003aa  d114              BNE      |L10.982|
;;;805                        {
;;;806                            if( Tmy.Key.zdpk ) //自动排空
0003ac  4814              LDR      r0,|L10.1024|
0003ae  7980              LDRB     r0,[r0,#6]  ; Tmy
0003b0  f3c00040          UBFX     r0,r0,#1,#1
0003b4  b118              CBZ      r0,|L10.958|
;;;807                            {
;;;808                               // SetTextValue(0,26,"自动排空...");
;;;809                                dg_sta = DG_ZDPK_UP;//顶杆上升
0003b6  2008              MOVS     r0,#8
0003b8  490e              LDR      r1,|L10.1012|
0003ba  7008              STRB     r0,[r1,#0]
0003bc  e00b              B        |L10.982|
                  |L10.958|
;;;810                            }else
;;;811                            if( Tmy.Key.ecpk ) //二次排空
0003be  4810              LDR      r0,|L10.1024|
0003c0  7980              LDRB     r0,[r0,#6]  ; Tmy
0003c2  f3c00080          UBFX     r0,r0,#2,#1
0003c6  b118              CBZ      r0,|L10.976|
;;;812                            {
;;;813                               // SetTextValue(0,26,"二次排空...");
;;;814                                dg_sta = DG_ECPK_UP;//顶杆上升
0003c8  2009              MOVS     r0,#9
0003ca  490a              LDR      r1,|L10.1012|
0003cc  7008              STRB     r0,[r1,#0]
0003ce  e002              B        |L10.982|
                  |L10.976|
;;;815                            }else
;;;816                            //if( dev_sta == DEV_RUN )//设备运行状态
;;;817                            {
;;;818                                //SetTextValue(0,26,"顶杆上升...");
;;;819                                dg_sta = DG_UP;//顶杆上升
0003d0  2006              MOVS     r0,#6
0003d2  4908              LDR      r1,|L10.1012|
0003d4  7008              STRB     r0,[r1,#0]
                  |L10.982|
;;;820                            }
;;;821                        }
;;;822        //                if(  )//顶杆检查按键按下
;;;823        //                {
;;;824        //                    if( dev_sta == DEV_FIX )//顶杆检查
;;;825        //                    {
;;;826        //                        dg_sta = DG_FIX_UP;//顶杆检查上升
;;;827        //                    }
;;;828        //                }
;;;829                        
;;;830        //                if( key_v == PEDAL_DOWN )//检测到脚踏按下
;;;831        //                {
;;;832        //                    if( dev_sta == DEV_RUN )//设备运行状态
;;;833        //                    {
;;;834        //                        dg_sta = DG_UP;//顶杆上升
;;;835        //                    }else
;;;836        //                    if( dev_sta == DEV_FIX )//顶杆检查
;;;837        //                    {
;;;838        //                        dg_sta = DG_FIX_UP;//顶杆检查上升
;;;839        //                    }
;;;840        //                }
;;;841    
;;;842                        break;
0003d6  e231              B        |L10.2108|
0003d8  e20d              B        |L10.2038|
0003da  e1e6              B        |L10.1962|
0003dc  e17e              B        |L10.1756|
0003de  e1b8              B        |L10.1874|
0003e0  e0b1              B        |L10.1350|
0003e2  e08c              B        |L10.1278|
0003e4  e151              B        |L10.1674|
0003e6  e0d1              B        |L10.1420|
0003e8  e11c              B        |L10.1572|
0003ea  e05d              B        |L10.1192|
                  |L10.1004|
                          DCD      Motor
                  |L10.1008|
                          DCD      dev_sta
                  |L10.1012|
                          DCD      dg_sta
                  |L10.1016|
                          DCD      lg_lcd_init
                  |L10.1020|
                          DCD      timer_pedal_up
                  |L10.1024|
                          DCD      Tmy
                  |L10.1028|
                          DCD      timer_pedal_down
                  |L10.1032|
000408  d7d4b6af          DCB      215,212,182,175,184,248,210,169,200,161,207,251,0
00040c  b8f8d2a9
000410  c8a1cffb
000414  00      
000415  00                DCB      0
000416  00                DCB      0
000417  00                DCB      0
                  |L10.1048|
                          DCD      MOTOR_SPEED_INDEX
                  |L10.1052|
                          DCD      MOTOR_SPEED_CYCLE
                  |L10.1056|
                          DCD      MOTOR_SPEED_DISPLAY
                  |L10.1060|
000424  cda3d6b9          DCB      205,163,214,185,0
000428  00      
000429  00                DCB      0
00042a  00                DCB      0
00042b  00                DCB      0
                  |L10.1068|
00042c  d7d4b6af          DCB      215,212,182,175,184,248,210,169,"...",0
000430  b8f8d2a9
000434  2e2e2e00
                  |L10.1080|
000438  613a2f73          DCB      "a:/sounds/zdgy.mp3",0
00043c  6f756e64
000440  732f7a64
000444  67792e6d
000448  703300  
00044b  00                DCB      0
                  |L10.1100|
00044c  4c4344b3          DCB      "LCD",179,245,202,188,187,175,205,234,179,201,161,163,0
000450  f5cabcbb
000454  afcdeab3
000458  c9a1a300
                  |L10.1116|
00045c  bcecb2e2          DCB      188,236,178,226,185,233,193,227,180,171,184,208,198,247,","
000460  b9e9c1e3
000464  b4abb8d0
000468  c6f72c  
00046b  c9cfc9fd          DCB      201,207,201,253,"...",0
00046f  2e2e2e00
000473  00                DCB      0
                  |L10.1140|
                          DCD      timer_dg_init
                  |L10.1144|
000478  b6a5b8cb          DCB      182,165,184,203,185,233,193,227,"...",0
00047c  b9e9c1e3
000480  2e2e2e00
                  |L10.1156|
000484  d2d1b4a5          DCB      210,209,180,165,181,215,0
000488  b5d700  
00048b  00                DCB      0
                  |L10.1164|
00048c  b6a5b8cb          DCB      182,165,184,203,185,233,193,227,205,234,179,201,0
000490  b9e9c1e3
000494  cdeab3c9
000498  00      
000499  00                DCB      0
00049a  00                DCB      0
00049b  00                DCB      0
                  |L10.1180|
00049c  b4a5b5d7          DCB      180,165,181,215
                  |L10.1184|
0004a0  b4fdbbfa          DCB      180,253,187,250,0
0004a4  00      
0004a5  00                DCB      0
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L10.1192|
;;;843                            
;;;844                    case DG_STOP : //停止
;;;845                        
;;;846                        if( dg_sta_c != dg_sta )
0004a8  48e6              LDR      r0,|L10.2116|
0004aa  7800              LDRB     r0,[r0,#0]  ; dg_sta
0004ac  4284              CMP      r4,r0
0004ae  d010              BEQ      |L10.1234|
;;;847                        {
;;;848                            dg_sta_c = dg_sta;
0004b0  48e4              LDR      r0,|L10.2116|
0004b2  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;849                            SetTextValue(0,26,"待机");
0004b4  f2af0218          ADR      r2,|L10.1184|
0004b8  211a              MOVS     r1,#0x1a
0004ba  2000              MOVS     r0,#0
0004bc  f7fffffe          BL       SetTextValue
;;;850    
;;;851                            if (dev_sta == DEV_ERR) //设备故障
0004c0  48e1              LDR      r0,|L10.2120|
0004c2  7800              LDRB     r0,[r0,#0]  ; dev_sta
0004c4  2802              CMP      r0,#2
0004c6  d104              BNE      |L10.1234|
;;;852                            {
;;;853                                SetTextValue(0,26,"零位传感器故障");
0004c8  a2e0              ADR      r2,|L10.2124|
0004ca  211a              MOVS     r1,#0x1a
0004cc  2000              MOVS     r0,#0
0004ce  f7fffffe          BL       SetTextValue
                  |L10.1234|
;;;854                            }
;;;855                        }
;;;856                        
;;;857                        if( Tmy.Motor.state != MOTOR_STOP ) //步进电机在运行
0004d2  48e2              LDR      r0,|L10.2140|
0004d4  7800              LDRB     r0,[r0,#0]  ; Tmy
0004d6  b120              CBZ      r0,|L10.1250|
;;;858                        {
;;;859                            MOTOR_Stop();//步进电机停止
0004d8  f7fffffe          BL       MOTOR_Stop
;;;860                            //MOTOR_SetDir( UP );//方向上升
;;;861                            Tmy.Motor.state = MOTOR_STOP;//更改步进电机状态
0004dc  2000              MOVS     r0,#0
0004de  49df              LDR      r1,|L10.2140|
0004e0  7008              STRB     r0,[r1,#0]
                  |L10.1250|
;;;862                            //MOTOR_ClrStep( ); //步数清零
;;;863                        }
;;;864                        
;;;865                        if (dev_sta == DEV_ERR) //设备故障
0004e2  48d9              LDR      r0,|L10.2120|
0004e4  7800              LDRB     r0,[r0,#0]  ; dev_sta
0004e6  2802              CMP      r0,#2
0004e8  d100              BNE      |L10.1260|
;;;866                        {
;;;867                            //操作
;;;868                            break;
0004ea  e1a7              B        |L10.2108|
                  |L10.1260|
;;;869                        }else
;;;870                        if( key_v == PEDAL_DOWN )//检测到脚踏按下
0004ec  2e19              CMP      r6,#0x19
0004ee  d105              BNE      |L10.1276|
;;;871                        {
;;;872                            //if( dev_sta == DEV_RUN )//设备运行状态
;;;873                            {
;;;874                                timer_pedal_down = 1; //开始脚踏按下计时
0004f0  2001              MOVS     r0,#1
0004f2  49db              LDR      r1,|L10.2144|
0004f4  7008              STRB     r0,[r1,#0]
;;;875                                dg_sta = DG_UP;//顶杆上升
0004f6  2006              MOVS     r0,#6
0004f8  49d2              LDR      r1,|L10.2116|
0004fa  7008              STRB     r0,[r1,#0]
                  |L10.1276|
;;;876                            }
;;;877                        }//else
;;;878        //                if( key_v == PEDAL_DOWN )//检测复位键按下
;;;879        //                {
;;;880        //                    if( )//设备运行状态
;;;881        //                    {
;;;882        //                        dg_sta = DG_RESET_DOWN;//复位下降
;;;883        //                    }
;;;884        //                    ;
;;;885        //                }
;;;886                        break;
0004fc  e19e              B        |L10.2108|
                  |L10.1278|
;;;887                        
;;;888                    case DG_ZDPK_UP : //自动排空
;;;889                        
;;;890                        if( dg_sta_c != dg_sta )
0004fe  48d1              LDR      r0,|L10.2116|
000500  7800              LDRB     r0,[r0,#0]  ; dg_sta
000502  4284              CMP      r4,r0
000504  d006              BEQ      |L10.1300|
;;;891                        {
;;;892                            dg_sta_c = dg_sta;
000506  48cf              LDR      r0,|L10.2116|
000508  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;893                            SetTextValue(0,26,"自动排空...");
00050a  a2d6              ADR      r2,|L10.2148|
00050c  211a              MOVS     r1,#0x1a
00050e  2000              MOVS     r0,#0
000510  f7fffffe          BL       SetTextValue
                  |L10.1300|
;;;894                        }
;;;895                        
;;;896                        if( Motor.counter_step > STEP_MAX_ZDPK ) //到达自动排空步数
000514  48d6              LDR      r0,|L10.2160|
000516  6840              LDR      r0,[r0,#4]  ; Motor
000518  f6487189          MOV      r1,#0x8f89
00051c  4288              CMP      r0,r1
00051e  d902              BLS      |L10.1318|
;;;897                        {
;;;898                            dg_sta = DG_STOP;//电机停止
000520  2000              MOVS     r0,#0
000522  49c8              LDR      r1,|L10.2116|
000524  7008              STRB     r0,[r1,#0]
                  |L10.1318|
;;;899                        }
;;;900                        
;;;901                        if( Tmy.Motor.state != MOTOR_UP ) //步进电机不是在上升
000526  48cd              LDR      r0,|L10.2140|
000528  7800              LDRB     r0,[r0,#0]  ; Tmy
00052a  2801              CMP      r0,#1
00052c  d00a              BEQ      |L10.1348|
;;;902                        {
;;;903                            MOTOR_Stop();//步进电机停止
00052e  f7fffffe          BL       MOTOR_Stop
;;;904                            MOTOR_SetDir( UP );//方向上升
000532  2000              MOVS     r0,#0
000534  f7fffffe          BL       MOTOR_SetDir
;;;905                            MOTOR_SetSpeed( CYCLE_ZDPK ); //设置电机速
000538  2086              MOVS     r0,#0x86
00053a  f7fffffe          BL       MOTOR_SetSpeed
;;;906                            Tmy.Motor.state = MOTOR_UP;//更改步进电机状态
00053e  2001              MOVS     r0,#1
000540  49c6              LDR      r1,|L10.2140|
000542  7008              STRB     r0,[r1,#0]
                  |L10.1348|
;;;907                        }else //步进电机在上升
;;;908                        {
;;;909                            ;
;;;910                        }
;;;911                        
;;;912                        break;
000544  e17a              B        |L10.2108|
                  |L10.1350|
;;;913                    
;;;914                    case DG_ECPK_UP : //二次排空
;;;915                         if( dg_sta_c != dg_sta )
000546  48bf              LDR      r0,|L10.2116|
000548  7800              LDRB     r0,[r0,#0]  ; dg_sta
00054a  4284              CMP      r4,r0
00054c  d006              BEQ      |L10.1372|
;;;916                        {
;;;917                            dg_sta_c = dg_sta;
00054e  48bd              LDR      r0,|L10.2116|
000550  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;918                            SetTextValue(0,26,"二次排空...");
000552  a2c8              ADR      r2,|L10.2164|
000554  211a              MOVS     r1,#0x1a
000556  2000              MOVS     r0,#0
000558  f7fffffe          BL       SetTextValue
                  |L10.1372|
;;;919                        }
;;;920                        
;;;921                        if( Motor.counter_step > STEP_MAX_ECPK ) //到达自动排空步数
00055c  48c4              LDR      r0,|L10.2160|
00055e  6840              LDR      r0,[r0,#4]  ; Motor
000560  f5b05f4d          CMP      r0,#0x3340
000564  d902              BLS      |L10.1388|
;;;922                        {
;;;923                            dg_sta = DG_STOP;//电机停止
000566  2000              MOVS     r0,#0
000568  49b6              LDR      r1,|L10.2116|
00056a  7008              STRB     r0,[r1,#0]
                  |L10.1388|
;;;924                        }
;;;925                        
;;;926                        if( Tmy.Motor.state != MOTOR_UP ) //步进电机不是在上升
00056c  48bb              LDR      r0,|L10.2140|
00056e  7800              LDRB     r0,[r0,#0]  ; Tmy
000570  2801              CMP      r0,#1
000572  d00a              BEQ      |L10.1418|
;;;927                        {
;;;928                            MOTOR_Stop();//步进电机停止
000574  f7fffffe          BL       MOTOR_Stop
;;;929                            MOTOR_SetDir( UP );//方向上升
000578  2000              MOVS     r0,#0
00057a  f7fffffe          BL       MOTOR_SetDir
;;;930                            MOTOR_SetSpeed( CYCLE_ZDPK ); //设置电机速度 XXX
00057e  2086              MOVS     r0,#0x86
000580  f7fffffe          BL       MOTOR_SetSpeed
;;;931                            Tmy.Motor.state = MOTOR_UP;//更改步进电机状态
000584  2001              MOVS     r0,#1
000586  49b5              LDR      r1,|L10.2140|
000588  7008              STRB     r0,[r1,#0]
                  |L10.1418|
;;;932                        }else //步进电机在上升
;;;933                        {
;;;934                            ;
;;;935                        }
;;;936                        
;;;937                        break;
00058a  e157              B        |L10.2108|
                  |L10.1420|
;;;938                        
;;;939                    case DG_UP : //顶杆上升
;;;940                        
;;;941                        if( dg_sta_c != dg_sta )
00058c  48ad              LDR      r0,|L10.2116|
00058e  7800              LDRB     r0,[r0,#0]  ; dg_sta
000590  4284              CMP      r4,r0
000592  d006              BEQ      |L10.1442|
;;;942                        {
;;;943                            dg_sta_c = dg_sta;
000594  48ab              LDR      r0,|L10.2116|
000596  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;944                            SetTextValue(0,26,"顶杆上升...");
000598  a2b9              ADR      r2,|L10.2176|
00059a  211a              MOVS     r1,#0x1a
00059c  2000              MOVS     r0,#0
00059e  f7fffffe          BL       SetTextValue
                  |L10.1442|
;;;945                        }
;;;946                        
;;;947                        if( ( Motor.counter_step >= Motor.max_step ) //到达顶部
0005a2  48b3              LDR      r0,|L10.2160|
0005a4  6840              LDR      r0,[r0,#4]  ; Motor
0005a6  49b2              LDR      r1,|L10.2160|
0005a8  6889              LDR      r1,[r1,#8]  ; Motor
0005aa  4288              CMP      r0,r1
0005ac  d204              BCS      |L10.1464|
;;;948                         || ( Tmy.Sensor.bit.top ) )
0005ae  48ab              LDR      r0,|L10.2140|
0005b0  7a00              LDRB     r0,[r0,#8]  ; Tmy
0005b2  f3c00040          UBFX     r0,r0,#1,#1
0005b6  b128              CBZ      r0,|L10.1476|
                  |L10.1464|
;;;949                        {
;;;950                            MOTOR_Stop();//这个是冗余操作，多一次保护
0005b8  f7fffffe          BL       MOTOR_Stop
;;;951                            dg_sta = DG_STOP_TOP;//停留在顶部
0005bc  2004              MOVS     r0,#4
0005be  49a1              LDR      r1,|L10.2116|
0005c0  7008              STRB     r0,[r1,#0]
0005c2  e02e              B        |L10.1570|
                  |L10.1476|
;;;952                        }else
;;;953                        {
;;;954                            if( Tmy.Motor.state != MOTOR_UP ) //步进电机未上升
0005c4  48a5              LDR      r0,|L10.2140|
0005c6  7800              LDRB     r0,[r0,#0]  ; Tmy
0005c8  2801              CMP      r0,#1
0005ca  d02a              BEQ      |L10.1570|
;;;955                            {
;;;956                                Motor.speed = 1;
0005cc  2001              MOVS     r0,#1
0005ce  49a8              LDR      r1,|L10.2160|
0005d0  7008              STRB     r0,[r1,#0]
;;;957                                tem8 = MOTOR_SPEED_INDEX[Motor.gear][Motor.speed-1];
0005d2  4608              MOV      r0,r1
0005d4  7840              LDRB     r0,[r0,#1]  ; Motor
0005d6  eb000040          ADD      r0,r0,r0,LSL #1
0005da  49ac              LDR      r1,|L10.2188|
0005dc  eb010140          ADD      r1,r1,r0,LSL #1
0005e0  48a3              LDR      r0,|L10.2160|
0005e2  7800              LDRB     r0,[r0,#0]  ; Motor
0005e4  1e40              SUBS     r0,r0,#1
0005e6  f8115010          LDRB     r5,[r1,r0,LSL #1]
;;;958                	            Tmy.speed = tem8;
0005ea  489c              LDR      r0,|L10.2140|
0005ec  7105              STRB     r5,[r0,#4]
;;;959                	             
;;;960                	            MOTOR_SetSpeed( MOTOR_SPEED_CYCLE[tem8] ); //设置电机速度
0005ee  49a8              LDR      r1,|L10.2192|
0005f0  f8310015          LDRH     r0,[r1,r5,LSL #1]
0005f4  f7fffffe          BL       MOTOR_SetSpeed
;;;961                	            SetTextValue(0, 16, &MOTOR_SPEED_DISPLAY[tem8][0]); 
0005f8  eb0500c5          ADD      r0,r5,r5,LSL #3
0005fc  49a5              LDR      r1,|L10.2196|
0005fe  1842              ADDS     r2,r0,r1
000600  2110              MOVS     r1,#0x10
000602  2000              MOVS     r0,#0
000604  f7fffffe          BL       SetTextValue
;;;962            	            
;;;963                                MOTOR_Stop(); //电机暂停
000608  f7fffffe          BL       MOTOR_Stop
;;;964                                MOTOR_SetDir( UP ); //设置电机方向
00060c  2000              MOVS     r0,#0
00060e  f7fffffe          BL       MOTOR_SetDir
;;;965                                MOTOR_SetSpeed( MOTOR_SPEED_CYCLE[tem8] ); //设置电机速度，运行
000612  499f              LDR      r1,|L10.2192|
000614  f8310015          LDRH     r0,[r1,r5,LSL #1]
000618  f7fffffe          BL       MOTOR_SetSpeed
;;;966                                
;;;967                                //SetTextValue(0,18,"顶杆检查上升"); //更新提示
;;;968                            
;;;969                                Tmy.Motor.state = MOTOR_UP;//
00061c  2001              MOVS     r0,#1
00061e  498f              LDR      r1,|L10.2140|
000620  7008              STRB     r0,[r1,#0]
                  |L10.1570|
;;;970                            }
;;;971                        }
;;;972                        
;;;973        //                if( Tmy.Motor.state != MOTOR_UP ) //步进电机不是在上升
;;;974        //                {
;;;975        //                    MOTOR_Stop();//步进电机停止
;;;976        //                    MOTOR_SetDir( UP );//方向上升
;;;977        //                    MOTOR_SetSpeed( CYCLE_KSJ ); //设置电机速度 XXX
;;;978        //                    Tmy.Motor.state = MOTOR_UP;//更改步进电机状态
;;;979        //                }else //步进电机在上升
;;;980        //                {
;;;981        //                    if( key_v == PEDAL_UP )//检测到脚踏抬起
;;;982        //                    {
;;;983        //                        dg_sta = DG_STOP;//停止
;;;984        //                    }
;;;985        //                }
;;;986                        
;;;987                        break;
000622  e10b              B        |L10.2108|
                  |L10.1572|
;;;988                    
;;;989                    case DG_STOP_TOP : //停留在顶部
;;;990                        
;;;991                        if( dg_sta_c != dg_sta )
000624  4887              LDR      r0,|L10.2116|
000626  7800              LDRB     r0,[r0,#0]  ; dg_sta
000628  4284              CMP      r4,r0
00062a  d006              BEQ      |L10.1594|
;;;992                        {
;;;993                            dg_sta_c = dg_sta;
00062c  4885              LDR      r0,|L10.2116|
00062e  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;994                            SetTextValue(0,26,"到顶停机待机");
000630  a299              ADR      r2,|L10.2200|
000632  211a              MOVS     r1,#0x1a
000634  2000              MOVS     r0,#0
000636  f7fffffe          BL       SetTextValue
                  |L10.1594|
;;;995                        }
;;;996                        
;;;997                        if( Tmy.Motor.state != MOTOR_STOP ) //步进电机在运行
00063a  4888              LDR      r0,|L10.2140|
00063c  7800              LDRB     r0,[r0,#0]  ; Tmy
00063e  b138              CBZ      r0,|L10.1616|
;;;998                        {
;;;999                            MOTOR_Stop();//电机暂停
000640  f7fffffe          BL       MOTOR_Stop
;;;1000                           MOTOR_SetDir( DOWN ); //方向下降
000644  2001              MOVS     r0,#1
000646  f7fffffe          BL       MOTOR_SetDir
;;;1001                           Tmy.Motor.state = MOTOR_STOP;//更改电机状态
00064a  2000              MOVS     r0,#0
00064c  4983              LDR      r1,|L10.2140|
00064e  7008              STRB     r0,[r1,#0]
                  |L10.1616|
;;;1002                       }
;;;1003                       
;;;1004                       if( key_v == PEDAL_DOWN ) //检测到踩脚踏 // || ( key_v == PEDAL_DOWN ) ) //或 按复位键
000650  2e19              CMP      r6,#0x19
000652  d108              BNE      |L10.1638|
;;;1005                       {
;;;1006                           //if( dev_sta == DEV_RUN )//设备运行状态
;;;1007                           {
;;;1008                               SetTextValue(0,26,"顶杆归零...");
000654  f2af12e0          ADR      r2,|L10.1144|
000658  211a              MOVS     r1,#0x1a
00065a  2000              MOVS     r0,#0
00065c  f7fffffe          BL       SetTextValue
;;;1009                               dg_sta = DG_FIX_DOWN;//顶杆归零
000660  200f              MOVS     r0,#0xf
000662  4978              LDR      r1,|L10.2116|
000664  7008              STRB     r0,[r1,#0]
                  |L10.1638|
;;;1010                           }
;;;1011                       }
;;;1012                       
;;;1013       				//if( 1 )//在xxx速度下，到顶后自动归零
;;;1014       				if( ( Tmy.speed == NORMAL )   //中速
000666  487d              LDR      r0,|L10.2140|
000668  7900              LDRB     r0,[r0,#4]  ; Tmy
00066a  2802              CMP      r0,#2
00066c  d003              BEQ      |L10.1654|
;;;1015       			     || ( Tmy.speed == FAST    ) ) //FAST
00066e  487b              LDR      r0,|L10.2140|
000670  7900              LDRB     r0,[r0,#4]  ; Tmy
000672  2803              CMP      r0,#3
000674  d108              BNE      |L10.1672|
                  |L10.1654|
;;;1016       				{
;;;1017       					SetTextValue(0,26,"顶杆归零...");
000676  f2af2200          ADR      r2,|L10.1144|
00067a  211a              MOVS     r1,#0x1a
00067c  2000              MOVS     r0,#0
00067e  f7fffffe          BL       SetTextValue
;;;1018                           dg_sta = DG_FIX_DOWN;//顶杆归零
000682  200f              MOVS     r0,#0xf
000684  496f              LDR      r1,|L10.2116|
000686  7008              STRB     r0,[r1,#0]
                  |L10.1672|
;;;1019       				}
;;;1020       				
;;;1021                       break;
000688  e0d8              B        |L10.2108|
                  |L10.1674|
;;;1022                       
;;;1023                   case DG_DOWN : //顶杆下降 可能没有此状态！！！
;;;1024                       
;;;1025                       if( dg_sta_c != dg_sta )
00068a  486e              LDR      r0,|L10.2116|
00068c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00068e  4284              CMP      r4,r0
000690  d006              BEQ      |L10.1696|
;;;1026                       {
;;;1027                           dg_sta_c = dg_sta;
000692  486c              LDR      r0,|L10.2116|
000694  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;1028                           SetTextValue(0,26,"顶杆下降...");
000696  a284              ADR      r2,|L10.2216|
000698  211a              MOVS     r1,#0x1a
00069a  2000              MOVS     r0,#0
00069c  f7fffffe          BL       SetTextValue
                  |L10.1696|
;;;1029                       }
;;;1030                       
;;;1031                       if(Tmy.Sensor.bit.bottom) //到达底部
0006a0  486e              LDR      r0,|L10.2140|
0006a2  7a00              LDRB     r0,[r0,#8]  ; Tmy
0006a4  f0000001          AND      r0,r0,#1
0006a8  b110              CBZ      r0,|L10.1712|
;;;1032                       {
;;;1033                           dg_sta = DG_STOP_TOP;//停留在底部
0006aa  2004              MOVS     r0,#4
0006ac  4965              LDR      r1,|L10.2116|
0006ae  7008              STRB     r0,[r1,#0]
                  |L10.1712|
;;;1034                       }
;;;1035                       
;;;1036                       if( Tmy.Motor.state != MOTOR_DOWN ) //步进电机不是在下降
0006b0  486a              LDR      r0,|L10.2140|
0006b2  7800              LDRB     r0,[r0,#0]  ; Tmy
0006b4  2802              CMP      r0,#2
0006b6  d00b              BEQ      |L10.1744|
;;;1037                       {
;;;1038                           MOTOR_Stop();//步进电机停止
0006b8  f7fffffe          BL       MOTOR_Stop
;;;1039                           MOTOR_SetDir( DOWN );//方向上升
0006bc  2001              MOVS     r0,#1
0006be  f7fffffe          BL       MOTOR_SetDir
;;;1040                           MOTOR_SetSpeed( CYCLE_DGJC ); //设置电机速度 XXX
0006c2  2026              MOVS     r0,#0x26
0006c4  f7fffffe          BL       MOTOR_SetSpeed
;;;1041                           Tmy.Motor.state = MOTOR_DOWN;//更改步进电机状态
0006c8  2002              MOVS     r0,#2
0006ca  4964              LDR      r1,|L10.2140|
0006cc  7008              STRB     r0,[r1,#0]
0006ce  e004              B        |L10.1754|
                  |L10.1744|
;;;1042                       }else //步进电机在下降
;;;1043                       {
;;;1044                           if( key_v == PEDAL_UP )//检测到脚踏抬起
0006d0  2e1a              CMP      r6,#0x1a
0006d2  d102              BNE      |L10.1754|
;;;1045                           {
;;;1046                               dg_sta = DG_STOP;//停止
0006d4  2000              MOVS     r0,#0
0006d6  495b              LDR      r1,|L10.2116|
0006d8  7008              STRB     r0,[r1,#0]
                  |L10.1754|
;;;1047                           }
;;;1048                       }
;;;1049                       break;
0006da  e0af              B        |L10.2108|
                  |L10.1756|
;;;1050                       
;;;1051                   case DG_HX_DOWN : //回吸下降
;;;1052       			
;;;1053                       if( dg_sta_c != dg_sta )
0006dc  4859              LDR      r0,|L10.2116|
0006de  7800              LDRB     r0,[r0,#0]  ; dg_sta
0006e0  4284              CMP      r4,r0
0006e2  d006              BEQ      |L10.1778|
;;;1054                       {
;;;1055                           dg_sta_c = dg_sta;
0006e4  4857              LDR      r0,|L10.2116|
0006e6  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;1056                           SetTextValue(0,26,"回吸下降...");
0006e8  a272              ADR      r2,|L10.2228|
0006ea  211a              MOVS     r1,#0x1a
0006ec  2000              MOVS     r0,#0
0006ee  f7fffffe          BL       SetTextValue
                  |L10.1778|
;;;1057                       }
;;;1058                       
;;;1059                       if( ( Motor.counter_step <= Motor.counter_hx_step )//到达回吸底部
0006f2  485f              LDR      r0,|L10.2160|
0006f4  6840              LDR      r0,[r0,#4]  ; Motor
0006f6  495e              LDR      r1,|L10.2160|
0006f8  68c9              LDR      r1,[r1,#0xc]  ; Motor
0006fa  4288              CMP      r0,r1
0006fc  d902              BLS      |L10.1796|
;;;1060       								  ||( Motor.counter_step == 0 ) )//触底,此处对触情况底做了限制
0006fe  485c              LDR      r0,|L10.2160|
000700  6840              LDR      r0,[r0,#4]  ; Motor
000702  b988              CBNZ     r0,|L10.1832|
                  |L10.1796|
;;;1061                       {
;;;1062                           MOTOR_Stop();//电机停止
000704  f7fffffe          BL       MOTOR_Stop
;;;1063                           Motor.counter_hx_step = Motor.counter_hx_step_up;//Motor.counter_step + Motor.max_hx_step;
000708  4859              LDR      r0,|L10.2160|
00070a  6940              LDR      r0,[r0,#0x14]  ; Motor
00070c  4958              LDR      r1,|L10.2160|
00070e  60c8              STR      r0,[r1,#0xc]  ; Motor
;;;1064                           
;;;1065                           if( Tmy.speed == SLOW )   //常慢速
000710  4852              LDR      r0,|L10.2140|
000712  7900              LDRB     r0,[r0,#4]  ; Tmy
000714  2801              CMP      r0,#1
000716  d103              BNE      |L10.1824|
;;;1066                           {
;;;1067                               vTaskDelay(pdMS_TO_TICKS(1000));//延时1秒
000718  f44f707a          MOV      r0,#0x3e8
00071c  f7fffffe          BL       vTaskDelay
                  |L10.1824|
;;;1068                           }
;;;1069                           dg_sta = DG_HX_UP;//
000720  200a              MOVS     r0,#0xa
000722  4948              LDR      r1,|L10.2116|
000724  7008              STRB     r0,[r1,#0]
000726  e013              B        |L10.1872|
                  |L10.1832|
;;;1070                       }else
;;;1071                       {
;;;1072                           if( Tmy.Motor.state != MOTOR_DOWN ) //步进电机未下降
000728  484c              LDR      r0,|L10.2140|
00072a  7800              LDRB     r0,[r0,#0]  ; Tmy
00072c  2802              CMP      r0,#2
00072e  d00f              BEQ      |L10.1872|
;;;1073                           {
;;;1074                               MOTOR_Stop(); //电机暂停
000730  f7fffffe          BL       MOTOR_Stop
;;;1075                               MOTOR_SetDir( DOWN ); //设置电机方向
000734  2001              MOVS     r0,#1
000736  f7fffffe          BL       MOTOR_SetDir
;;;1076                               MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度，运行
00073a  2086              MOVS     r0,#0x86
00073c  f7fffffe          BL       MOTOR_SetSpeed
;;;1077                               SetTextValue(0,18,"回吸下降"); //更新提示
000740  a25f              ADR      r2,|L10.2240|
000742  2112              MOVS     r1,#0x12
000744  2000              MOVS     r0,#0
000746  f7fffffe          BL       SetTextValue
;;;1078                               Tmy.Motor.state = MOTOR_DOWN;//
00074a  2002              MOVS     r0,#2
00074c  4943              LDR      r1,|L10.2140|
00074e  7008              STRB     r0,[r1,#0]
                  |L10.1872|
;;;1079                           }
;;;1080                       }
;;;1081                       
;;;1082       //	            if( Motor.counter_step > Motor.counter_hx_step ) //
;;;1083       //	            {
;;;1084       //	                ;//行进中
;;;1085       //	            }else //到达回吸底部
;;;1086       //	            {
;;;1087       //	                MOTOR_Stop();
;;;1088       //	                dg_sta = DG_HX_UP;//
;;;1089       //                    Motor.counter_hx_step = Motor.counter_step + Motor.max_hx_step;
;;;1090       //                    MOTOR_SetDir( UP );
;;;1091       //	                MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度
;;;1092       //                    SetTextValue(0,18,"回吸上升");
;;;1093       //                    if( Tmy.speed == SLOW )   //常慢速
;;;1094       //                    {
;;;1095       //                        vTaskDelay(pdMS_TO_TICKS(1000));//延时1秒
;;;1096       //                    }
;;;1097       //	            }
;;;1098       	            
;;;1099       	            break;
000750  e074              B        |L10.2108|
                  |L10.1874|
;;;1100       	            
;;;1101       	        case DG_HX_UP : //回吸上升
;;;1102       	            
;;;1103       	            if( dg_sta_c != dg_sta )
000752  483c              LDR      r0,|L10.2116|
000754  7800              LDRB     r0,[r0,#0]  ; dg_sta
000756  4284              CMP      r4,r0
000758  d006              BEQ      |L10.1896|
;;;1104                       {
;;;1105                           dg_sta_c = dg_sta;
00075a  483a              LDR      r0,|L10.2116|
00075c  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;1106                           SetTextValue(0,26,"回吸上升...");
00075e  a25b              ADR      r2,|L10.2252|
000760  211a              MOVS     r1,#0x1a
000762  2000              MOVS     r0,#0
000764  f7fffffe          BL       SetTextValue
                  |L10.1896|
;;;1107                       }
;;;1108                       
;;;1109                       if( Motor.counter_step > Motor.counter_hx_step-1 )//到达回吸顶部
000768  4841              LDR      r0,|L10.2160|
00076a  6841              LDR      r1,[r0,#4]  ; Motor
00076c  68c0              LDR      r0,[r0,#0xc]  ; Motor
00076e  1e40              SUBS     r0,r0,#1
000770  4281              CMP      r1,r0
000772  d905              BLS      |L10.1920|
;;;1110                       {
;;;1111                           MOTOR_Stop(); //电机停止
000774  f7fffffe          BL       MOTOR_Stop
;;;1112                           //Tmy.state.bit.hx = 0;
;;;1113                           dg_sta = DG_STOP; //
000778  2000              MOVS     r0,#0
00077a  4932              LDR      r1,|L10.2116|
00077c  7008              STRB     r0,[r1,#0]
00077e  e013              B        |L10.1960|
                  |L10.1920|
;;;1114                       }else
;;;1115                       {
;;;1116                           if( Tmy.Motor.state != MOTOR_UP ) //步进电机未下降
000780  4836              LDR      r0,|L10.2140|
000782  7800              LDRB     r0,[r0,#0]  ; Tmy
000784  2801              CMP      r0,#1
000786  d00f              BEQ      |L10.1960|
;;;1117                           {
;;;1118                               MOTOR_Stop(); //电机暂停
000788  f7fffffe          BL       MOTOR_Stop
;;;1119                               MOTOR_SetDir( UP ); //设置电机方向
00078c  2000              MOVS     r0,#0
00078e  f7fffffe          BL       MOTOR_SetDir
;;;1120                               MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度，运行
000792  2086              MOVS     r0,#0x86
000794  f7fffffe          BL       MOTOR_SetSpeed
;;;1121                               SetTextValue(0,18,"回吸上升"); //更新提示
000798  a24f              ADR      r2,|L10.2264|
00079a  2112              MOVS     r1,#0x12
00079c  2000              MOVS     r0,#0
00079e  f7fffffe          BL       SetTextValue
;;;1122                               Tmy.Motor.state = MOTOR_UP;//
0007a2  2001              MOVS     r0,#1
0007a4  492d              LDR      r1,|L10.2140|
0007a6  7008              STRB     r0,[r1,#0]
                  |L10.1960|
;;;1123                           }
;;;1124                       }
;;;1125                       
;;;1126       //	            if( Motor.counter_step < Motor.counter_hx_step ) 
;;;1127       //	            {
;;;1128       //	                ;//行进中
;;;1129       //	            }else //到达回吸顶部
;;;1130       //	            {
;;;1131       //	                MOTOR_Stop();
;;;1132       //	                Tmy.state.bit.hx = 0;
;;;1133       //	                Tmy.work_state = STA_STANDBY;
;;;1134       //	            }
;;;1135       	            
;;;1136       	            break;
0007a8  e048              B        |L10.2108|
                  |L10.1962|
;;;1137       	            
;;;1138                   case DG_FIX_UP : //顶杆检查上升
;;;1139                       
;;;1140                       if( ( Motor.counter_step >= Motor.max_step ) //到达顶部
0007aa  4831              LDR      r0,|L10.2160|
0007ac  6840              LDR      r0,[r0,#4]  ; Motor
0007ae  4930              LDR      r1,|L10.2160|
0007b0  6889              LDR      r1,[r1,#8]  ; Motor
0007b2  4288              CMP      r0,r1
0007b4  d204              BCS      |L10.1984|
;;;1141                        || ( Tmy.Sensor.bit.top ) )
0007b6  4829              LDR      r0,|L10.2140|
0007b8  7a00              LDRB     r0,[r0,#8]  ; Tmy
0007ba  f3c00040          UBFX     r0,r0,#1,#1
0007be  b128              CBZ      r0,|L10.1996|
                  |L10.1984|
;;;1142                       {
;;;1143                           MOTOR_Stop();//这个是冗余操作，多一次保护
0007c0  f7fffffe          BL       MOTOR_Stop
;;;1144                           dg_sta = DG_STOP_TOP;//停留在顶部
0007c4  2004              MOVS     r0,#4
0007c6  491f              LDR      r1,|L10.2116|
0007c8  7008              STRB     r0,[r1,#0]
0007ca  e013              B        |L10.2036|
                  |L10.1996|
;;;1145                       }else
;;;1146                       {
;;;1147                           if( Tmy.Motor.state != MOTOR_UP ) //步进电机未上升
0007cc  4823              LDR      r0,|L10.2140|
0007ce  7800              LDRB     r0,[r0,#0]  ; Tmy
0007d0  2801              CMP      r0,#1
0007d2  d00f              BEQ      |L10.2036|
;;;1148                           {
;;;1149                               MOTOR_Stop(); //电机暂停
0007d4  f7fffffe          BL       MOTOR_Stop
;;;1150                               MOTOR_SetDir( UP ); //设置电机方向
0007d8  2000              MOVS     r0,#0
0007da  f7fffffe          BL       MOTOR_SetDir
;;;1151                               MOTOR_SetSpeed( CYCLE_DGJC ); //设置电机速度，运行
0007de  2026              MOVS     r0,#0x26
0007e0  f7fffffe          BL       MOTOR_SetSpeed
;;;1152                               SetTextValue(2,26,"顶杆检查上升"); //更新提示
0007e4  a23f              ADR      r2,|L10.2276|
0007e6  211a              MOVS     r1,#0x1a
0007e8  2002              MOVS     r0,#2
0007ea  f7fffffe          BL       SetTextValue
;;;1153                           
;;;1154                               Tmy.Motor.state = MOTOR_UP;//
0007ee  2001              MOVS     r0,#1
0007f0  491a              LDR      r1,|L10.2140|
0007f2  7008              STRB     r0,[r1,#0]
                  |L10.2036|
;;;1155                           }
;;;1156                       }
;;;1157                       
;;;1158                       break;
0007f4  e022              B        |L10.2108|
                  |L10.2038|
;;;1159                       
;;;1160                   case DG_FIX_DOWN : //顶杆检查下降
;;;1161                       
;;;1162                       if( Tmy.Sensor.bit.bottom )//检测到底
0007f6  4819              LDR      r0,|L10.2140|
0007f8  7a00              LDRB     r0,[r0,#8]  ; Tmy
0007fa  f0000001          AND      r0,r0,#1
0007fe  b128              CBZ      r0,|L10.2060|
;;;1163                       {
;;;1164                           MOTOR_Stop();//这个是冗余操作，多一次保护
000800  f7fffffe          BL       MOTOR_Stop
;;;1165                           dg_sta = DG_STOP_BOT;//
000804  2005              MOVS     r0,#5
000806  490f              LDR      r1,|L10.2116|
000808  7008              STRB     r0,[r1,#0]
00080a  e015              B        |L10.2104|
                  |L10.2060|
;;;1166                       }else
;;;1167                       {
;;;1168                           if( Tmy.Motor.state != MOTOR_DOWN ) //步进电机未下降
00080c  4813              LDR      r0,|L10.2140|
00080e  7800              LDRB     r0,[r0,#0]  ; Tmy
000810  2802              CMP      r0,#2
000812  d011              BEQ      |L10.2104|
;;;1169                           {
;;;1170                               MOTOR_Stop(); //电机暂停
000814  f7fffffe          BL       MOTOR_Stop
;;;1171                               MOTOR_SetDir( DOWN ); //设置电机方向
000818  2001              MOVS     r0,#1
00081a  f7fffffe          BL       MOTOR_SetDir
;;;1172                               MOTOR_SetSpeed( CYCLE_DGJC ); //设置电机速度，运行
00081e  2026              MOVS     r0,#0x26
000820  f7fffffe          BL       MOTOR_SetSpeed
;;;1173                               SetTextValue(2,26,"顶杆检查下降"); //更新提示
000824  a233              ADR      r2,|L10.2292|
000826  211a              MOVS     r1,#0x1a
000828  2002              MOVS     r0,#2
00082a  f7fffffe          BL       SetTextValue
;;;1174                           
;;;1175                               Tmy.Motor.state = MOTOR_DOWN;//
00082e  2002              MOVS     r0,#2
000830  490a              LDR      r1,|L10.2140|
000832  e000              B        |L10.2102|
                  |L10.2100|
000834  e004              B        |L10.2112|
                  |L10.2102|
000836  7008              STRB     r0,[r1,#0]
                  |L10.2104|
;;;1176                           }
;;;1177                       }
;;;1178                       
;;;1179                       break;
000838  e000              B        |L10.2108|
                  |L10.2106|
;;;1180                   
;;;1181                   default : 
;;;1182                       break;
00083a  bf00              NOP      
                  |L10.2108|
00083c  bf00              NOP                            ;695
00083e  bf00              NOP                            ;517
                  |L10.2112|
000840  f7ffbbf9          B        |L10.54|
;;;1183               }
;;;1184           }
;;;1185       }
;;;1186   }
;;;1187   
                          ENDP

                  |L10.2116|
                          DCD      dg_sta
                  |L10.2120|
                          DCD      dev_sta
                  |L10.2124|
00084c  c1e3cebb          DCB      193,227,206,187,180,171,184,208,198,247,185,202,213,207,0
000850  b4abb8d0
000854  c6f7b9ca
000858  d5cf00  
00085b  00                DCB      0
                  |L10.2140|
                          DCD      Tmy
                  |L10.2144|
                          DCD      timer_pedal_down
                  |L10.2148|
000864  d7d4b6af          DCB      215,212,182,175,197,197,191,213,"...",0
000868  c5c5bfd5
00086c  2e2e2e00
                  |L10.2160|
                          DCD      Motor
                  |L10.2164|
000874  b6feb4ce          DCB      182,254,180,206,197,197,191,213,"...",0
000878  c5c5bfd5
00087c  2e2e2e00
                  |L10.2176|
000880  b6a5b8cb          DCB      182,165,184,203,201,207,201,253,"...",0
000884  c9cfc9fd
000888  2e2e2e00
                  |L10.2188|
                          DCD      MOTOR_SPEED_INDEX
                  |L10.2192|
                          DCD      MOTOR_SPEED_CYCLE
                  |L10.2196|
                          DCD      MOTOR_SPEED_DISPLAY
                  |L10.2200|
000898  b5bdb6a5          DCB      181,189,182,165,205,163,187,250,180,253,187,250,0
00089c  cda3bbfa
0008a0  b4fdbbfa
0008a4  00      
0008a5  00                DCB      0
0008a6  00                DCB      0
0008a7  00                DCB      0
                  |L10.2216|
0008a8  b6a5b8cb          DCB      182,165,184,203,207,194,189,181,"...",0
0008ac  cfc2bdb5
0008b0  2e2e2e00
                  |L10.2228|
0008b4  bbd8cefc          DCB      187,216,206,252,207,194,189,181,"...",0
0008b8  cfc2bdb5
0008bc  2e2e2e00
                  |L10.2240|
0008c0  bbd8cefc          DCB      187,216,206,252,207,194,189,181,0
0008c4  cfc2bdb5
0008c8  00      
0008c9  00                DCB      0
0008ca  00                DCB      0
0008cb  00                DCB      0
                  |L10.2252|
0008cc  bbd8cefc          DCB      187,216,206,252,201,207,201,253,"...",0
0008d0  c9cfc9fd
0008d4  2e2e2e00
                  |L10.2264|
0008d8  bbd8cefc          DCB      187,216,206,252,201,207,201,253,0
0008dc  c9cfc9fd
0008e0  00      
0008e1  00                DCB      0
0008e2  00                DCB      0
0008e3  00                DCB      0
                  |L10.2276|
0008e4  b6a5b8cb          DCB      182,165,184,203,188,236,178,233,201,207,201,253,0
0008e8  bcecb2e9
0008ec  c9cfc9fd
0008f0  00      
0008f1  00                DCB      0
0008f2  00                DCB      0
0008f3  00                DCB      0
                  |L10.2292|
0008f4  b6a5b8cb          DCB      182,165,184,203,188,236,178,233,207,194,189,181,0
0008f8  bcecb2e9
0008fc  cfc2bdb5
000900  00      
000901  00                DCB      0
000902  00                DCB      0
000903  00                DCB      0

                          AREA ||i.vTaskSensor||, CODE, READONLY, ALIGN=2

                  vTaskSensor PROC
;;;311    */
;;;312    static void vTaskSensor(void *pvParameters)
000000  2400              MOVS     r4,#0
;;;313    {
;;;314    	uint8_t tem8 = 0;
;;;315    	
;;;316    //    SoftWdtInit( vTaskSensor_ID, 10 );
;;;317        
;;;318        //timer_sensor = 4;
;;;319        while( 1 )
000002  e08d              B        |L11.288|
                  |L11.4|
;;;320        {
;;;321    //        SoftWdtFed( vTaskSensor_ID );
;;;322            
;;;323            //vTaskDelay( pdMS_TO_TICKS(1000) );//
;;;324            vTaskDelay( 20 );
000004  2014              MOVS     r0,#0x14
000006  f7fffffe          BL       vTaskDelay
;;;325            
;;;326            ADC1_GetV();
00000a  f7fffffe          BL       ADC1_GetV
;;;327            //Tmy.pressure = HX711_Read();
;;;328            
;;;329            //bsp_KeyScan();
;;;330            if( tem8 != Tmy.Sensor.bit.bottom )
00000e  4845              LDR      r0,|L11.292|
000010  7a00              LDRB     r0,[r0,#8]  ; Tmy
000012  f0000001          AND      r0,r0,#1
000016  42a0              CMP      r0,r4
000018  d013              BEQ      |L11.66|
;;;331            {
;;;332                tem8 = Tmy.Sensor.bit.bottom;
00001a  4842              LDR      r0,|L11.292|
00001c  7a00              LDRB     r0,[r0,#8]  ; Tmy
00001e  f0000401          AND      r4,r0,#1
;;;333                
;;;334                if( Tmy.Sensor.bit.bottom ) //触底检测
000022  4840              LDR      r0,|L11.292|
000024  7a00              LDRB     r0,[r0,#8]  ; Tmy
000026  f0000001          AND      r0,r0,#1
00002a  b128              CBZ      r0,|L11.56|
;;;335                {
;;;336                    SetTextValue(0,29,"已触底"); //已触底
00002c  a23e              ADR      r2,|L11.296|
00002e  211d              MOVS     r1,#0x1d
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       SetTextValue
000036  e004              B        |L11.66|
                  |L11.56|
;;;337                }else
;;;338                {
;;;339                    SetTextValue(0,29,"未触底"); //未触底
000038  a23d              ADR      r2,|L11.304|
00003a  211d              MOVS     r1,#0x1d
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       SetTextValue
                  |L11.66|
;;;340                }
;;;341            }
;;;342            
;;;343    		if( bsp_GetKeyState( KID_K1 ) ) //紧急制动按钮
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       bsp_GetKeyState
000048  b130              CBZ      r0,|L11.88|
;;;344            {
;;;345                Tmy.Key.jjzd = 0; //
00004a  4836              LDR      r0,|L11.292|
00004c  7980              LDRB     r0,[r0,#6]  ; Tmy
00004e  f0200040          BIC      r0,r0,#0x40
000052  4934              LDR      r1,|L11.292|
000054  7188              STRB     r0,[r1,#6]
000056  e006              B        |L11.102|
                  |L11.88|
;;;346            }else //按下
;;;347            {
;;;348                Tmy.Key.jjzd = 1; //
000058  4832              LDR      r0,|L11.292|
00005a  7980              LDRB     r0,[r0,#6]  ; Tmy
00005c  f0200040          BIC      r0,r0,#0x40
000060  3040              ADDS     r0,r0,#0x40
000062  4930              LDR      r1,|L11.292|
000064  7188              STRB     r0,[r1,#6]
                  |L11.102|
;;;349            }
;;;350    		
;;;351            if( bsp_GetKeyState( KID_ZERO ) ) //触底检测
000066  2009              MOVS     r0,#9
000068  f7fffffe          BL       bsp_GetKeyState
00006c  b130              CBZ      r0,|L11.124|
;;;352            {
;;;353                Tmy.Sensor.bit.bottom = 0; //未触底
00006e  482d              LDR      r0,|L11.292|
000070  7a00              LDRB     r0,[r0,#8]  ; Tmy
000072  f0200001          BIC      r0,r0,#1
000076  492b              LDR      r1,|L11.292|
000078  7208              STRB     r0,[r1,#8]
00007a  e006              B        |L11.138|
                  |L11.124|
;;;354            }else
;;;355            {
;;;356                Tmy.Sensor.bit.bottom = 1; //已触底
00007c  4829              LDR      r0,|L11.292|
00007e  7a00              LDRB     r0,[r0,#8]  ; Tmy
000080  f0200001          BIC      r0,r0,#1
000084  1c40              ADDS     r0,r0,#1
000086  4927              LDR      r1,|L11.292|
000088  7208              STRB     r0,[r1,#8]
                  |L11.138|
;;;357            }
;;;358            
;;;359            //if( Motor.counter_step > Motor.counter_hx_step-1 ) //触顶检测 //if( bsp_GetKeyState( KID_ZERO ) ) 
;;;360            if( Motor.counter_step >= Motor.max_step )//触顶检测
00008a  482b              LDR      r0,|L11.312|
00008c  6840              LDR      r0,[r0,#4]  ; Motor
00008e  492a              LDR      r1,|L11.312|
000090  6889              LDR      r1,[r1,#8]  ; Motor
000092  4288              CMP      r0,r1
000094  d307              BCC      |L11.166|
;;;361            {
;;;362                Tmy.Sensor.bit.top = 1; //已触顶
000096  4823              LDR      r0,|L11.292|
000098  7a00              LDRB     r0,[r0,#8]  ; Tmy
00009a  f0200002          BIC      r0,r0,#2
00009e  1c80              ADDS     r0,r0,#2
0000a0  4920              LDR      r1,|L11.292|
0000a2  7208              STRB     r0,[r1,#8]
0000a4  e005              B        |L11.178|
                  |L11.166|
;;;363            }else
;;;364            {
;;;365                Tmy.Sensor.bit.top = 0; //未触顶
0000a6  481f              LDR      r0,|L11.292|
0000a8  7a00              LDRB     r0,[r0,#8]  ; Tmy
0000aa  f0200002          BIC      r0,r0,#2
0000ae  491d              LDR      r1,|L11.292|
0000b0  7208              STRB     r0,[r1,#8]
                  |L11.178|
;;;366            }
;;;367            
;;;368    //        if( Tmy.State.bit.init ) //初始化完成
;;;369    //        {
;;;370    //            if( Motor.counter_step == 0 )//触低底检测
;;;371    //            {
;;;372    //                Tmy.Sensor.bit.bottom = 1; //已触底
;;;373    //            }else
;;;374    //            {
;;;375    //                Tmy.Sensor.bit.bottom = 0; //未触底
;;;376    //            }
;;;377    //        }
;;;378            
;;;379            if( bsp_GetKeyState( KID_SYRINGE ) ) //注射器类型
0000b2  200a              MOVS     r0,#0xa
0000b4  f7fffffe          BL       bsp_GetKeyState
0000b8  b138              CBZ      r0,|L11.202|
;;;380            {
;;;381                Tmy.Sensor.bit.SyringeType = SYRINGE_2ML2; //2.2ml
0000ba  481a              LDR      r0,|L11.292|
0000bc  7a00              LDRB     r0,[r0,#8]  ; Tmy
0000be  f0200004          BIC      r0,r0,#4
0000c2  1d00              ADDS     r0,r0,#4
0000c4  4917              LDR      r1,|L11.292|
0000c6  7208              STRB     r0,[r1,#8]
0000c8  e005              B        |L11.214|
                  |L11.202|
;;;382            }else
;;;383            {
;;;384                Tmy.Sensor.bit.SyringeType = SYRINGE_1ML8; //1.8ml
0000ca  4816              LDR      r0,|L11.292|
0000cc  7a00              LDRB     r0,[r0,#8]  ; Tmy
0000ce  f0200004          BIC      r0,r0,#4
0000d2  4914              LDR      r1,|L11.292|
0000d4  7208              STRB     r0,[r1,#8]
                  |L11.214|
;;;385            }
;;;386            
;;;387            if( bsp_GetKeyState( KID_SYRINGE ) ) //注射器插入状态 XXX
0000d6  200a              MOVS     r0,#0xa
0000d8  f7fffffe          BL       bsp_GetKeyState
0000dc  b138              CBZ      r0,|L11.238|
;;;388            {
;;;389                Tmy.Sensor.bit.SyringeState = SYRINGE_ON; //已插入
0000de  4811              LDR      r0,|L11.292|
0000e0  7a00              LDRB     r0,[r0,#8]  ; Tmy
0000e2  f0200008          BIC      r0,r0,#8
0000e6  3008              ADDS     r0,r0,#8
0000e8  490e              LDR      r1,|L11.292|
0000ea  7208              STRB     r0,[r1,#8]
0000ec  e005              B        |L11.250|
                  |L11.238|
;;;390            }else
;;;391            {
;;;392                Tmy.Sensor.bit.SyringeState = SYRINGE_OFF; //未插入
0000ee  480d              LDR      r0,|L11.292|
0000f0  7a00              LDRB     r0,[r0,#8]  ; Tmy
0000f2  f0200008          BIC      r0,r0,#8
0000f6  490b              LDR      r1,|L11.292|
0000f8  7208              STRB     r0,[r1,#8]
                  |L11.250|
;;;393            }
;;;394            
;;;395            if( Tmy.pressure > MAX_PRESSURE ) //过压
0000fa  480a              LDR      r0,|L11.292|
0000fc  68c0              LDR      r0,[r0,#0xc]  ; Tmy
0000fe  f5b07f7a          CMP      r0,#0x3e8
000102  d907              BLS      |L11.276|
;;;396            {
;;;397                Tmy.Sensor.bit.OverPressure = 1; //已插入
000104  4807              LDR      r0,|L11.292|
000106  7a00              LDRB     r0,[r0,#8]  ; Tmy
000108  f0200010          BIC      r0,r0,#0x10
00010c  3010              ADDS     r0,r0,#0x10
00010e  4905              LDR      r1,|L11.292|
000110  7208              STRB     r0,[r1,#8]
000112  e005              B        |L11.288|
                  |L11.276|
;;;398            }else
;;;399            {
;;;400                Tmy.Sensor.bit.OverPressure = 0; //未插入
000114  4803              LDR      r0,|L11.292|
000116  7a00              LDRB     r0,[r0,#8]  ; Tmy
000118  f0200010          BIC      r0,r0,#0x10
00011c  4901              LDR      r1,|L11.292|
00011e  7208              STRB     r0,[r1,#8]
                  |L11.288|
000120  e770              B        |L11.4|
;;;401            }
;;;402    
;;;403            // if (Ble.state.bit.link) //更新BLE联网图标状态
;;;404            // {
;;;405    
;;;406            // }else
;;;407            // {
;;;408                
;;;409            // }
;;;410            
;;;411        }
;;;412    }
;;;413    
                          ENDP

000122  0000              DCW      0x0000
                  |L11.292|
                          DCD      Tmy
                  |L11.296|
000128  d2d1b4a5          DCB      210,209,180,165,181,215,0
00012c  b5d700  
00012f  00                DCB      0
                  |L11.304|
000130  ceb4b4a5          DCB      206,180,180,165,181,215,0
000134  b5d700  
000137  00                DCB      0
                  |L11.312|
                          DCD      Motor

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BLE_TxBuf
                          %        100
                  BLE_RxBuf
                          %        100
                  Tmy
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  dg_sta
000000  00                DCB      0x00
                  dev_sta
000001  000000            DCB      0x00,0x00,0x00
                  xHandleTaskLCD
                          DCD      0x00000000
                  xHandleTaskMotorCtrl
                          DCD      0x00000000
                  xHandleTaskSensor
                          DCD      0x00000000
                  xHandleTaskAdc
                          DCD      0x00000000
                  xHandleTaskBle
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_251558ba____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_251558ba____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_251558ba____REVSH|
#line 128
|__asm___6_main_c_251558ba____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
