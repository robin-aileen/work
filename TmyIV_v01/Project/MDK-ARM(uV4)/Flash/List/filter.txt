; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\filter.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\filter.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -I..\..\User\delay -I.\RTE\_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\filter.crf ..\..\User\app\filter.c]
                          THUMB

                          AREA ||i.FILTER_Clear||, CODE, READONLY, ALIGN=2

                  FILTER_Clear PROC
;;;39     ≈≈–Ú≤…”√√∞≈›∑®*/  
;;;40     void FILTER_Clear( void )  
000000  2000              MOVS     r0,#0
;;;41     {
;;;42         FilterTem.i_in = 0;
000002  4902              LDR      r1,|L1.12|
000004  7008              STRB     r0,[r1,#0]
;;;43         FilterTem.lg_ok = 0;
000006  7048              STRB     r0,[r1,#1]
;;;44     }
000008  4770              BX       lr
;;;45     
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      FilterTem

                          AREA ||i.FILTER_Get||, CODE, READONLY, ALIGN=2

                  FILTER_Get PROC
;;;114    
;;;115    uint8_t FILTER_Get( FILTER_DATA_TYPE *data )    
000000  b5f0              PUSH     {r4-r7,lr}
;;;116    {  
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;117        char count, i, j;
;;;118        FILTER_DATA_TYPE temp, value_buf[FILTER_N];  
;;;119        
;;;120        uint32_t sum=0;  
000006  2500              MOVS     r5,#0
;;;121        
;;;122        if( !FilterTem.lg_ok ) 
000008  4827              LDR      r0,|L2.168|
00000a  7840              LDRB     r0,[r0,#1]  ; FilterTem
00000c  b980              CBNZ     r0,|L2.48|
;;;123        {
;;;124            if( FilterTem.i_in == 0 ) return 0;
00000e  4826              LDR      r0,|L2.168|
000010  7800              LDRB     r0,[r0,#0]  ; FilterTem
000012  b910              CBNZ     r0,|L2.26|
000014  2000              MOVS     r0,#0
                  |L2.22|
;;;125            *data = FilterTem.Buf[ FilterTem.i_in-1 ];
;;;126            return FilterTem.i_in;//FilterTem.lg_ok;
;;;127        }
;;;128        
;;;129        for (count=0; count<FILTER_N; count++)  
;;;130        {  
;;;131            value_buf[count] = FilterTem.Buf[ count ];
;;;132        }  
;;;133        for (j=0;j<FILTER_N-1;j++)  
;;;134        {  
;;;135            for (i=0;i<FILTER_N-j;i++)  
;;;136            {  
;;;137                 if ( value_buf[i]>value_buf[i+1] )  
;;;138                {  
;;;139                     temp = value_buf[i];  
;;;140                     value_buf[i] = value_buf[i+1];  
;;;141                     value_buf[i+1] = temp;  
;;;142                }  
;;;143             }  
;;;144        }  
;;;145        for(count=1;count<FILTER_N-1;count++)  
;;;146        sum += value_buf[count];
;;;147        
;;;148        *data = (FILTER_DATA_TYPE)(sum/(FILTER_N-2));
;;;149         return FilterTem.i_in;
;;;150         
;;;151    } 
000016  b006              ADD      sp,sp,#0x18
000018  bdf0              POP      {r4-r7,pc}
                  |L2.26|
00001a  4823              LDR      r0,|L2.168|
00001c  7800              LDRB     r0,[r0,#0]            ;125  ; FilterTem
00001e  1e40              SUBS     r0,r0,#1              ;125
000020  4f21              LDR      r7,|L2.168|
000022  1cbf              ADDS     r7,r7,#2              ;125
000024  f8370010          LDRH     r0,[r7,r0,LSL #1]     ;125
000028  8020              STRH     r0,[r4,#0]            ;125
00002a  1eb8              SUBS     r0,r7,#2              ;126
00002c  7800              LDRB     r0,[r0,#0]            ;126  ; FilterTem
00002e  e7f2              B        |L2.22|
                  |L2.48|
000030  2100              MOVS     r1,#0                 ;129
000032  e007              B        |L2.68|
                  |L2.52|
000034  481c              LDR      r0,|L2.168|
000036  1c80              ADDS     r0,r0,#2              ;131
000038  f8300011          LDRH     r0,[r0,r1,LSL #1]     ;131
00003c  f82d0011          STRH     r0,[sp,r1,LSL #1]     ;131
000040  1c48              ADDS     r0,r1,#1              ;129
000042  b2c1              UXTB     r1,r0                 ;129
                  |L2.68|
000044  290b              CMP      r1,#0xb               ;129
000046  dbf5              BLT      |L2.52|
000048  2300              MOVS     r3,#0                 ;133
00004a  e01a              B        |L2.130|
                  |L2.76|
00004c  2200              MOVS     r2,#0                 ;135
00004e  e012              B        |L2.118|
                  |L2.80|
000050  f83d7012          LDRH     r7,[sp,r2,LSL #1]     ;137
000054  1c50              ADDS     r0,r2,#1              ;137
000056  f83d0010          LDRH     r0,[sp,r0,LSL #1]     ;137
00005a  4287              CMP      r7,r0                 ;137
00005c  dd09              BLE      |L2.114|
00005e  f83d6012          LDRH     r6,[sp,r2,LSL #1]     ;139
000062  1c50              ADDS     r0,r2,#1              ;140
000064  f83d0010          LDRH     r0,[sp,r0,LSL #1]     ;140
000068  f82d0012          STRH     r0,[sp,r2,LSL #1]     ;140
00006c  1c50              ADDS     r0,r2,#1              ;141
00006e  f82d6010          STRH     r6,[sp,r0,LSL #1]     ;141
                  |L2.114|
000072  1c50              ADDS     r0,r2,#1              ;135
000074  b2c2              UXTB     r2,r0                 ;135
                  |L2.118|
000076  f1c3000b          RSB      r0,r3,#0xb            ;135
00007a  4290              CMP      r0,r2                 ;135
00007c  dce8              BGT      |L2.80|
00007e  1c58              ADDS     r0,r3,#1              ;133
000080  b2c3              UXTB     r3,r0                 ;133
                  |L2.130|
000082  2b0a              CMP      r3,#0xa               ;133
000084  dbe2              BLT      |L2.76|
000086  2101              MOVS     r1,#1                 ;145
000088  e004              B        |L2.148|
                  |L2.138|
00008a  f83d0011          LDRH     r0,[sp,r1,LSL #1]     ;146
00008e  4405              ADD      r5,r5,r0              ;146
000090  1c48              ADDS     r0,r1,#1              ;145
000092  b2c1              UXTB     r1,r0                 ;145
                  |L2.148|
000094  290a              CMP      r1,#0xa               ;145
000096  dbf8              BLT      |L2.138|
000098  2009              MOVS     r0,#9                 ;148
00009a  fbb5f0f0          UDIV     r0,r5,r0              ;148
00009e  8020              STRH     r0,[r4,#0]            ;148
0000a0  4801              LDR      r0,|L2.168|
0000a2  7800              LDRB     r0,[r0,#0]            ;149  ; FilterTem
0000a4  e7b7              B        |L2.22|
;;;152    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L2.168|
                          DCD      FilterTem

                          AREA ||i.FILTER_Push||, CODE, READONLY, ALIGN=2

                  FILTER_Push PROC
;;;45     
;;;46     uint8_t FILTER_Push( FILTER_DATA_TYPE data ) 
000000  4601              MOV      r1,r0
;;;47     {  
;;;48     
;;;49         FilterTem.Buf[ FilterTem.i_in++ ] = data;
000002  480a              LDR      r0,|L3.44|
000004  7802              LDRB     r2,[r0,#0]  ; FilterTem
000006  7800              LDRB     r0,[r0,#0]  ; FilterTem
000008  1c40              ADDS     r0,r0,#1
00000a  4b08              LDR      r3,|L3.44|
00000c  7018              STRB     r0,[r3,#0]
00000e  1c98              ADDS     r0,r3,#2
000010  f8201012          STRH     r1,[r0,r2,LSL #1]
;;;50         
;;;51         if( FilterTem.i_in > FILTER_N-1 ) 
000014  1e80              SUBS     r0,r0,#2
000016  7800              LDRB     r0,[r0,#0]  ; FilterTem
000018  280a              CMP      r0,#0xa
00001a  dd04              BLE      |L3.38|
;;;52         {
;;;53             FilterTem.i_in = 0;
00001c  2000              MOVS     r0,#0
00001e  461a              MOV      r2,r3
000020  7010              STRB     r0,[r2,#0]
;;;54             FilterTem.lg_ok = 1;
000022  2001              MOVS     r0,#1
000024  7050              STRB     r0,[r2,#1]
                  |L3.38|
;;;55         }
;;;56             
;;;57         //if( FilterTem.i_in > FILTER_N-1 ) FilterTem.lg_ok = 1;
;;;58         return FilterTem.i_in;
000026  4801              LDR      r0,|L3.44|
000028  7800              LDRB     r0,[r0,#0]  ; FilterTem
;;;59     }
00002a  4770              BX       lr
;;;60     
                          ENDP

                  |L3.44|
                          DCD      FilterTem

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  BLE_TxBuf
                          %        100
                  BLE_RxBuf
                          %        100
                  FilterTem
                          %        24

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\filter.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_filter_c_680ba36b____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_filter_c_680ba36b____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_filter_c_680ba36b____REVSH|
#line 128
|__asm___8_filter_c_680ba36b____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
