; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\eeprom.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\eeprom.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -I..\..\User\delay -I.\RTE\_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\eeprom.crf ..\..\User\app\eeprom.c]
                          THUMB

                          AREA ||i.EE_FindValidPage||, CODE, READONLY, ALIGN=2

                  EE_FindValidPage PROC
;;;395      */
;;;396    static uint16_t EE_FindValidPage(uint8_t Operation)
000000  4603              MOV      r3,r0
;;;397    {
;;;398      uint16_t PageStatus0 = 6, PageStatus1 = 6;
000002  2106              MOVS     r1,#6
000004  2206              MOVS     r2,#6
;;;399    
;;;400      /* Get Page0 actual status */
;;;401      PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
000006  4812              LDR      r0,|L1.80|
000008  8801              LDRH     r1,[r0,#0]
;;;402    
;;;403      /* Get Page1 actual status */
;;;404      PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
00000a  4812              LDR      r0,|L1.84|
00000c  8802              LDRH     r2,[r0,#0]
;;;405    
;;;406      /* Write or read operation */
;;;407      switch (Operation)
00000e  b1ab              CBZ      r3,|L1.60|
000010  2b01              CMP      r3,#1
000012  d11b              BNE      |L1.76|
;;;408      {
;;;409        case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
;;;410          if (PageStatus1 == VALID_PAGE)
000014  b93a              CBNZ     r2,|L1.38|
;;;411          {
;;;412            /* Page0 receiving data */
;;;413            if (PageStatus0 == RECEIVE_DATA)
000016  f64e60ee          MOV      r0,#0xeeee
00001a  4281              CMP      r1,r0
00001c  d101              BNE      |L1.34|
;;;414            {
;;;415              return PAGE0;         /* Page0 valid */
00001e  2000              MOVS     r0,#0
                  |L1.32|
;;;416            }
;;;417            else
;;;418            {
;;;419              return PAGE1;         /* Page1 valid */
;;;420            }
;;;421          }
;;;422          else if (PageStatus0 == VALID_PAGE)
;;;423          {
;;;424            /* Page1 receiving data */
;;;425            if (PageStatus1 == RECEIVE_DATA)
;;;426            {
;;;427              return PAGE1;         /* Page1 valid */
;;;428            }
;;;429            else
;;;430            {
;;;431              return PAGE0;         /* Page0 valid */
;;;432            }
;;;433          }
;;;434          else
;;;435          {
;;;436            return NO_VALID_PAGE;   /* No valid Page */
;;;437          }
;;;438    
;;;439        case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
;;;440          if (PageStatus0 == VALID_PAGE)
;;;441          {
;;;442            return PAGE0;           /* Page0 valid */
;;;443          }
;;;444          else if (PageStatus1 == VALID_PAGE)
;;;445          {
;;;446            return PAGE1;           /* Page1 valid */
;;;447          }
;;;448          else
;;;449          {
;;;450            return NO_VALID_PAGE ;  /* No valid Page */
;;;451          }
;;;452    
;;;453        default:
;;;454          return PAGE0;             /* Page0 valid */
;;;455      }
;;;456    }
000020  4770              BX       lr
                  |L1.34|
000022  2001              MOVS     r0,#1                 ;419
000024  e7fc              B        |L1.32|
                  |L1.38|
000026  b939              CBNZ     r1,|L1.56|
000028  f64e60ee          MOV      r0,#0xeeee            ;425
00002c  4282              CMP      r2,r0                 ;425
00002e  d101              BNE      |L1.52|
000030  2001              MOVS     r0,#1                 ;427
000032  e7f5              B        |L1.32|
                  |L1.52|
000034  2000              MOVS     r0,#0                 ;431
000036  e7f3              B        |L1.32|
                  |L1.56|
000038  20ab              MOVS     r0,#0xab              ;436
00003a  e7f1              B        |L1.32|
                  |L1.60|
00003c  b909              CBNZ     r1,|L1.66|
00003e  2000              MOVS     r0,#0                 ;442
000040  e7ee              B        |L1.32|
                  |L1.66|
000042  b90a              CBNZ     r2,|L1.72|
000044  2001              MOVS     r0,#1                 ;446
000046  e7eb              B        |L1.32|
                  |L1.72|
000048  20ab              MOVS     r0,#0xab              ;450
00004a  e7e9              B        |L1.32|
                  |L1.76|
00004c  2000              MOVS     r0,#0                 ;454
00004e  e7e7              B        |L1.32|
;;;457    
                          ENDP

                  |L1.80|
                          DCD      0x08015800
                  |L1.84|
                          DCD      0x08015c00

                          AREA ||i.EE_Format||, CODE, READONLY, ALIGN=2

                  EE_Format PROC
;;;357      */
;;;358    static FLASH_Status EE_Format(void)
000000  b510              PUSH     {r4,lr}
;;;359    {
;;;360      FLASH_Status FlashStatus = FLASH_COMPLETE;
000002  2404              MOVS     r4,#4
;;;361    
;;;362      /* Erase Page0 */
;;;363      FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
000004  480b              LDR      r0,|L2.52|
000006  f7fffffe          BL       FLASH_ErasePage
00000a  4604              MOV      r4,r0
;;;364    
;;;365      /* If erase operation was failed, a Flash error code is returned */
;;;366      if (FlashStatus != FLASH_COMPLETE)
00000c  2c04              CMP      r4,#4
00000e  d001              BEQ      |L2.20|
;;;367      {
;;;368        return FlashStatus;
000010  4620              MOV      r0,r4
                  |L2.18|
;;;369      }
;;;370    
;;;371      /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
;;;372      FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
;;;373    
;;;374      /* If program operation was failed, a Flash error code is returned */
;;;375      if (FlashStatus != FLASH_COMPLETE)
;;;376      {
;;;377        return FlashStatus;
;;;378      }
;;;379    
;;;380      /* Erase Page1 */
;;;381      FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
;;;382    
;;;383      /* Return Page1 erase operation status */
;;;384      return FlashStatus;
;;;385    }
000012  bd10              POP      {r4,pc}
                  |L2.20|
000014  2100              MOVS     r1,#0                 ;372
000016  4807              LDR      r0,|L2.52|
000018  f7fffffe          BL       FLASH_ProgramHalfWord
00001c  4604              MOV      r4,r0                 ;372
00001e  2c04              CMP      r4,#4                 ;375
000020  d001              BEQ      |L2.38|
000022  4620              MOV      r0,r4                 ;377
000024  e7f5              B        |L2.18|
                  |L2.38|
000026  4804              LDR      r0,|L2.56|
000028  f7fffffe          BL       FLASH_ErasePage
00002c  4604              MOV      r4,r0                 ;381
00002e  4620              MOV      r0,r4                 ;384
000030  e7ef              B        |L2.18|
;;;386    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x08015800
                  |L2.56|
                          DCD      0x08015c00

                          AREA ||i.EE_Init||, CODE, READONLY, ALIGN=2

                  EE_Init PROC
;;;59       */
;;;60     uint16_t EE_Init(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;61     {
;;;62       uint16_t PageStatus0 = 6, PageStatus1 = 6;
000004  f04f0a06          MOV      r10,#6
000008  2606              MOVS     r6,#6
;;;63       uint16_t VarIdx = 0;
00000a  2500              MOVS     r5,#0
;;;64       uint16_t EepromStatus = 0, ReadStatus = 0;
00000c  2700              MOVS     r7,#0
00000e  46a8              MOV      r8,r5
;;;65       int16_t x = -1;
000010  f04f39ff          MOV      r9,#0xffffffff
;;;66       uint16_t  FlashStatus;
;;;67     
;;;68       /* Get Page0 status */
;;;69       PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
000014  4875              LDR      r0,|L3.492|
000016  f8b0a000          LDRH     r10,[r0,#0]
;;;70       /* Get Page1 status */
;;;71       PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
00001a  4875              LDR      r0,|L3.496|
00001c  8806              LDRH     r6,[r0,#0]
;;;72     
;;;73       /* Check for invalid header states and repair if necessary */
;;;74       switch (PageStatus0)
00001e  f1ba0000          SUBS     r0,r10,#0
000022  d076              BEQ      |L3.274|
000024  f5a0406e          SUB      r0,r0,#0xee00
000028  38ee              SUBS     r0,r0,#0xee
00002a  b358              CBZ      r0,|L3.132|
00002c  f5a05088          SUB      r0,r0,#0x1100
000030  3811              SUBS     r0,r0,#0x11
000032  2800              CMP      r0,#0
000034  d16e              BNE      |L3.276|
;;;75       {
;;;76         case ERASED:
;;;77           if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
000036  b946              CBNZ     r6,|L3.74|
;;;78           {
;;;79             /* Erase Page0 */
;;;80             FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
000038  486c              LDR      r0,|L3.492|
00003a  f7fffffe          BL       FLASH_ErasePage
00003e  4604              MOV      r4,r0
;;;81             /* If erase operation was failed, a Flash error code is returned */
;;;82             if (FlashStatus != FLASH_COMPLETE)
000040  2c04              CMP      r4,#4
000042  d01e              BEQ      |L3.130|
;;;83             {
;;;84               return FlashStatus;
000044  4620              MOV      r0,r4
                  |L3.70|
;;;85             }
;;;86           }
;;;87           else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
;;;88           {
;;;89             /* Erase Page0 */
;;;90             FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
;;;91             /* If erase operation was failed, a Flash error code is returned */
;;;92             if (FlashStatus != FLASH_COMPLETE)
;;;93             {
;;;94               return FlashStatus;
;;;95             }
;;;96             /* Mark Page1 as valid */
;;;97             FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
;;;98             /* If program operation was failed, a Flash error code is returned */
;;;99             if (FlashStatus != FLASH_COMPLETE)
;;;100            {
;;;101              return FlashStatus;
;;;102            }
;;;103          }
;;;104          else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
;;;105          {
;;;106            /* Erase both Page0 and Page1 and set Page0 as valid page */
;;;107            FlashStatus = EE_Format();
;;;108            /* If erase/program operation was failed, a Flash error code is returned */
;;;109            if (FlashStatus != FLASH_COMPLETE)
;;;110            {
;;;111              return FlashStatus;
;;;112            }
;;;113          }
;;;114          break;
;;;115    
;;;116        case RECEIVE_DATA:
;;;117          if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
;;;118          {
;;;119            /* Transfer data from Page1 to Page0 */
;;;120            for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
;;;121            {
;;;122              if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
;;;123              {
;;;124                x = VarIdx;
;;;125              }
;;;126              if (VarIdx != x)
;;;127              {
;;;128                /* Read the last variables' updates */
;;;129                ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
;;;130                /* In case variable corresponding to the virtual address was found */
;;;131                if (ReadStatus != 0x1)
;;;132                {
;;;133                  /* Transfer the variable to the Page0 */
;;;134                  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
;;;135                  /* If program operation was failed, a Flash error code is returned */
;;;136                  if (EepromStatus != FLASH_COMPLETE)
;;;137                  {
;;;138                    return EepromStatus;
;;;139                  }
;;;140                }
;;;141              }
;;;142            }
;;;143            /* Mark Page0 as valid */
;;;144            FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
;;;145            /* If program operation was failed, a Flash error code is returned */
;;;146            if (FlashStatus != FLASH_COMPLETE)
;;;147            {
;;;148              return FlashStatus;
;;;149            }
;;;150            /* Erase Page1 */
;;;151            FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
;;;152            /* If erase operation was failed, a Flash error code is returned */
;;;153            if (FlashStatus != FLASH_COMPLETE)
;;;154            {
;;;155              return FlashStatus;
;;;156            }
;;;157          }
;;;158          else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
;;;159          {
;;;160            /* Erase Page1 */
;;;161            FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
;;;162            /* If erase operation was failed, a Flash error code is returned */
;;;163            if (FlashStatus != FLASH_COMPLETE)
;;;164            {
;;;165              return FlashStatus;
;;;166            }
;;;167            /* Mark Page0 as valid */
;;;168            FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
;;;169            /* If program operation was failed, a Flash error code is returned */
;;;170            if (FlashStatus != FLASH_COMPLETE)
;;;171            {
;;;172              return FlashStatus;
;;;173            }
;;;174          }
;;;175          else /* Invalid state -> format eeprom */
;;;176          {
;;;177            /* Erase both Page0 and Page1 and set Page0 as valid page */
;;;178            FlashStatus = EE_Format();
;;;179            /* If erase/program operation was failed, a Flash error code is returned */
;;;180            if (FlashStatus != FLASH_COMPLETE)
;;;181            {
;;;182              return FlashStatus;
;;;183            }
;;;184          }
;;;185          break;
;;;186    
;;;187        case VALID_PAGE:
;;;188          if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
;;;189          {
;;;190            /* Erase both Page0 and Page1 and set Page0 as valid page */
;;;191            FlashStatus = EE_Format();
;;;192            /* If erase/program operation was failed, a Flash error code is returned */
;;;193            if (FlashStatus != FLASH_COMPLETE)
;;;194            {
;;;195              return FlashStatus;
;;;196            }
;;;197          }
;;;198          else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
;;;199          {
;;;200            /* Erase Page1 */
;;;201            FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
;;;202            /* If erase operation was failed, a Flash error code is returned */
;;;203            if (FlashStatus != FLASH_COMPLETE)
;;;204            {
;;;205              return FlashStatus;
;;;206            }
;;;207          }
;;;208          else /* Page0 valid, Page1 receive */
;;;209          {
;;;210            /* Transfer data from Page0 to Page1 */
;;;211            for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
;;;212            {
;;;213              if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
;;;214              {
;;;215                x = VarIdx;
;;;216              }
;;;217              if (VarIdx != x)
;;;218              {
;;;219                /* Read the last variables' updates */
;;;220                ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
;;;221                /* In case variable corresponding to the virtual address was found */
;;;222                if (ReadStatus != 0x1)
;;;223                {
;;;224                  /* Transfer the variable to the Page1 */
;;;225                  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
;;;226                  /* If program operation was failed, a Flash error code is returned */
;;;227                  if (EepromStatus != FLASH_COMPLETE)
;;;228                  {
;;;229                    return EepromStatus;
;;;230                  }
;;;231                }
;;;232              }
;;;233            }
;;;234            /* Mark Page1 as valid */
;;;235            FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
;;;236            /* If program operation was failed, a Flash error code is returned */
;;;237            if (FlashStatus != FLASH_COMPLETE)
;;;238            {
;;;239              return FlashStatus;
;;;240            }
;;;241            /* Erase Page0 */
;;;242            FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
;;;243            /* If erase operation was failed, a Flash error code is returned */
;;;244            if (FlashStatus != FLASH_COMPLETE)
;;;245            {
;;;246              return FlashStatus;
;;;247            }
;;;248          }
;;;249          break;
;;;250    
;;;251        default:  /* Any other state -> format eeprom */
;;;252          /* Erase both Page0 and Page1 and set Page0 as valid page */
;;;253          FlashStatus = EE_Format();
;;;254          /* If erase/program operation was failed, a Flash error code is returned */
;;;255          if (FlashStatus != FLASH_COMPLETE)
;;;256          {
;;;257            return FlashStatus;
;;;258          }
;;;259          break;
;;;260      }
;;;261    
;;;262      return FLASH_COMPLETE;
;;;263    }
000046  e8bd87f0          POP      {r4-r10,pc}
                  |L3.74|
00004a  f64e60ee          MOV      r0,#0xeeee            ;87
00004e  4286              CMP      r6,r0                 ;87
000050  d110              BNE      |L3.116|
000052  4866              LDR      r0,|L3.492|
000054  f7fffffe          BL       FLASH_ErasePage
000058  4604              MOV      r4,r0                 ;90
00005a  2c04              CMP      r4,#4                 ;92
00005c  d001              BEQ      |L3.98|
00005e  4620              MOV      r0,r4                 ;94
000060  e7f1              B        |L3.70|
                  |L3.98|
000062  2100              MOVS     r1,#0                 ;97
000064  4862              LDR      r0,|L3.496|
000066  f7fffffe          BL       FLASH_ProgramHalfWord
00006a  4604              MOV      r4,r0                 ;97
00006c  2c04              CMP      r4,#4                 ;99
00006e  d008              BEQ      |L3.130|
000070  4620              MOV      r0,r4                 ;101
000072  e7e8              B        |L3.70|
                  |L3.116|
000074  f7fffffe          BL       EE_Format
000078  4604              MOV      r4,r0                 ;107
00007a  2c04              CMP      r4,#4                 ;109
00007c  d001              BEQ      |L3.130|
00007e  4620              MOV      r0,r4                 ;111
000080  e7e1              B        |L3.70|
                  |L3.130|
000082  e0af              B        |L3.484|
                  |L3.132|
000084  bb86              CBNZ     r6,|L3.232|
000086  2500              MOVS     r5,#0                 ;120
000088  e023              B        |L3.210|
                  |L3.138|
00008a  4858              LDR      r0,|L3.492|
00008c  1d80              ADDS     r0,r0,#6              ;122
00008e  8800              LDRH     r0,[r0,#0]            ;122
000090  4958              LDR      r1,|L3.500|
000092  f8311015          LDRH     r1,[r1,r5,LSL #1]     ;122
000096  4288              CMP      r0,r1                 ;122
000098  d101              BNE      |L3.158|
00009a  fa0ff985          SXTH     r9,r5                 ;124
                  |L3.158|
00009e  454d              CMP      r5,r9                 ;126
0000a0  d015              BEQ      |L3.206|
0000a2  4954              LDR      r1,|L3.500|
0000a4  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;129
0000a8  4953              LDR      r1,|L3.504|
0000aa  f7fffffe          BL       EE_ReadVariable
0000ae  4680              MOV      r8,r0                 ;129
0000b0  f1b80f01          CMP      r8,#1                 ;131
0000b4  d00b              BEQ      |L3.206|
0000b6  494f              LDR      r1,|L3.500|
0000b8  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;134
0000bc  494e              LDR      r1,|L3.504|
0000be  8809              LDRH     r1,[r1,#0]            ;134  ; DataVar
0000c0  f7fffffe          BL       EE_VerifyPageFullWriteVariable
0000c4  4607              MOV      r7,r0                 ;134
0000c6  2f04              CMP      r7,#4                 ;136
0000c8  d001              BEQ      |L3.206|
0000ca  4638              MOV      r0,r7                 ;138
0000cc  e7bb              B        |L3.70|
                  |L3.206|
0000ce  1c68              ADDS     r0,r5,#1              ;120
0000d0  b285              UXTH     r5,r0                 ;120
                  |L3.210|
0000d2  2d02              CMP      r5,#2                 ;120
0000d4  dbd9              BLT      |L3.138|
0000d6  2100              MOVS     r1,#0                 ;144
0000d8  4844              LDR      r0,|L3.492|
0000da  f7fffffe          BL       FLASH_ProgramHalfWord
0000de  4604              MOV      r4,r0                 ;144
0000e0  2c04              CMP      r4,#4                 ;146
0000e2  d002              BEQ      |L3.234|
0000e4  4620              MOV      r0,r4                 ;148
0000e6  e7ae              B        |L3.70|
                  |L3.232|
0000e8  e007              B        |L3.250|
                  |L3.234|
0000ea  4841              LDR      r0,|L3.496|
0000ec  f7fffffe          BL       FLASH_ErasePage
0000f0  4604              MOV      r4,r0                 ;151
0000f2  2c04              CMP      r4,#4                 ;153
0000f4  d01f              BEQ      |L3.310|
0000f6  4620              MOV      r0,r4                 ;155
0000f8  e7a5              B        |L3.70|
                  |L3.250|
0000fa  f64f70ff          MOV      r0,#0xffff            ;158
0000fe  4286              CMP      r6,r0                 ;158
000100  d112              BNE      |L3.296|
000102  483b              LDR      r0,|L3.496|
000104  f7fffffe          BL       FLASH_ErasePage
000108  4604              MOV      r4,r0                 ;161
00010a  2c04              CMP      r4,#4                 ;163
00010c  d003              BEQ      |L3.278|
00010e  4620              MOV      r0,r4                 ;165
000110  e799              B        |L3.70|
                  |L3.274|
000112  e011              B        |L3.312|
                  |L3.276|
000114  e05e              B        |L3.468|
                  |L3.278|
000116  2100              MOVS     r1,#0                 ;168
000118  4834              LDR      r0,|L3.492|
00011a  f7fffffe          BL       FLASH_ProgramHalfWord
00011e  4604              MOV      r4,r0                 ;168
000120  2c04              CMP      r4,#4                 ;170
000122  d008              BEQ      |L3.310|
000124  4620              MOV      r0,r4                 ;172
000126  e78e              B        |L3.70|
                  |L3.296|
000128  f7fffffe          BL       EE_Format
00012c  4604              MOV      r4,r0                 ;178
00012e  2c04              CMP      r4,#4                 ;180
000130  d001              BEQ      |L3.310|
000132  4620              MOV      r0,r4                 ;182
000134  e787              B        |L3.70|
                  |L3.310|
000136  e055              B        |L3.484|
                  |L3.312|
000138  b936              CBNZ     r6,|L3.328|
00013a  f7fffffe          BL       EE_Format
00013e  4604              MOV      r4,r0                 ;191
000140  2c04              CMP      r4,#4                 ;193
000142  d046              BEQ      |L3.466|
000144  4620              MOV      r0,r4                 ;195
000146  e77e              B        |L3.70|
                  |L3.328|
000148  f64f70ff          MOV      r0,#0xffff            ;198
00014c  4286              CMP      r6,r0                 ;198
00014e  d107              BNE      |L3.352|
000150  4827              LDR      r0,|L3.496|
000152  f7fffffe          BL       FLASH_ErasePage
000156  4604              MOV      r4,r0                 ;201
000158  2c04              CMP      r4,#4                 ;203
00015a  d03a              BEQ      |L3.466|
00015c  4620              MOV      r0,r4                 ;205
00015e  e772              B        |L3.70|
                  |L3.352|
000160  2500              MOVS     r5,#0                 ;211
000162  e023              B        |L3.428|
                  |L3.356|
000164  4822              LDR      r0,|L3.496|
000166  1d80              ADDS     r0,r0,#6              ;213
000168  8800              LDRH     r0,[r0,#0]            ;213
00016a  4922              LDR      r1,|L3.500|
00016c  f8311015          LDRH     r1,[r1,r5,LSL #1]     ;213
000170  4288              CMP      r0,r1                 ;213
000172  d101              BNE      |L3.376|
000174  fa0ff985          SXTH     r9,r5                 ;215
                  |L3.376|
000178  454d              CMP      r5,r9                 ;217
00017a  d015              BEQ      |L3.424|
00017c  491d              LDR      r1,|L3.500|
00017e  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;220
000182  491d              LDR      r1,|L3.504|
000184  f7fffffe          BL       EE_ReadVariable
000188  4680              MOV      r8,r0                 ;220
00018a  f1b80f01          CMP      r8,#1                 ;222
00018e  d00b              BEQ      |L3.424|
000190  4918              LDR      r1,|L3.500|
000192  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;225
000196  4918              LDR      r1,|L3.504|
000198  8809              LDRH     r1,[r1,#0]            ;225  ; DataVar
00019a  f7fffffe          BL       EE_VerifyPageFullWriteVariable
00019e  4607              MOV      r7,r0                 ;225
0001a0  2f04              CMP      r7,#4                 ;227
0001a2  d001              BEQ      |L3.424|
0001a4  4638              MOV      r0,r7                 ;229
0001a6  e74e              B        |L3.70|
                  |L3.424|
0001a8  1c68              ADDS     r0,r5,#1              ;211
0001aa  b285              UXTH     r5,r0                 ;211
                  |L3.428|
0001ac  2d02              CMP      r5,#2                 ;211
0001ae  dbd9              BLT      |L3.356|
0001b0  2100              MOVS     r1,#0                 ;235
0001b2  480f              LDR      r0,|L3.496|
0001b4  f7fffffe          BL       FLASH_ProgramHalfWord
0001b8  4604              MOV      r4,r0                 ;235
0001ba  2c04              CMP      r4,#4                 ;237
0001bc  d001              BEQ      |L3.450|
0001be  4620              MOV      r0,r4                 ;239
0001c0  e741              B        |L3.70|
                  |L3.450|
0001c2  480a              LDR      r0,|L3.492|
0001c4  f7fffffe          BL       FLASH_ErasePage
0001c8  4604              MOV      r4,r0                 ;242
0001ca  2c04              CMP      r4,#4                 ;244
0001cc  d001              BEQ      |L3.466|
0001ce  4620              MOV      r0,r4                 ;246
0001d0  e739              B        |L3.70|
                  |L3.466|
0001d2  e007              B        |L3.484|
                  |L3.468|
0001d4  f7fffffe          BL       EE_Format
0001d8  4604              MOV      r4,r0                 ;253
0001da  2c04              CMP      r4,#4                 ;255
0001dc  d001              BEQ      |L3.482|
0001de  4620              MOV      r0,r4                 ;257
0001e0  e731              B        |L3.70|
                  |L3.482|
0001e2  bf00              NOP                            ;259
                  |L3.484|
0001e4  bf00              NOP                            ;114
0001e6  2004              MOVS     r0,#4                 ;262
0001e8  e72d              B        |L3.70|
;;;264    
                          ENDP

0001ea  0000              DCW      0x0000
                  |L3.492|
                          DCD      0x08015800
                  |L3.496|
                          DCD      0x08015c00
                  |L3.500|
                          DCD      VirtAddVarTab
                  |L3.504|
                          DCD      DataVar

                          AREA ||i.EE_PageTransfer||, CODE, READONLY, ALIGN=2

                  EE_PageTransfer PROC
;;;528      */
;;;529    static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;530    {
000004  4607              MOV      r7,r0
000006  4689              MOV      r9,r1
;;;531      FLASH_Status FlashStatus = FLASH_COMPLETE;
000008  2504              MOVS     r5,#4
;;;532      uint32_t NewPageAddress = 0x080103FF, OldPageAddress = 0x08010000;
00000a  f8dfa0d0          LDR      r10,|L4.220|
00000e  4834              LDR      r0,|L4.224|
000010  9000              STR      r0,[sp,#0]
;;;533      uint16_t ValidPage = PAGE0, VarIdx = 0;
000012  f04f0800          MOV      r8,#0
000016  2400              MOVS     r4,#0
;;;534      uint16_t EepromStatus = 0, ReadStatus = 0;
000018  2600              MOVS     r6,#0
00001a  f04f0b00          MOV      r11,#0
;;;535    
;;;536      /* Get active Page for read operation */
;;;537      ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       EE_FindValidPage
000024  4680              MOV      r8,r0
;;;538    
;;;539      if (ValidPage == PAGE1)       /* Page1 valid */
000026  f1b80f01          CMP      r8,#1
00002a  d104              BNE      |L4.54|
;;;540      {
;;;541        /* New page address where variable will be moved to */
;;;542        NewPageAddress = PAGE0_BASE_ADDRESS;
00002c  f8dfa0b4          LDR      r10,|L4.228|
;;;543    
;;;544        /* Old page address where variable will be taken from */
;;;545        OldPageAddress = PAGE1_BASE_ADDRESS;
000030  482d              LDR      r0,|L4.232|
000032  9000              STR      r0,[sp,#0]
000034  e00a              B        |L4.76|
                  |L4.54|
;;;546      }
;;;547      else if (ValidPage == PAGE0)  /* Page0 valid */
000036  f1b80f00          CMP      r8,#0
00003a  d104              BNE      |L4.70|
;;;548      {
;;;549        /* New page address where variable will be moved to */
;;;550        NewPageAddress = PAGE1_BASE_ADDRESS;
00003c  f8dfa0a8          LDR      r10,|L4.232|
;;;551    
;;;552        /* Old page address where variable will be taken from */
;;;553        OldPageAddress = PAGE0_BASE_ADDRESS;
000040  4828              LDR      r0,|L4.228|
000042  9000              STR      r0,[sp,#0]
000044  e002              B        |L4.76|
                  |L4.70|
;;;554      }
;;;555      else
;;;556      {
;;;557        return NO_VALID_PAGE;       /* No valid Page */
000046  20ab              MOVS     r0,#0xab
                  |L4.72|
;;;558      }
;;;559    
;;;560      /* Set the new Page status to RECEIVE_DATA status */
;;;561      FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
;;;562      /* If program operation was failed, a Flash error code is returned */
;;;563      if (FlashStatus != FLASH_COMPLETE)
;;;564      {
;;;565        return FlashStatus;
;;;566      }
;;;567    
;;;568      /* Write the variable passed as parameter in the new active page */
;;;569      EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
;;;570      /* If program operation was failed, a Flash error code is returned */
;;;571      if (EepromStatus != FLASH_COMPLETE)
;;;572      {
;;;573        return EepromStatus;
;;;574      }
;;;575    
;;;576      /* Transfer process: transfer variables from old to the new active page */
;;;577      for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
;;;578      {
;;;579        if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
;;;580        {
;;;581          /* Read the other last variable updates */
;;;582          ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
;;;583          /* In case variable corresponding to the virtual address was found */
;;;584          if (ReadStatus != 0x1)
;;;585          {
;;;586            /* Transfer the variable to the new active page */
;;;587            EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
;;;588            /* If program operation was failed, a Flash error code is returned */
;;;589            if (EepromStatus != FLASH_COMPLETE)
;;;590            {
;;;591              return EepromStatus;
;;;592            }
;;;593          }
;;;594        }
;;;595      }
;;;596    
;;;597      /* Erase the old Page: Set old Page status to ERASED status */
;;;598      FlashStatus = FLASH_ErasePage(OldPageAddress);
;;;599      /* If erase operation was failed, a Flash error code is returned */
;;;600      if (FlashStatus != FLASH_COMPLETE)
;;;601      {
;;;602        return FlashStatus;
;;;603      }
;;;604    
;;;605      /* Set new Page status to VALID_PAGE status */
;;;606      FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
;;;607      /* If program operation was failed, a Flash error code is returned */
;;;608      if (FlashStatus != FLASH_COMPLETE)
;;;609      {
;;;610        return FlashStatus;
;;;611      }
;;;612    
;;;613      /* Return last operation flash status */
;;;614      return FlashStatus;
;;;615    }
000048  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.76|
00004c  f64e61ee          MOV      r1,#0xeeee            ;561
000050  4650              MOV      r0,r10                ;561
000052  f7fffffe          BL       FLASH_ProgramHalfWord
000056  4605              MOV      r5,r0                 ;561
000058  2d04              CMP      r5,#4                 ;563
00005a  d001              BEQ      |L4.96|
00005c  4628              MOV      r0,r5                 ;565
00005e  e7f3              B        |L4.72|
                  |L4.96|
000060  4649              MOV      r1,r9                 ;569
000062  4638              MOV      r0,r7                 ;569
000064  f7fffffe          BL       EE_VerifyPageFullWriteVariable
000068  4606              MOV      r6,r0                 ;569
00006a  2e04              CMP      r6,#4                 ;571
00006c  d001              BEQ      |L4.114|
00006e  4630              MOV      r0,r6                 ;573
000070  e7ea              B        |L4.72|
                  |L4.114|
000072  2400              MOVS     r4,#0                 ;577
000074  e01c              B        |L4.176|
                  |L4.118|
000076  481d              LDR      r0,|L4.236|
000078  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;579
00007c  42b8              CMP      r0,r7                 ;579
00007e  d015              BEQ      |L4.172|
000080  491a              LDR      r1,|L4.236|
000082  f8310014          LDRH     r0,[r1,r4,LSL #1]     ;582
000086  491a              LDR      r1,|L4.240|
000088  f7fffffe          BL       EE_ReadVariable
00008c  4683              MOV      r11,r0                ;582
00008e  f1bb0f01          CMP      r11,#1                ;584
000092  d00b              BEQ      |L4.172|
000094  4915              LDR      r1,|L4.236|
000096  f8310014          LDRH     r0,[r1,r4,LSL #1]     ;587
00009a  4915              LDR      r1,|L4.240|
00009c  8809              LDRH     r1,[r1,#0]            ;587  ; DataVar
00009e  f7fffffe          BL       EE_VerifyPageFullWriteVariable
0000a2  4606              MOV      r6,r0                 ;587
0000a4  2e04              CMP      r6,#4                 ;589
0000a6  d001              BEQ      |L4.172|
0000a8  4630              MOV      r0,r6                 ;591
0000aa  e7cd              B        |L4.72|
                  |L4.172|
0000ac  1c60              ADDS     r0,r4,#1              ;577
0000ae  b284              UXTH     r4,r0                 ;577
                  |L4.176|
0000b0  2c02              CMP      r4,#2                 ;577
0000b2  dbe0              BLT      |L4.118|
0000b4  9800              LDR      r0,[sp,#0]            ;598
0000b6  f7fffffe          BL       FLASH_ErasePage
0000ba  4605              MOV      r5,r0                 ;598
0000bc  2d04              CMP      r5,#4                 ;600
0000be  d001              BEQ      |L4.196|
0000c0  4628              MOV      r0,r5                 ;602
0000c2  e7c1              B        |L4.72|
                  |L4.196|
0000c4  2100              MOVS     r1,#0                 ;606
0000c6  4650              MOV      r0,r10                ;606
0000c8  f7fffffe          BL       FLASH_ProgramHalfWord
0000cc  4605              MOV      r5,r0                 ;606
0000ce  2d04              CMP      r5,#4                 ;608
0000d0  d001              BEQ      |L4.214|
0000d2  4628              MOV      r0,r5                 ;610
0000d4  e7b8              B        |L4.72|
                  |L4.214|
0000d6  4628              MOV      r0,r5                 ;614
0000d8  e7b6              B        |L4.72|
;;;616    
                          ENDP

0000da  0000              DCW      0x0000
                  |L4.220|
                          DCD      0x080103ff
                  |L4.224|
                          DCD      0x08010000
                  |L4.228|
                          DCD      0x08015800
                  |L4.232|
                          DCD      0x08015c00
                  |L4.236|
                          DCD      VirtAddVarTab
                  |L4.240|
                          DCD      DataVar

                          AREA ||i.EE_ReadVariable||, CODE, READONLY, ALIGN=2

                  EE_ReadVariable PROC
;;;274      */
;;;275    uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;276    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;277      uint16_t ValidPage = PAGE0;
000008  2400              MOVS     r4,#0
;;;278      uint16_t AddressValue = 0x5555, ReadStatus = 1;
00000a  f2455855          MOV      r8,#0x5555
00000e  f04f0901          MOV      r9,#1
;;;279      uint32_t Address = 0x08002000, PageStartAddress = 0x08002000;
000012  4d12              LDR      r5,|L5.92|
000014  46aa              MOV      r10,r5
;;;280    
;;;281      /* Get active Page for read operation */
;;;282      ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       EE_FindValidPage
00001c  4604              MOV      r4,r0
;;;283    
;;;284      /* Check if there is no valid page */
;;;285      if (ValidPage == NO_VALID_PAGE)
00001e  2cab              CMP      r4,#0xab
000020  d101              BNE      |L5.38|
                  |L5.34|
;;;286      {
;;;287        return  NO_VALID_PAGE;
;;;288      }
;;;289    
;;;290      /* Get the valid Page start Address */
;;;291      PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
;;;292    
;;;293      /* Get the valid Page end Address */
;;;294      Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
;;;295    
;;;296      /* Check each active page address starting from end */
;;;297      while (Address > (PageStartAddress + 2))
;;;298      {
;;;299        /* Get the current location content to be compared with virtual address */
;;;300        AddressValue = (*(__IO uint16_t*)Address);
;;;301    
;;;302        /* Compare the read address with the virtual address */
;;;303        if (AddressValue == VirtAddress)
;;;304        {
;;;305          /* Get content of Address-2 which is variable value */
;;;306          *Data = (*(__IO uint16_t*)(Address - 2));
;;;307    
;;;308          /* In case variable value is read, reset ReadStatus flag */
;;;309          ReadStatus = 0;
;;;310    
;;;311          break;
;;;312        }
;;;313        else
;;;314        {
;;;315          /* Next address location */
;;;316          Address = Address - 4;
;;;317        }
;;;318      }
;;;319    
;;;320      /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
;;;321      return ReadStatus;
;;;322    }
000022  e8bd87f0          POP      {r4-r10,pc}
                  |L5.38|
000026  480e              LDR      r0,|L5.96|
000028  eb002a84          ADD      r10,r0,r4,LSL #10     ;291
00002c  1c60              ADDS     r0,r4,#1              ;294
00002e  490c              LDR      r1,|L5.96|
000030  1e89              SUBS     r1,r1,#2              ;294
000032  eb012580          ADD      r5,r1,r0,LSL #10      ;294
000036  e00a              B        |L5.78|
                  |L5.56|
000038  f8b58000          LDRH     r8,[r5,#0]            ;300
00003c  45b0              CMP      r8,r6                 ;303
00003e  d105              BNE      |L5.76|
000040  f8350c02          LDRH     r0,[r5,#-2]           ;306
000044  8038              STRH     r0,[r7,#0]            ;306
000046  f04f0900          MOV      r9,#0                 ;309
00004a  e004              B        |L5.86|
                  |L5.76|
00004c  1f2d              SUBS     r5,r5,#4              ;316
                  |L5.78|
00004e  f10a0002          ADD      r0,r10,#2             ;297
000052  4285              CMP      r5,r0                 ;297
000054  d8f0              BHI      |L5.56|
                  |L5.86|
000056  bf00              NOP                            ;311
000058  4648              MOV      r0,r9                 ;321
00005a  e7e2              B        |L5.34|
;;;323    
                          ENDP

                  |L5.92|
                          DCD      0x08002000
                  |L5.96|
                          DCD      0x08015800

                          AREA ||i.EE_VerifyPageFullWriteVariable||, CODE, READONLY, ALIGN=2

                  EE_VerifyPageFullWriteVariable PROC
;;;467      */
;;;468    static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;469    {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
;;;470      FLASH_Status FlashStatus = FLASH_COMPLETE;
000008  2704              MOVS     r7,#4
;;;471      uint16_t ValidPage = PAGE0;
00000a  2500              MOVS     r5,#0
;;;472      uint32_t Address = 0x08010000, PageEndAddress = 0x080107FF;
00000c  4c15              LDR      r4,|L6.100|
00000e  f8df9058          LDR      r9,|L6.104|
;;;473    
;;;474      /* Get valid Page for write operation */
;;;475      ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       EE_FindValidPage
000018  4605              MOV      r5,r0
;;;476    
;;;477      /* Check if there is no valid page */
;;;478      if (ValidPage == NO_VALID_PAGE)
00001a  2dab              CMP      r5,#0xab
00001c  d101              BNE      |L6.34|
                  |L6.30|
;;;479      {
;;;480        return  NO_VALID_PAGE;
;;;481      }
;;;482    
;;;483      /* Get the valid Page start Address */
;;;484      Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
;;;485    
;;;486      /* Get the valid Page end Address */
;;;487      PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
;;;488    
;;;489      /* Check each active page address starting from begining */
;;;490      while (Address < PageEndAddress)
;;;491      {
;;;492        /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
;;;493        if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
;;;494        {
;;;495          /* Set variable data */
;;;496          FlashStatus = FLASH_ProgramHalfWord(Address, Data);
;;;497          /* If program operation was failed, a Flash error code is returned */
;;;498          if (FlashStatus != FLASH_COMPLETE)
;;;499          {
;;;500            return FlashStatus;
;;;501          }
;;;502          /* Set variable virtual address */
;;;503          FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
;;;504          /* Return program operation status */
;;;505          return FlashStatus;
;;;506        }
;;;507        else
;;;508        {
;;;509          /* Next address location */
;;;510          Address = Address + 4;
;;;511        }
;;;512      }
;;;513    
;;;514      /* Return PAGE_FULL in case the valid page is full */
;;;515      return PAGE_FULL;
;;;516    }
00001e  e8bd87f0          POP      {r4-r10,pc}
                  |L6.34|
000022  4812              LDR      r0,|L6.108|
000024  eb002485          ADD      r4,r0,r5,LSL #10      ;484
000028  1c68              ADDS     r0,r5,#1              ;487
00002a  4910              LDR      r1,|L6.108|
00002c  1e89              SUBS     r1,r1,#2              ;487
00002e  eb012980          ADD      r9,r1,r0,LSL #10      ;487
000032  e013              B        |L6.92|
                  |L6.52|
000034  6820              LDR      r0,[r4,#0]            ;493
000036  1c40              ADDS     r0,r0,#1              ;493
000038  b978              CBNZ     r0,|L6.90|
00003a  4641              MOV      r1,r8                 ;496
00003c  4620              MOV      r0,r4                 ;496
00003e  f7fffffe          BL       FLASH_ProgramHalfWord
000042  4607              MOV      r7,r0                 ;496
000044  2f04              CMP      r7,#4                 ;498
000046  d001              BEQ      |L6.76|
000048  4638              MOV      r0,r7                 ;500
00004a  e7e8              B        |L6.30|
                  |L6.76|
00004c  4631              MOV      r1,r6                 ;503
00004e  1ca0              ADDS     r0,r4,#2              ;503
000050  f7fffffe          BL       FLASH_ProgramHalfWord
000054  4607              MOV      r7,r0                 ;503
000056  4638              MOV      r0,r7                 ;505
000058  e7e1              B        |L6.30|
                  |L6.90|
00005a  1d24              ADDS     r4,r4,#4              ;510
                  |L6.92|
00005c  454c              CMP      r4,r9                 ;490
00005e  d3e9              BCC      |L6.52|
000060  2080              MOVS     r0,#0x80              ;515
000062  e7dc              B        |L6.30|
;;;517    
                          ENDP

                  |L6.100|
                          DCD      0x08010000
                  |L6.104|
                          DCD      0x080107ff
                  |L6.108|
                          DCD      0x08015800

                          AREA ||i.EE_WriteVariable||, CODE, READONLY, ALIGN=1

                  EE_WriteVariable PROC
;;;333      */
;;;334    uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;335    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;336      uint16_t Status = 0;
000006  2400              MOVS     r4,#0
;;;337    
;;;338      /* Write the variable virtual address and value in the EEPROM */
;;;339      Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       EE_VerifyPageFullWriteVariable
000010  4604              MOV      r4,r0
;;;340    
;;;341      /* In case the EEPROM active page is full */
;;;342      if (Status == PAGE_FULL)
000012  2c80              CMP      r4,#0x80
000014  d104              BNE      |L7.32|
;;;343      {
;;;344        /* Perform Page transfer */
;;;345        Status = EE_PageTransfer(VirtAddress, Data);
000016  4631              MOV      r1,r6
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       EE_PageTransfer
00001e  4604              MOV      r4,r0
                  |L7.32|
;;;346      }
;;;347    
;;;348      /* Return last operation status */
;;;349      return Status;
000020  4620              MOV      r0,r4
;;;350    }
000022  bd70              POP      {r4-r6,pc}
;;;351    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  BLE_TxBuf
                          %        100
                  BLE_RxBuf
                          %        100

                          AREA ||.data||, DATA, ALIGN=1

                  DataVar
000000  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\eeprom.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_eeprom_c_DataVar____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_eeprom_c_DataVar____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_eeprom_c_DataVar____REVSH|
#line 128
|__asm___8_eeprom_c_DataVar____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
