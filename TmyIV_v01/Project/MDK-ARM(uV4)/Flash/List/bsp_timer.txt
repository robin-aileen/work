; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I.\RTE\_Flash -IC:\Keil\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_timer.crf ..\..\User\bsp\src\bsp_timer.c]
                          THUMB

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;620    #ifdef USE_TIM3
;;;621    void TIM3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;622    #endif
;;;623    
;;;624    #ifdef USE_TIM4
;;;625    void TIM4_IRQHandler(void)
;;;626    #endif
;;;627    
;;;628    #ifdef USE_TIM5
;;;629    void TIM5_IRQHandler(void)
;;;630    #endif
;;;631    {
;;;632        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC1))
000002  2102              MOVS     r1,#2
000004  482a              LDR      r0,|L1.176|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b158              CBZ      r0,|L1.36|
;;;633        {
;;;634            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00000c  2102              MOVS     r1,#2
00000e  4828              LDR      r0,|L1.176|
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;635            TIM_ITConfig(TIM_HARD, TIM_IT_CC1, DISABLE);	/* 禁能CC1中断 */
000014  2200              MOVS     r2,#0
000016  2102              MOVS     r1,#2
000018  4825              LDR      r0,|L1.176|
00001a  f7fffffe          BL       TIM_ITConfig
;;;636    
;;;637            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;638            s_TIM_CallBack1();
00001e  4825              LDR      r0,|L1.180|
000020  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack1
000022  4780              BLX      r0
                  |L1.36|
;;;639        }
;;;640    
;;;641        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC2))
000024  2104              MOVS     r1,#4
000026  4822              LDR      r0,|L1.176|
000028  f7fffffe          BL       TIM_GetITStatus
00002c  b158              CBZ      r0,|L1.70|
;;;642        {
;;;643            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
00002e  2104              MOVS     r1,#4
000030  481f              LDR      r0,|L1.176|
000032  f7fffffe          BL       TIM_ClearITPendingBit
;;;644            TIM_ITConfig(TIM_HARD, TIM_IT_CC2, DISABLE);	/* 禁能CC2中断 */
000036  2200              MOVS     r2,#0
000038  2104              MOVS     r1,#4
00003a  481d              LDR      r0,|L1.176|
00003c  f7fffffe          BL       TIM_ITConfig
;;;645    
;;;646            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;647            s_TIM_CallBack2();
000040  481d              LDR      r0,|L1.184|
000042  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack2
000044  4780              BLX      r0
                  |L1.70|
;;;648        }
;;;649    
;;;650        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC3))
000046  2108              MOVS     r1,#8
000048  4819              LDR      r0,|L1.176|
00004a  f7fffffe          BL       TIM_GetITStatus
00004e  b158              CBZ      r0,|L1.104|
;;;651        {
;;;652            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000050  2108              MOVS     r1,#8
000052  4817              LDR      r0,|L1.176|
000054  f7fffffe          BL       TIM_ClearITPendingBit
;;;653            TIM_ITConfig(TIM_HARD, TIM_IT_CC3, DISABLE);	/* 禁能CC3中断 */
000058  2200              MOVS     r2,#0
00005a  2108              MOVS     r1,#8
00005c  4814              LDR      r0,|L1.176|
00005e  f7fffffe          BL       TIM_ITConfig
;;;654    
;;;655            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;656            s_TIM_CallBack3();
000062  4816              LDR      r0,|L1.188|
000064  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack3
000066  4780              BLX      r0
                  |L1.104|
;;;657        }
;;;658    
;;;659        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC4))
000068  2110              MOVS     r1,#0x10
00006a  4811              LDR      r0,|L1.176|
00006c  f7fffffe          BL       TIM_GetITStatus
000070  b158              CBZ      r0,|L1.138|
;;;660        {
;;;661            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000072  2110              MOVS     r1,#0x10
000074  480e              LDR      r0,|L1.176|
000076  f7fffffe          BL       TIM_ClearITPendingBit
;;;662            TIM_ITConfig(TIM_HARD, TIM_IT_CC4, DISABLE);	/* 禁能CC4中断 */
00007a  2200              MOVS     r2,#0
00007c  2110              MOVS     r1,#0x10
00007e  480c              LDR      r0,|L1.176|
000080  f7fffffe          BL       TIM_ITConfig
;;;663    
;;;664            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;665            s_TIM_CallBack4();
000084  480e              LDR      r0,|L1.192|
000086  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack4
000088  4780              BLX      r0
                  |L1.138|
;;;666        }
;;;667        
;;;668        if ( TIM_GetITStatus(TIM_HARD , TIM_IT_Update) != RESET ) 
00008a  2101              MOVS     r1,#1
00008c  4808              LDR      r0,|L1.176|
00008e  f7fffffe          BL       TIM_GetITStatus
000092  b158              CBZ      r0,|L1.172|
;;;669    	{	
;;;670    		TIM_ClearITPendingBit(TIM_HARD , TIM_FLAG_Update);    
000094  2101              MOVS     r1,#1
000096  4806              LDR      r0,|L1.176|
000098  f7fffffe          BL       TIM_ClearITPendingBit
;;;671            
;;;672            if( timer_lcd_update ) timer_lcd_update--;
00009c  4809              LDR      r0,|L1.196|
00009e  6800              LDR      r0,[r0,#0]  ; timer_lcd_update
0000a0  b120              CBZ      r0,|L1.172|
0000a2  4808              LDR      r0,|L1.196|
0000a4  6800              LDR      r0,[r0,#0]  ; timer_lcd_update
0000a6  1e40              SUBS     r0,r0,#1
0000a8  4906              LDR      r1,|L1.196|
0000aa  6008              STR      r0,[r1,#0]  ; timer_lcd_update
                  |L1.172|
;;;673    //  		 time++;
;;;674    //		 timer_act++;
;;;675    //		 //BSP_wave( );
;;;676    
;;;677    //		 if( timer_sen_scan ) timer_sen_scan--;
;;;678    //		 if( timer_sen_timeout ) timer_sen_timeout--;
;;;679    //		 if( timer_utc_timeout ) timer_utc_timeout--;
;;;680    //		 if( timer_usr ) timer_usr--;
;;;681    	}	
;;;682    }
0000ac  bd10              POP      {r4,pc}
;;;683    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L1.176|
                          DCD      0x40000400
                  |L1.180|
                          DCD      s_TIM_CallBack1
                  |L1.184|
                          DCD      s_TIM_CallBack2
                  |L1.188|
                          DCD      s_TIM_CallBack3
                  |L1.192|
                          DCD      s_TIM_CallBack4
                  |L1.196|
                          DCD      timer_lcd_update

                          AREA ||i.bsp_InitHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitHardTimer PROC
;;;473    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;474    void bsp_InitHardTimer(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;475    {
;;;476    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;477    	uint32_t usPeriod;
;;;478    	uint16_t usPrescaler;
;;;479    	uint32_t uiTIMxCLK;
;;;480    
;;;481      	/* 使能TIM时钟 */
;;;482    	RCC_APB1PeriphClockCmd(TIM_HARD_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;483    
;;;484        /*-----------------------------------------------------------------------
;;;485    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;486    
;;;487    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;488    		PCLK2 = HCLK / 2      (APB2Periph)
;;;489    		PCLK1 = HCLK / 4      (APB1Periph)
;;;490    
;;;491    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;492    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;493    
;;;494    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;495    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;496    
;;;497    	----------------------------------------------------------------------- */
;;;498    	uiTIMxCLK = SystemCoreClock / 2;
00000a  4815              LDR      r0,|L2.96|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  0846              LSRS     r6,r0,#1
;;;499    
;;;500    	usPrescaler = uiTIMxCLK / 1000000 ;	/* 分频到周期 1us */
000010  4814              LDR      r0,|L2.100|
000012  fbb6f0f0          UDIV     r0,r6,r0
000016  b285              UXTH     r5,r0
;;;501    	//usPrescaler = uiTIMxCLK / 1000 ;	/* 分频到周期 1ms */
;;;502    #if defined (USE_TIM2) || defined (USE_TIM5) 
;;;503    	//usPeriod = 0xFFFFFFFF;	/* 407支持32位定时器 */
;;;504    	usPeriod = 0xFFFF;	/* 103支持16位 */
;;;505    #else
;;;506    	usPeriod = 0xFFFF;
000018  f64f74ff          MOV      r4,#0xffff
;;;507    #endif
;;;508    	/* Time base configuration */
;;;509    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
00001c  f8ad4008          STRH     r4,[sp,#8]
;;;510    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
000020  f8ad5004          STRH     r5,[sp,#4]
;;;511    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
000024  2000              MOVS     r0,#0
000026  f8ad000a          STRH     r0,[sp,#0xa]
;;;512    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
00002a  f8ad0006          STRH     r0,[sp,#6]
;;;513    
;;;514    	TIM_TimeBaseInit(TIM_HARD, &TIM_TimeBaseStructure);
00002e  a901              ADD      r1,sp,#4
000030  480d              LDR      r0,|L2.104|
000032  f7fffffe          BL       TIM_TimeBaseInit
;;;515    
;;;516    	//TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;517    
;;;518    	/* TIMx enable counter */
;;;519    	TIM_Cmd(TIM_HARD, ENABLE);
000036  2101              MOVS     r1,#1
000038  480b              LDR      r0,|L2.104|
00003a  f7fffffe          BL       TIM_Cmd
;;;520    
;;;521    	/* 配置TIM定时中断 (Update) */
;;;522    	{
;;;523    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;524    
;;;525    		NVIC_InitStructure.NVIC_IRQChannel = TIM_HARD_IRQn;
00003e  201d              MOVS     r0,#0x1d
000040  f88d0000          STRB     r0,[sp,#0]
;;;526    
;;;527    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;	/* 比串口优先级低 */
000044  2004              MOVS     r0,#4
000046  f88d0001          STRB     r0,[sp,#1]
;;;528    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00004a  2000              MOVS     r0,#0
00004c  f88d0002          STRB     r0,[sp,#2]
;;;529    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000050  2001              MOVS     r0,#1
000052  f88d0003          STRB     r0,[sp,#3]
;;;530    		NVIC_Init(&NVIC_InitStructure);
000056  4668              MOV      r0,sp
000058  f7fffffe          BL       NVIC_Init
;;;531    	}
;;;532    }
00005c  bd7f              POP      {r0-r6,pc}
;;;533    
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      SystemCoreClock
                  |L2.100|
                          DCD      0x000f4240
                  |L2.104|
                          DCD      0x40000400

                          AREA ||i.bsp_StartHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartHardTimer PROC
;;;546    */
;;;547    void bsp_StartHardTimer(uint8_t _CC, uint32_t _uiTimeOut, void * _pCallBack)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;548    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;549        uint32_t cnt_now;
;;;550        uint32_t cnt_tar;
;;;551    
;;;552        /*
;;;553            执行下面这个语句，时长 = 18us (通过逻辑分析仪测量IO翻转)
;;;554            bsp_StartTimer2(3, 500, (void *)test1);
;;;555        */
;;;556        if (_uiTimeOut < 5)
00000a  2f05              CMP      r7,#5
00000c  d300              BCC      |L3.16|
;;;557        {
;;;558            ;
;;;559        }
;;;560        else
;;;561        {
;;;562            _uiTimeOut -= 5;
00000e  1f7f              SUBS     r7,r7,#5
                  |L3.16|
;;;563        }
;;;564    
;;;565        cnt_now = TIM_GetCounter(TIM_HARD);    	/* 读取当前的计数器值 */
000010  4828              LDR      r0,|L3.180|
000012  f7fffffe          BL       TIM_GetCounter
000016  4680              MOV      r8,r0
;;;566        cnt_tar = cnt_now + _uiTimeOut;			/* 计算捕获的计数器值 */
000018  eb080607          ADD      r6,r8,r7
;;;567        if (_CC == 1)
00001c  2c01              CMP      r4,#1
00001e  d10f              BNE      |L3.64|
;;;568        {
;;;569            s_TIM_CallBack1 = (void (*)(void))_pCallBack;
000020  4825              LDR      r0,|L3.184|
000022  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack1
;;;570    
;;;571            TIM_SetCompare1(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC1 */
000024  b2b1              UXTH     r1,r6
000026  4823              LDR      r0,|L3.180|
000028  f7fffffe          BL       TIM_SetCompare1
;;;572            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00002c  2102              MOVS     r1,#2
00002e  4821              LDR      r0,|L3.180|
000030  f7fffffe          BL       TIM_ClearITPendingBit
;;;573    		TIM_ITConfig(TIM_HARD, TIM_IT_CC1, ENABLE);	/* 使能CC1中断 */
000034  2201              MOVS     r2,#1
000036  2102              MOVS     r1,#2
000038  481e              LDR      r0,|L3.180|
00003a  f7fffffe          BL       TIM_ITConfig
00003e  e037              B        |L3.176|
                  |L3.64|
;;;574    
;;;575        }
;;;576        else if (_CC == 2)
000040  2c02              CMP      r4,#2
000042  d10f              BNE      |L3.100|
;;;577        {
;;;578    		s_TIM_CallBack2 = (void (*)(void))_pCallBack;
000044  481d              LDR      r0,|L3.188|
000046  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack2
;;;579    
;;;580            TIM_SetCompare2(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC2 */
000048  b2b1              UXTH     r1,r6
00004a  481a              LDR      r0,|L3.180|
00004c  f7fffffe          BL       TIM_SetCompare2
;;;581    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
000050  2104              MOVS     r1,#4
000052  4818              LDR      r0,|L3.180|
000054  f7fffffe          BL       TIM_ClearITPendingBit
;;;582    		TIM_ITConfig(TIM_HARD, TIM_IT_CC2, ENABLE);	/* 使能CC2中断 */
000058  2201              MOVS     r2,#1
00005a  2104              MOVS     r1,#4
00005c  4815              LDR      r0,|L3.180|
00005e  f7fffffe          BL       TIM_ITConfig
000062  e025              B        |L3.176|
                  |L3.100|
;;;583        }
;;;584        else if (_CC == 3)
000064  2c03              CMP      r4,#3
000066  d10f              BNE      |L3.136|
;;;585        {
;;;586            s_TIM_CallBack3 = (void (*)(void))_pCallBack;
000068  4815              LDR      r0,|L3.192|
00006a  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack3
;;;587    
;;;588            TIM_SetCompare3(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC3 */
00006c  b2b1              UXTH     r1,r6
00006e  4811              LDR      r0,|L3.180|
000070  f7fffffe          BL       TIM_SetCompare3
;;;589            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000074  2108              MOVS     r1,#8
000076  480f              LDR      r0,|L3.180|
000078  f7fffffe          BL       TIM_ClearITPendingBit
;;;590    		TIM_ITConfig(TIM_HARD, TIM_IT_CC3, ENABLE);	/* 使能CC3中断 */
00007c  2201              MOVS     r2,#1
00007e  2108              MOVS     r1,#8
000080  480c              LDR      r0,|L3.180|
000082  f7fffffe          BL       TIM_ITConfig
000086  e013              B        |L3.176|
                  |L3.136|
;;;591        }
;;;592        else if (_CC == 4)
000088  2c04              CMP      r4,#4
00008a  d10f              BNE      |L3.172|
;;;593        {
;;;594            s_TIM_CallBack4 = (void (*)(void))_pCallBack;
00008c  480d              LDR      r0,|L3.196|
00008e  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack4
;;;595    
;;;596            TIM_SetCompare4(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC4 */
000090  b2b1              UXTH     r1,r6
000092  4808              LDR      r0,|L3.180|
000094  f7fffffe          BL       TIM_SetCompare4
;;;597    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000098  2110              MOVS     r1,#0x10
00009a  4806              LDR      r0,|L3.180|
00009c  f7fffffe          BL       TIM_ClearITPendingBit
;;;598    		TIM_ITConfig(TIM_HARD, TIM_IT_CC4, ENABLE);	/* 使能CC4中断 */
0000a0  2201              MOVS     r2,#1
0000a2  2110              MOVS     r1,#0x10
0000a4  4803              LDR      r0,|L3.180|
0000a6  f7fffffe          BL       TIM_ITConfig
0000aa  e001              B        |L3.176|
                  |L3.172|
;;;599        }
;;;600    	else
;;;601        {
;;;602            return;
;;;603        }
;;;604    }
0000ac  e8bd81f0          POP      {r4-r8,pc}
                  |L3.176|
0000b0  bf00              NOP      
0000b2  e7fb              B        |L3.172|
;;;605    #endif
                          ENDP

                  |L3.180|
                          DCD      0x40000400
                  |L3.184|
                          DCD      s_TIM_CallBack1
                  |L3.188|
                          DCD      s_TIM_CallBack2
                  |L3.192|
                          DCD      s_TIM_CallBack3
                  |L3.196|
                          DCD      s_TIM_CallBack4

                          AREA ||.data||, DATA, ALIGN=2

                  s_TIM_CallBack1
                          DCD      0x00000000
                  s_TIM_CallBack2
                          DCD      0x00000000
                  s_TIM_CallBack3
                          DCD      0x00000000
                  s_TIM_CallBack4
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_3cb1b625____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_timer_c_3cb1b625____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_3cb1b625____REVSH|
#line 128
|__asm___11_bsp_timer_c_3cb1b625____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
