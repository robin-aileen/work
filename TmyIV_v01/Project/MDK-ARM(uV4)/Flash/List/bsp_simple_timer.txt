; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_simple_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_simple_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -I..\..\User\delay -I.\RTE\_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_simple_timer.crf ..\..\User\bsp\src\bsp_simple_timer.c]
                          THUMB

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;108    
;;;109    void TIM2_IRQHandler( void )
000000  b510              PUSH     {r4,lr}
;;;110    {
;;;111        //判断是否发生中断
;;;112        if(TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       TIM_GetITStatus
00000a  2801              CMP      r0,#1
00000c  d136              BNE      |L1.124|
;;;113        {
;;;114            //清除EXTI线路挂起位
;;;115            TIM_ClearITPendingBit(TIM2,TIM_IT_Update);
00000e  2101              MOVS     r1,#1
000010  0780              LSLS     r0,r0,#30
000012  f7fffffe          BL       TIM_ClearITPendingBit
;;;116            
;;;117            if( timer_lcd_update ) timer_lcd_update--;
000016  481a              LDR      r0,|L1.128|
000018  6800              LDR      r0,[r0,#0]  ; timer_lcd_update
00001a  b120              CBZ      r0,|L1.38|
00001c  4818              LDR      r0,|L1.128|
00001e  6800              LDR      r0,[r0,#0]  ; timer_lcd_update
000020  1e40              SUBS     r0,r0,#1
000022  4917              LDR      r1,|L1.128|
000024  6008              STR      r0,[r1,#0]  ; timer_lcd_update
                  |L1.38|
;;;118            if( timer_beep ) timer_beep--;
000026  4817              LDR      r0,|L1.132|
000028  6800              LDR      r0,[r0,#0]  ; timer_beep
00002a  b120              CBZ      r0,|L1.54|
00002c  4815              LDR      r0,|L1.132|
00002e  6800              LDR      r0,[r0,#0]  ; timer_beep
000030  1e40              SUBS     r0,r0,#1
000032  4914              LDR      r1,|L1.132|
000034  6008              STR      r0,[r1,#0]  ; timer_beep
                  |L1.54|
;;;119            
;;;120            bsp_KeyScan();
000036  f7fffffe          BL       bsp_KeyScan
;;;121    
;;;122            if( GPIO_ReadInputData( GPIO_PORT_BLE_LINK ) & GPIO_PIN_BLE_LINK )
00003a  4813              LDR      r0,|L1.136|
00003c  f7fffffe          BL       GPIO_ReadInputData
000040  f4004000          AND      r0,r0,#0x8000
000044  b188              CBZ      r0,|L1.106|
;;;123            {
;;;124                if(timer_ble_netledon > 80)
000046  4811              LDR      r0,|L1.140|
000048  7800              LDRB     r0,[r0,#0]  ; timer_ble_netledon
00004a  2850              CMP      r0,#0x50
00004c  dd07              BLE      |L1.94|
;;;125                {
;;;126                    Ble.state.bit.link = 1;
00004e  4810              LDR      r0,|L1.144|
000050  7800              LDRB     r0,[r0,#0]  ; Ble
000052  f0200001          BIC      r0,r0,#1
000056  1c40              ADDS     r0,r0,#1
000058  490d              LDR      r1,|L1.144|
00005a  7008              STRB     r0,[r1,#0]
00005c  e00e              B        |L1.124|
                  |L1.94|
;;;127                }else
;;;128                {
;;;129                    timer_ble_netledon++;
00005e  480b              LDR      r0,|L1.140|
000060  7800              LDRB     r0,[r0,#0]  ; timer_ble_netledon
000062  1c40              ADDS     r0,r0,#1
000064  4909              LDR      r1,|L1.140|
000066  7008              STRB     r0,[r1,#0]
000068  e008              B        |L1.124|
                  |L1.106|
;;;130                }
;;;131            }else
;;;132            {
;;;133                timer_ble_netledon = 0;
00006a  2000              MOVS     r0,#0
00006c  4907              LDR      r1,|L1.140|
00006e  7008              STRB     r0,[r1,#0]
;;;134                Ble.state.bit.link = 0;
000070  4807              LDR      r0,|L1.144|
000072  7800              LDRB     r0,[r0,#0]  ; Ble
000074  f0200001          BIC      r0,r0,#1
000078  4905              LDR      r1,|L1.144|
00007a  7008              STRB     r0,[r1,#0]
                  |L1.124|
;;;135            }
;;;136        }
;;;137    }
00007c  bd10              POP      {r4,pc}
;;;138    
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      timer_lcd_update
                  |L1.132|
                          DCD      timer_beep
                  |L1.136|
                          DCD      0x40010800
                  |L1.140|
                          DCD      timer_ble_netledon
                  |L1.144|
                          DCD      Ble

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;140    //1s 中断
;;;141    void TIM3_IRQHandler( void )
000000  b510              PUSH     {r4,lr}
;;;142    {
;;;143        //判断是否发生中断
;;;144        if(TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)
000002  2101              MOVS     r1,#1
000004  4810              LDR      r0,|L2.72|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  2801              CMP      r0,#1
00000c  d11b              BNE      |L2.70|
;;;145        {
;;;146            //清除EXTI线路挂起位
;;;147            TIM_ClearITPendingBit(TIM3,TIM_IT_Update);
00000e  2101              MOVS     r1,#1
000010  480d              LDR      r0,|L2.72|
000012  f7fffffe          BL       TIM_ClearITPendingBit
;;;148            
;;;149            if( timer_pedal_up ) timer_pedal_up++;
000016  480d              LDR      r0,|L2.76|
000018  7800              LDRB     r0,[r0,#0]  ; timer_pedal_up
00001a  b120              CBZ      r0,|L2.38|
00001c  480b              LDR      r0,|L2.76|
00001e  7800              LDRB     r0,[r0,#0]  ; timer_pedal_up
000020  1c40              ADDS     r0,r0,#1
000022  490a              LDR      r1,|L2.76|
000024  7008              STRB     r0,[r1,#0]
                  |L2.38|
;;;150    	    if( timer_pedal_down ) timer_pedal_down++;
000026  480a              LDR      r0,|L2.80|
000028  7800              LDRB     r0,[r0,#0]  ; timer_pedal_down
00002a  b120              CBZ      r0,|L2.54|
00002c  4808              LDR      r0,|L2.80|
00002e  7800              LDRB     r0,[r0,#0]  ; timer_pedal_down
000030  1c40              ADDS     r0,r0,#1
000032  4907              LDR      r1,|L2.80|
000034  7008              STRB     r0,[r1,#0]
                  |L2.54|
;;;151            if( timer_dg_init ) timer_dg_init--;
000036  4807              LDR      r0,|L2.84|
000038  7800              LDRB     r0,[r0,#0]  ; timer_dg_init
00003a  b120              CBZ      r0,|L2.70|
00003c  4805              LDR      r0,|L2.84|
00003e  7800              LDRB     r0,[r0,#0]  ; timer_dg_init
000040  1e40              SUBS     r0,r0,#1
000042  4904              LDR      r1,|L2.84|
000044  7008              STRB     r0,[r1,#0]
                  |L2.70|
;;;152    
;;;153            // if( GPIO_ReadInputData( GPIO_PORT_BLE_LINK ) & GPIO_PIN_BLE_LINK )
;;;154            // {
;;;155            //     if(timer_ble_netledon > 2)
;;;156            //     {
;;;157            //         Ble.state.bit.link = 1;
;;;158            //     }else
;;;159            //     {
;;;160            //         timer_ble_netledon++;
;;;161            //     }
;;;162            // }else
;;;163            // {
;;;164            //     timer_ble_netledon = 0;
;;;165            //     Ble.state.bit.link = 0;
;;;166            // }
;;;167        }
;;;168    }
000046  bd10              POP      {r4,pc}
;;;169    
                          ENDP

                  |L2.72|
                          DCD      0x40000400
                  |L2.76|
                          DCD      timer_pedal_up
                  |L2.80|
                          DCD      timer_pedal_down
                  |L2.84|
                          DCD      timer_dg_init

                          AREA ||i.TimeInit||, CODE, READONLY, ALIGN=1

                  TimeInit PROC
;;;101    //100ms 定时
;;;102    void TimeInit( void )
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104        timer2_init( );
000002  f7fffffe          BL       timer2_init
;;;105        timer3_init( );
000006  f7fffffe          BL       timer3_init
;;;106        
;;;107    }
00000a  bd10              POP      {r4,pc}
;;;108    
                          ENDP


                          AREA ||i.timer2_init||, CODE, READONLY, ALIGN=1

                  timer2_init PROC
;;;27     //100ms 定时
;;;28     void timer2_init( void )
000000  b51f              PUSH     {r0-r4,lr}
;;;29     {
;;;30         TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;31         NVIC_InitTypeDef NVIC_InitStructure;
;;;32     
;;;33         //打开相应的时钟
;;;34         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;35     
;;;36         //清除TIM2的中断待处理位:TIM 中断源
;;;37         TIM_ClearITPendingBit(TIM2,TIM_IT_Update);
00000a  2101              MOVS     r1,#1
00000c  0788              LSLS     r0,r1,#30
00000e  f7fffffe          BL       TIM_ClearITPendingBit
;;;38     
;;;39         //设置定时器TIM_TimeBaseInit初始化定时器的时钟基数
;;;40     //    TIM_TimeBaseStructure.TIM_Period = 480-1;//2000 -1;
;;;41     //    TIM_TimeBaseStructure.TIM_Prescaler = 10000-1;//36000 -1;
;;;42         TIM_TimeBaseStructure.TIM_Period = 10000-1;//2000 -1;
000012  f242700f          MOV      r0,#0x270f
000016  f8ad0008          STRH     r0,[sp,#8]
;;;43         TIM_TimeBaseStructure.TIM_Prescaler = 71;
00001a  2047              MOVS     r0,#0x47
00001c  f8ad0004          STRH     r0,[sp,#4]
;;;44         TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
000020  2000              MOVS     r0,#0
000022  f8ad000a          STRH     r0,[sp,#0xa]
;;;45         TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000026  f8ad0006          STRH     r0,[sp,#6]
;;;46         TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
00002a  a901              ADD      r1,sp,#4
00002c  f04f4080          MOV      r0,#0x40000000
000030  f7fffffe          BL       TIM_TimeBaseInit
;;;47     
;;;48         //使能指定的TIM中断
;;;49         TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE );
000034  2201              MOVS     r2,#1
000036  4611              MOV      r1,r2
000038  0790              LSLS     r0,r2,#30
00003a  f7fffffe          BL       TIM_ITConfig
;;;50     		
;;;51     		//TIM_SelectOutputTrigger(TIM2, TIM_TRGOSource_Update);  //选择TIM2的update事件更新为触发源 用于ADC采集
;;;52     		
;;;53         //使能TIM定时器
;;;54         TIM_Cmd(TIM2, ENABLE);
00003e  2101              MOVS     r1,#1
000040  0788              LSLS     r0,r1,#30
000042  f7fffffe          BL       TIM_Cmd
;;;55     
;;;56         //设置NVIC
;;;57         //NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
;;;58         NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
000046  201c              MOVS     r0,#0x1c
000048  f88d0000          STRB     r0,[sp,#0]
;;;59         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
00004c  2000              MOVS     r0,#0
00004e  f88d0001          STRB     r0,[sp,#1]
;;;60         NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000052  2001              MOVS     r0,#1
000054  f88d0002          STRB     r0,[sp,#2]
;;;61         //NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
;;;62         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000058  f88d0003          STRB     r0,[sp,#3]
;;;63         NVIC_Init(&NVIC_InitStructure);
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       NVIC_Init
;;;64     }
000062  bd1f              POP      {r0-r4,pc}
;;;65     
                          ENDP


                          AREA ||i.timer3_init||, CODE, READONLY, ALIGN=2

                  timer3_init PROC
;;;66     //1s 定时
;;;67     void timer3_init( void )
000000  b51f              PUSH     {r0-r4,lr}
;;;68     {
;;;69         TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;70         NVIC_InitTypeDef NVIC_InitStructure;
;;;71     
;;;72         //打开相应的时钟
;;;73         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
000002  2101              MOVS     r1,#1
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;74     
;;;75         //清除TIM3的中断待处理位:TIM 中断源
;;;76         TIM_ClearITPendingBit(TIM3,TIM_IT_Update);
00000a  2101              MOVS     r1,#1
00000c  4817              LDR      r0,|L5.108|
00000e  f7fffffe          BL       TIM_ClearITPendingBit
;;;77     
;;;78         //设置定时器TIM_TimeBaseInit初始化定时器的时钟基数
;;;79         TIM_TimeBaseStructure.TIM_Period = 4800-1;//2000 -1;
000012  f24120bf          MOV      r0,#0x12bf
000016  f8ad0008          STRH     r0,[sp,#8]
;;;80         TIM_TimeBaseStructure.TIM_Prescaler = 10000-1;//36000 -1;
00001a  f242700f          MOV      r0,#0x270f
00001e  f8ad0004          STRH     r0,[sp,#4]
;;;81         TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
000022  2000              MOVS     r0,#0
000024  f8ad000a          STRH     r0,[sp,#0xa]
;;;82         TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000028  f8ad0006          STRH     r0,[sp,#6]
;;;83         TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
00002c  a901              ADD      r1,sp,#4
00002e  480f              LDR      r0,|L5.108|
000030  f7fffffe          BL       TIM_TimeBaseInit
;;;84     
;;;85         //使能指定的TIM中断
;;;86         TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE );
000034  2201              MOVS     r2,#1
000036  4611              MOV      r1,r2
000038  480c              LDR      r0,|L5.108|
00003a  f7fffffe          BL       TIM_ITConfig
;;;87     		
;;;88     		TIM_SelectOutputTrigger(TIM3, TIM_TRGOSource_Update);  //选择TIM3的update事件更新为触发源 用于ADC采集
00003e  2120              MOVS     r1,#0x20
000040  480a              LDR      r0,|L5.108|
000042  f7fffffe          BL       TIM_SelectOutputTrigger
;;;89     	
;;;90         //使能TIM定时器
;;;91         TIM_Cmd(TIM3, ENABLE);
000046  2101              MOVS     r1,#1
000048  4808              LDR      r0,|L5.108|
00004a  f7fffffe          BL       TIM_Cmd
;;;92     
;;;93         NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;        
00004e  201d              MOVS     r0,#0x1d
000050  f88d0000          STRB     r0,[sp,#0]
;;;94         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000054  2000              MOVS     r0,#0
000056  f88d0001          STRB     r0,[sp,#1]
;;;95         NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;     
00005a  f88d0002          STRB     r0,[sp,#2]
;;;96         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
00005e  2001              MOVS     r0,#1
000060  f88d0003          STRB     r0,[sp,#3]
;;;97         NVIC_Init(&NVIC_InitStructure);
000064  4668              MOV      r0,sp
000066  f7fffffe          BL       NVIC_Init
;;;98         
;;;99     }
00006a  bd1f              POP      {r0-r4,pc}
;;;100    
                          ENDP

                  |L5.108|
                          DCD      0x40000400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  BLE_TxBuf
                          %        100
                  BLE_RxBuf
                          %        100

                          AREA ||.data||, DATA, ALIGN=0

                  timer_pedal_up
000000  00                DCB      0x00
                  timer_pedal_down
000001  00                DCB      0x00
                  timer_dg_init
000002  00                DCB      0x00
                  timer_ble_netledon
000003  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_simple_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_bsp_simple_timer_c_529f73dd____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_bsp_simple_timer_c_529f73dd____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_bsp_simple_timer_c_529f73dd____REVSH|
#line 128
|__asm___18_bsp_simple_timer_c_529f73dd____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
