; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_lcd.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -I..\..\User\delay -I.\RTE\_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_uart_lcd.crf ..\..\User\app\bsp_uart_lcd.c]
                          THUMB

                          AREA ||i.LCD_GetScreenId||, CODE, READONLY, ALIGN=2

                  LCD_GetScreenId PROC
;;;53     
;;;54     uint16_t LCD_GetScreenId( void )
000000  4801              LDR      r0,|L1.8|
;;;55     {
;;;56         return current_screen_id;
000002  8800              LDRH     r0,[r0,#0]  ; current_screen_id
;;;57     }
000004  4770              BX       lr
;;;58     
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      current_screen_id

                          AREA ||i.LCD_ParaInit||, CODE, READONLY, ALIGN=2

                  LCD_ParaInit PROC
;;;338    
;;;339    void LCD_ParaInit( void )
000000  b508              PUSH     {r3,lr}
;;;340    {
;;;341        //方向
;;;342        if( Motor.state.bit.dir == UP )
000002  483f              LDR      r0,|L2.256|
000004  7880              LDRB     r0,[r0,#2]  ; Motor
000006  f0000001          AND      r0,r0,#1
00000a  b928              CBNZ     r0,|L2.24|
;;;343        {
;;;344            SetTextValue(0,18,"上升");
00000c  a23d              ADR      r2,|L2.260|
00000e  2112              MOVS     r1,#0x12
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       SetTextValue
000016  e004              B        |L2.34|
                  |L2.24|
;;;345        }else
;;;346        {
;;;347            SetTextValue(0,18,"下降");
000018  a23c              ADR      r2,|L2.268|
00001a  2112              MOVS     r1,#0x12
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       SetTextValue
                  |L2.34|
;;;348        }
;;;349        
;;;350        //速度
;;;351        SetTextValue(0, 16,"停止\x00");
000022  a23c              ADR      r2,|L2.276|
000024  2110              MOVS     r1,#0x10
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       SetTextValue
;;;352        
;;;353        //频率
;;;354        SetTextValue(0, 17,"0");
00002c  a23b              ADR      r2,|L2.284|
00002e  2111              MOVS     r1,#0x11
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       SetTextValue
;;;355        
;;;356        //最大步数
;;;357        if( Motor.max_step == MAX_STEP_18ML )                                                            //正弦波控件
000036  4832              LDR      r0,|L2.256|
000038  6880              LDR      r0,[r0,#8]  ; Motor
00003a  4939              LDR      r1,|L2.288|
00003c  4288              CMP      r0,r1
00003e  d109              BNE      |L2.84|
;;;358        {
;;;359            SetTextInt32(0, 20, Motor.max_step, 0, 1); //显示最大步数
000040  2001              MOVS     r0,#1
000042  9000              STR      r0,[sp,#0]
000044  482e              LDR      r0,|L2.256|
000046  2300              MOVS     r3,#0
000048  2114              MOVS     r1,#0x14
00004a  6882              LDR      r2,[r0,#8]  ; Motor
00004c  4618              MOV      r0,r3
00004e  f7fffffe          BL       SetTextInt32
000052  e00d              B        |L2.112|
                  |L2.84|
;;;360        }else if( Motor.max_step == MAX_STEP_22ML )                                                            //正弦波控件
000054  482a              LDR      r0,|L2.256|
000056  6880              LDR      r0,[r0,#8]  ; Motor
000058  4932              LDR      r1,|L2.292|
00005a  4288              CMP      r0,r1
00005c  d108              BNE      |L2.112|
;;;361        {
;;;362            SetTextInt32(0, 20, Motor.max_step, 0, 1); //显示最大步数
00005e  2001              MOVS     r0,#1
000060  9000              STR      r0,[sp,#0]
000062  4827              LDR      r0,|L2.256|
000064  2300              MOVS     r3,#0
000066  2114              MOVS     r1,#0x14
000068  6882              LDR      r2,[r0,#8]  ; Motor
00006a  4618              MOV      r0,r3
00006c  f7fffffe          BL       SetTextInt32
                  |L2.112|
;;;363        }
;;;364        
;;;365        //步数
;;;366        SetTextInt32(0, 19, Motor.counter_step, 0, 1);
000070  2001              MOVS     r0,#1
000072  9000              STR      r0,[sp,#0]
000074  4822              LDR      r0,|L2.256|
000076  2300              MOVS     r3,#0
000078  2113              MOVS     r1,#0x13
00007a  6842              LDR      r2,[r0,#4]  ; Motor
00007c  4618              MOV      r0,r3
00007e  f7fffffe          BL       SetTextInt32
;;;367        
;;;368        //默认参数
;;;369        Tmy.Key.zdpk = 1;
000082  4829              LDR      r0,|L2.296|
000084  7980              LDRB     r0,[r0,#6]  ; Tmy
000086  f0200002          BIC      r0,r0,#2
00008a  1c80              ADDS     r0,r0,#2
00008c  4926              LDR      r1,|L2.296|
00008e  7188              STRB     r0,[r1,#6]
;;;370        Tmy.Key.hx = 1;
000090  4608              MOV      r0,r1
000092  7980              LDRB     r0,[r0,#6]  ; Tmy
000094  f0200001          BIC      r0,r0,#1
000098  1c40              ADDS     r0,r0,#1
00009a  7188              STRB     r0,[r1,#6]
;;;371        Tmy.Key.zh = 0;
00009c  4608              MOV      r0,r1
00009e  7980              LDRB     r0,[r0,#6]  ; Tmy
0000a0  f0200008          BIC      r0,r0,#8
0000a4  7188              STRB     r0,[r1,#6]
;;;372        Motor.gear = GEAR_SLOW_NORMAL_FAST; //慢中快速
0000a6  2002              MOVS     r0,#2
0000a8  4915              LDR      r1,|L2.256|
0000aa  7048              STRB     r0,[r1,#1]
;;;373        SetButtonValue(0, 1, 1);//自动排空，默认有效
0000ac  2201              MOVS     r2,#1
0000ae  4611              MOV      r1,r2
0000b0  2000              MOVS     r0,#0
0000b2  f7fffffe          BL       SetButtonValue
;;;374        SetButtonValue(0, 3, 1);//回吸，默认有效
0000b6  2201              MOVS     r2,#1
0000b8  2103              MOVS     r1,#3
0000ba  2000              MOVS     r0,#0
0000bc  f7fffffe          BL       SetButtonValue
;;;375        SetButtonValue(0, 21, 1);//1.8ml，默认有效
0000c0  2201              MOVS     r2,#1
0000c2  2115              MOVS     r1,#0x15
0000c4  2000              MOVS     r0,#0
0000c6  f7fffffe          BL       SetButtonValue
;;;376        SetButtonValue(0, 5, 0);//
0000ca  2200              MOVS     r2,#0
0000cc  2105              MOVS     r1,#5
0000ce  4610              MOV      r0,r2
0000d0  f7fffffe          BL       SetButtonValue
;;;377        SetButtonValue(0, 6, 0);//
0000d4  2200              MOVS     r2,#0
0000d6  2106              MOVS     r1,#6
0000d8  4610              MOV      r0,r2
0000da  f7fffffe          BL       SetButtonValue
;;;378        SetButtonValue(0, 7, 1);//慢中快速，默认有效
0000de  2201              MOVS     r2,#1
0000e0  2107              MOVS     r1,#7
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       SetButtonValue
;;;379        SetButtonValue(0, 8, 0);//
0000e8  2200              MOVS     r2,#0
0000ea  2108              MOVS     r1,#8
0000ec  4610              MOV      r0,r2
0000ee  f7fffffe          BL       SetButtonValue
;;;380        
;;;381        AnimationPlayFrame(0,32,0);//显示wifi图标
0000f2  2200              MOVS     r2,#0
0000f4  2120              MOVS     r1,#0x20
0000f6  4610              MOV      r0,r2
0000f8  f7fffffe          BL       AnimationPlayFrame
;;;382    
;;;383        // SetControlVisiable(0, 10, 0);
;;;384        // SetControlVisiable(0, 11, 0);
;;;385        // SetControlVisiable(0, 33, 0);
;;;386        // SetControlVisiable(0, 34, 0);
;;;387    }
0000fc  bd08              POP      {r3,pc}
;;;388    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L2.256|
                          DCD      Motor
                  |L2.260|
000104  c9cfc9fd          DCB      201,207,201,253,0
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L2.268|
00010c  cfc2bdb5          DCB      207,194,189,181,0
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L2.276|
000114  cda3d6b9          DCB      205,163,214,185,0
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L2.284|
00011c  3000              DCB      "0",0
00011e  00                DCB      0
00011f  00                DCB      0
                  |L2.288|
                          DCD      0x0003b97e
                  |L2.292|
                          DCD      0x0004af8e
                  |L2.296|
                          DCD      Tmy

                          AREA ||i.NOTIFYHandShake||, CODE, READONLY, ALIGN=1

                  NOTIFYHandShake PROC
;;;333    */
;;;334    void NOTIFYHandShake()
000000  b510              PUSH     {r4,lr}
;;;335    {
;;;336       SetButtonValue(3,2,1);
000002  2201              MOVS     r2,#1
000004  2102              MOVS     r1,#2
000006  2003              MOVS     r0,#3
000008  f7fffffe          BL       SetButtonValue
;;;337    }
00000c  bd10              POP      {r4,pc}
;;;338    
                          ENDP


                          AREA ||i.NotifyButton||, CODE, READONLY, ALIGN=2

                  NotifyButton PROC
;;;549    */
;;;550    void NotifyButton(uint16 screen_id, uint16 control_id, uint8  state)
000000  b5f8              PUSH     {r3-r7,lr}
;;;551    { 
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;552        //SetBuzzer( 10 ); //蜂鸣器
;;;553        
;;;554        
;;;555        //主页面一
;;;556        if(screen_id == 0)
000008  2e00              CMP      r6,#0
00000a  d109              BNE      |L4.32|
;;;557        {
;;;558            if(control_id==1) //自动排空
00000c  2c01              CMP      r4,#1
00000e  d10f              BNE      |L4.48|
;;;559            {
;;;560                if( state ) //按下
000010  b13d              CBZ      r5,|L4.34|
;;;561                {
;;;562                    //AnimationPlayFrame(0,4,2);//显示图标
;;;563                    Tmy.Key.zdpk = 1;
000012  48a1              LDR      r0,|L4.664|
000014  7980              LDRB     r0,[r0,#6]  ; Tmy
000016  f0200002          BIC      r0,r0,#2
00001a  1c80              ADDS     r0,r0,#2
00001c  499e              LDR      r1,|L4.664|
00001e  7188              STRB     r0,[r1,#6]
                  |L4.32|
000020  e0cd              B        |L4.446|
                  |L4.34|
;;;564                }else
;;;565                {
;;;566                    //AnimationPlayFrame(0,4,0);//显示图标
;;;567                    Tmy.Key.zdpk = 0;
000022  489d              LDR      r0,|L4.664|
000024  7980              LDRB     r0,[r0,#6]  ; Tmy
000026  f0200002          BIC      r0,r0,#2
00002a  499b              LDR      r1,|L4.664|
00002c  7188              STRB     r0,[r1,#6]
00002e  e0c6              B        |L4.446|
                  |L4.48|
;;;568                }                                                        
;;;569            }else
;;;570            if(control_id==2) //二次排空 
000030  2c02              CMP      r4,#2
000032  d10f              BNE      |L4.84|
;;;571            {
;;;572                if( state ) //按下
000034  b13d              CBZ      r5,|L4.70|
;;;573                {
;;;574                    Tmy.Key.ecpk = 1;
000036  4898              LDR      r0,|L4.664|
000038  7980              LDRB     r0,[r0,#6]  ; Tmy
00003a  f0200004          BIC      r0,r0,#4
00003e  1d00              ADDS     r0,r0,#4
000040  4995              LDR      r1,|L4.664|
000042  7188              STRB     r0,[r1,#6]
000044  e0bb              B        |L4.446|
                  |L4.70|
;;;575                }else
;;;576                {
;;;577                    Tmy.Key.ecpk = 0;
000046  4894              LDR      r0,|L4.664|
000048  7980              LDRB     r0,[r0,#6]  ; Tmy
00004a  f0200004          BIC      r0,r0,#4
00004e  4992              LDR      r1,|L4.664|
000050  7188              STRB     r0,[r1,#6]
000052  e0b4              B        |L4.446|
                  |L4.84|
;;;578                }                                                        
;;;579            }else
;;;580            if(control_id==3) //回吸
000054  2c03              CMP      r4,#3
000056  d10f              BNE      |L4.120|
;;;581            {
;;;582                if( state ) //按下
000058  b13d              CBZ      r5,|L4.106|
;;;583                {
;;;584                    Tmy.Key.hx = 1;
00005a  488f              LDR      r0,|L4.664|
00005c  7980              LDRB     r0,[r0,#6]  ; Tmy
00005e  f0200001          BIC      r0,r0,#1
000062  1c40              ADDS     r0,r0,#1
000064  498c              LDR      r1,|L4.664|
000066  7188              STRB     r0,[r1,#6]
000068  e0a9              B        |L4.446|
                  |L4.106|
;;;585                }else
;;;586                {
;;;587                    Tmy.Key.hx = 0;
00006a  488b              LDR      r0,|L4.664|
00006c  7980              LDRB     r0,[r0,#6]  ; Tmy
00006e  f0200001          BIC      r0,r0,#1
000072  4989              LDR      r1,|L4.664|
000074  7188              STRB     r0,[r1,#6]
000076  e0a2              B        |L4.446|
                  |L4.120|
;;;588                }                                                        
;;;589            }else
;;;590            if(control_id==4) //方向
000078  2c04              CMP      r4,#4
00007a  d108              BNE      |L4.142|
;;;591            {
;;;592                if( state ) //按下
00007c  b11d              CBZ      r5,|L4.134|
;;;593                {
;;;594                    MOTOR_SetDir( UP );//
00007e  2000              MOVS     r0,#0
000080  f7fffffe          BL       MOTOR_SetDir
000084  e09b              B        |L4.446|
                  |L4.134|
;;;595                    //SetTextValue(0,18,"上升");
;;;596                }else
;;;597                {
;;;598                    MOTOR_SetDir( DOWN );
000086  2001              MOVS     r0,#1
000088  f7fffffe          BL       MOTOR_SetDir
00008c  e097              B        |L4.446|
                  |L4.142|
;;;599                    //SetTextValue(0,18,"下降");
;;;600                }                                                        
;;;601            }else
;;;602            if(control_id==6)
00008e  2c06              CMP      r4,#6
000090  d103              BNE      |L4.154|
;;;603            {
;;;604                Motor.gear = GEAR_SLOWEST; //慢慢速          
000092  2000              MOVS     r0,#0
000094  4981              LDR      r1,|L4.668|
000096  7048              STRB     r0,[r1,#1]
000098  e091              B        |L4.446|
                  |L4.154|
;;;605            }
;;;606            else if(control_id==5)
00009a  2c05              CMP      r4,#5
00009c  d103              BNE      |L4.166|
;;;607            {
;;;608                Motor.gear = GEAR_SLOW; //常慢速
00009e  2001              MOVS     r0,#1
0000a0  497e              LDR      r1,|L4.668|
0000a2  7048              STRB     r0,[r1,#1]
0000a4  e08b              B        |L4.446|
                  |L4.166|
;;;609            }else if(control_id==7)
0000a6  2c07              CMP      r4,#7
0000a8  d103              BNE      |L4.178|
;;;610            {
;;;611                Motor.gear = GEAR_SLOW_NORMAL_FAST; //慢中快速
0000aa  2002              MOVS     r0,#2
0000ac  497b              LDR      r1,|L4.668|
0000ae  7048              STRB     r0,[r1,#1]
0000b0  e085              B        |L4.446|
                  |L4.178|
;;;612            }  else if(control_id==8) 
0000b2  2c08              CMP      r4,#8
0000b4  d103              BNE      |L4.190|
;;;613            {
;;;614                Motor.gear = GEAR_SLOW_FAST_FASTEST; //慢快最快速
0000b6  2003              MOVS     r0,#3
0000b8  4978              LDR      r1,|L4.668|
0000ba  7048              STRB     r0,[r1,#1]
0000bc  e07f              B        |L4.446|
                  |L4.190|
;;;615            }else if(control_id==21) //注射器容量1.8ml
0000be  2c15              CMP      r4,#0x15
0000c0  d10c              BNE      |L4.220|
;;;616            {
;;;617                Motor.max_step = MAX_STEP_18ML;
0000c2  4877              LDR      r0,|L4.672|
0000c4  4975              LDR      r1,|L4.668|
0000c6  6088              STR      r0,[r1,#8]  ; Motor
;;;618                SetTextInt32(0, 20, Motor.max_step, 0, 1); //显示最大步数                                                      
0000c8  2001              MOVS     r0,#1
0000ca  9000              STR      r0,[sp,#0]
0000cc  4608              MOV      r0,r1
0000ce  2300              MOVS     r3,#0
0000d0  2114              MOVS     r1,#0x14
0000d2  6882              LDR      r2,[r0,#8]  ; Motor
0000d4  4618              MOV      r0,r3
0000d6  f7fffffe          BL       SetTextInt32
0000da  e070              B        |L4.446|
                  |L4.220|
;;;619            }else if(control_id==22) //注射器容量2.2ml
0000dc  2c16              CMP      r4,#0x16
0000de  d10c              BNE      |L4.250|
;;;620            {
;;;621                Motor.max_step = MAX_STEP_22ML;
0000e0  4870              LDR      r0,|L4.676|
0000e2  496e              LDR      r1,|L4.668|
0000e4  6088              STR      r0,[r1,#8]  ; Motor
;;;622                SetTextInt32(0, 20, Motor.max_step, 0, 1); //显示最大步数                                                      
0000e6  2001              MOVS     r0,#1
0000e8  9000              STR      r0,[sp,#0]
0000ea  4608              MOV      r0,r1
0000ec  2300              MOVS     r3,#0
0000ee  2114              MOVS     r1,#0x14
0000f0  6882              LDR      r2,[r0,#8]  ; Motor
0000f2  4618              MOV      r0,r3
0000f4  f7fffffe          BL       SetTextInt32
0000f8  e061              B        |L4.446|
                  |L4.250|
;;;623            }else if(control_id==28) //培训
0000fa  2c1c              CMP      r4,#0x1c
0000fc  d15f              BNE      |L4.446|
;;;624            {
;;;625                if( state ) //按下
0000fe  b37d              CBZ      r5,|L4.352|
;;;626                {
;;;627                    Tmy.Key.px = 1;
000100  4865              LDR      r0,|L4.664|
000102  7980              LDRB     r0,[r0,#6]  ; Tmy
000104  f0200020          BIC      r0,r0,#0x20
000108  3020              ADDS     r0,r0,#0x20
00010a  4963              LDR      r1,|L4.664|
00010c  7188              STRB     r0,[r1,#6]
;;;628    
;;;629                    
;;;630                    //显示控件
;;;631                    SetControlVisiable(0, 16, 1);
00010e  2201              MOVS     r2,#1
000110  2110              MOVS     r1,#0x10
000112  2000              MOVS     r0,#0
000114  f7fffffe          BL       SetControlVisiable
;;;632                    SetControlVisiable(0, 17, 1);
000118  2201              MOVS     r2,#1
00011a  2111              MOVS     r1,#0x11
00011c  2000              MOVS     r0,#0
00011e  f7fffffe          BL       SetControlVisiable
;;;633                    SetControlVisiable(0, 18, 1);
000122  2201              MOVS     r2,#1
000124  2112              MOVS     r1,#0x12
000126  2000              MOVS     r0,#0
000128  f7fffffe          BL       SetControlVisiable
;;;634                    SetControlVisiable(0, 19, 1);
00012c  2201              MOVS     r2,#1
00012e  2113              MOVS     r1,#0x13
000130  2000              MOVS     r0,#0
000132  f7fffffe          BL       SetControlVisiable
;;;635                    SetControlVisiable(0, 20, 1);
000136  2201              MOVS     r2,#1
000138  2114              MOVS     r1,#0x14
00013a  2000              MOVS     r0,#0
00013c  f7fffffe          BL       SetControlVisiable
;;;636    
;;;637                    SetControlVisiable(0, 25, 1);
000140  2201              MOVS     r2,#1
000142  2119              MOVS     r1,#0x19
000144  2000              MOVS     r0,#0
000146  f7fffffe          BL       SetControlVisiable
;;;638                    SetControlVisiable(0, 26, 1);
00014a  2201              MOVS     r2,#1
00014c  211a              MOVS     r1,#0x1a
00014e  2000              MOVS     r0,#0
000150  f7fffffe          BL       SetControlVisiable
;;;639                    SetControlVisiable(0, 29, 1);
000154  2201              MOVS     r2,#1
000156  211d              MOVS     r1,#0x1d
000158  2000              MOVS     r0,#0
00015a  f7fffffe          BL       SetControlVisiable
00015e  e02e              B        |L4.446|
                  |L4.352|
000160  e7ff              B        |L4.354|
                  |L4.354|
;;;640                }else
;;;641                {
;;;642                    Tmy.Key.px = 0;
000162  484d              LDR      r0,|L4.664|
000164  7980              LDRB     r0,[r0,#6]  ; Tmy
000166  f0200020          BIC      r0,r0,#0x20
00016a  494b              LDR      r1,|L4.664|
00016c  7188              STRB     r0,[r1,#6]
;;;643    
;;;644                    //隐藏控件
;;;645                    SetControlVisiable(0, 16, 0);
00016e  2200              MOVS     r2,#0
000170  2110              MOVS     r1,#0x10
000172  4610              MOV      r0,r2
000174  f7fffffe          BL       SetControlVisiable
;;;646                    SetControlVisiable(0, 17, 0);
000178  2200              MOVS     r2,#0
00017a  2111              MOVS     r1,#0x11
00017c  4610              MOV      r0,r2
00017e  f7fffffe          BL       SetControlVisiable
;;;647                    SetControlVisiable(0, 18, 0);
000182  2200              MOVS     r2,#0
000184  2112              MOVS     r1,#0x12
000186  4610              MOV      r0,r2
000188  f7fffffe          BL       SetControlVisiable
;;;648                    SetControlVisiable(0, 19, 0);
00018c  2200              MOVS     r2,#0
00018e  2113              MOVS     r1,#0x13
000190  4610              MOV      r0,r2
000192  f7fffffe          BL       SetControlVisiable
;;;649                    SetControlVisiable(0, 20, 0);
000196  2200              MOVS     r2,#0
000198  2114              MOVS     r1,#0x14
00019a  4610              MOV      r0,r2
00019c  f7fffffe          BL       SetControlVisiable
;;;650    
;;;651                    SetControlVisiable(0, 25, 0);
0001a0  2200              MOVS     r2,#0
0001a2  2119              MOVS     r1,#0x19
0001a4  4610              MOV      r0,r2
0001a6  f7fffffe          BL       SetControlVisiable
;;;652                    SetControlVisiable(0, 26, 0);
0001aa  2200              MOVS     r2,#0
0001ac  211a              MOVS     r1,#0x1a
0001ae  4610              MOV      r0,r2
0001b0  f7fffffe          BL       SetControlVisiable
;;;653                    SetControlVisiable(0, 29, 0);
0001b4  2200              MOVS     r2,#0
0001b6  211d              MOVS     r1,#0x1d
0001b8  4610              MOV      r0,r2
0001ba  f7fffffe          BL       SetControlVisiable
                  |L4.446|
;;;654                }                                                      
;;;655            }
;;;656            // else if(control_id==9) //顶杆检查
;;;657            // {
;;;658            //     if(1)//不在工作状态
;;;659            //     {
;;;660            //         if( dg_sta == DG_STOP_BOT ) //顶杆在底部
;;;661            //         {    
;;;662            //             PlayMusic("a:/sounds/dgjc.mp3");
;;;663            //             SetTextValue(0,26,"检修上升...");
;;;664            //             dg_sta = DG_FIX_UP;//检修上升
;;;665            //             dg_sta_befor = DG_FIX_UP;
;;;666                    
;;;667            //         }else
;;;668            //         if( dg_sta == DG_STOP_TOP ) //顶杆在底部
;;;669            //         {
;;;670            //             PlayMusic("a:/sounds/dggl.mp3");
;;;671            //             SetTextValue(0,26,"顶杆归零...");
;;;672            //             dg_sta = DG_FIX_DOWN;//顶杆归零
;;;673            //             dg_sta_befor = DG_FIX_DOWN;
;;;674            //         }else    
;;;675            //         {
;;;676            //             if( dg_sta == DG_STOP ) //运行中停止，停止后运行
;;;677            //             {
;;;678            //                 dg_sta = dg_sta_befor;//
;;;679            //                 if( dg_sta == DG_FIX_UP ) //上升
;;;680            //                 {
;;;681            //                     PlayMusic("a:/sounds/dgjc.mp3");
;;;682            //                     SetTextValue(0,26,"检修上升...");
;;;683            //                 }else
;;;684            //                 if( dg_sta == DG_FIX_DOWN ) //下降
;;;685            //                 {
;;;686            //                     PlayMusic("a:/sounds/dggl.mp3");
;;;687            //                     SetTextValue(0,26,"顶杆归零...");
;;;688            //                 }else
;;;689            //                 {
;;;690            //                     dg_sta = DG_STOP;
;;;691    		// 												SetTextValue(0,26,"故障，顶杆停止");
;;;692            //                 }
;;;693                            
;;;694            //             }
;;;695            //             else
;;;696            //             {
;;;697            //                 PlayMusic("a:/sounds/tz.mp3");
;;;698            //                 dg_sta = DG_STOP;//顶杆停止
;;;699            //                 SetTextValue(0,26,"顶杆停止");
;;;700            //             }
;;;701            //         }
;;;702            //     }
;;;703            // }
;;;704        }
;;;705        
;;;706        //参数设置
;;;707        if(screen_id == 1)
0001be  2e01              CMP      r6,#1
0001c0  d125              BNE      |L4.526|
;;;708        {
;;;709            //压力值校准 0 3 5 7 9 11 11.5 Kg
;;;710            if( (control_id > 0 ) && (control_id < 8 ) ) //0~11.5 Kg
0001c2  2c00              CMP      r4,#0
0001c4  dd23              BLE      |L4.526|
0001c6  2c08              CMP      r4,#8
0001c8  da21              BGE      |L4.526|
;;;711            {
;;;712                if( state ) //按下
0001ca  b18d              CBZ      r5,|L4.496|
;;;713                {
;;;714                    SetTextInt32(1, 11+control_id, Tmy.pressure, 0, 1); //显示压力值
0001cc  2001              MOVS     r0,#1
0001ce  9000              STR      r0,[sp,#0]
0001d0  4831              LDR      r0,|L4.664|
0001d2  68c2              LDR      r2,[r0,#0xc]  ; Tmy
0001d4  f104000b          ADD      r0,r4,#0xb
0001d8  b281              UXTH     r1,r0
0001da  2300              MOVS     r3,#0
0001dc  2001              MOVS     r0,#1
0001de  f7fffffe          BL       SetTextInt32
;;;715                    PRE_Adjust(control_id-1, Tmy.pressure); //存储压力值
0001e2  4a2d              LDR      r2,|L4.664|
0001e4  68d1              LDR      r1,[r2,#0xc]  ; Tmy
0001e6  1e62              SUBS     r2,r4,#1
0001e8  b2d0              UXTB     r0,r2
0001ea  f7fffffe          BL       PRE_Adjust
0001ee  e00e              B        |L4.526|
                  |L4.496|
;;;716                }else
;;;717                {
;;;718                   SetTextInt32(1, 11+control_id, 0, 0, 1); //显示压力值
0001f0  2001              MOVS     r0,#1
0001f2  9000              STR      r0,[sp,#0]
0001f4  f104000b          ADD      r0,r4,#0xb
0001f8  b281              UXTH     r1,r0
0001fa  2300              MOVS     r3,#0
0001fc  461a              MOV      r2,r3
0001fe  2001              MOVS     r0,#1
000200  f7fffffe          BL       SetTextInt32
;;;719                    PRE_Adjust(control_id-1, 0); //存储压力值
000204  1e61              SUBS     r1,r4,#1
000206  b2c8              UXTB     r0,r1
000208  2100              MOVS     r1,#0
00020a  f7fffffe          BL       PRE_Adjust
                  |L4.526|
;;;720                }                                                        
;;;721            } 
;;;722            // else if(control_id==8) //顶杆检查
;;;723            // {
;;;724    	    //     if( state ) //按下 //顶杆检查
;;;725            //     {
;;;726            //         Tmy.Key.fix = 1;
;;;727            //         //Tmy.work_state = STA_FIX;
;;;728                    
;;;729            //         if( dg_sta == DG_STOP_BOT ) //顶杆在底部
;;;730            //         {
;;;731            //             SetTextValue(0,26,"检修上升...");
;;;732            //             dg_sta = DG_FIX_UP;//检修上升
;;;733            //         }else
;;;734            //         {
;;;735            //             SetTextValue(0,26,"顶杆未在底部，操作错误");
;;;736            //         }
;;;737            //     }
;;;738            // }
;;;739            // else if(control_id==9) //顶杆停止
;;;740            // {
;;;741    	    //     if( state ) //按下 //顶杆停止
;;;742            //     {
;;;743            //         dg_sta = DG_STOP;//顶杆停止
;;;744            //         SetTextValue(0,26,"顶杆停止");
;;;745            //     }
;;;746            // }
;;;747            // else if(control_id==10) //顶杆归零
;;;748            // {
;;;749    	    //     if( state ) //按下 //顶杆归零
;;;750            //     {
;;;751            //         if( dg_sta == DG_STOP_TOP ) //顶杆在顶部
;;;752            //         {
;;;753            //             SetTextValue(0,26,"顶杆归零...");
;;;754            //             dg_sta = DG_FIX_DOWN;//顶杆归零
;;;755            //         }else
;;;756            //         {
;;;757            //             SetTextValue(0,26,"顶杆未在底部，操作错误");
;;;758            //         }
;;;759            //     }
;;;760            // }
;;;761        }
;;;762    
;;;763        //页面三 参数设置2
;;;764        if(screen_id == 2)
00020e  2e02              CMP      r6,#2
000210  d140              BNE      |L4.660|
;;;765        {
;;;766            if(control_id==9) //顶杆检查
000212  2c09              CMP      r4,#9
000214  d11c              BNE      |L4.592|
;;;767            {
;;;768    	        //if( state ) //按下 //顶杆上升
;;;769                {
;;;770                    Tmy.Key.fix = 1;
000216  4820              LDR      r0,|L4.664|
000218  7980              LDRB     r0,[r0,#6]  ; Tmy
00021a  f0200010          BIC      r0,r0,#0x10
00021e  3010              ADDS     r0,r0,#0x10
000220  491d              LDR      r1,|L4.664|
000222  7188              STRB     r0,[r1,#6]
;;;771                    
;;;772                    if ((dg_sta == DG_STOP_BOT) //顶杆在底部
000224  4820              LDR      r0,|L4.680|
000226  7800              LDRB     r0,[r0,#0]  ; dg_sta
000228  2805              CMP      r0,#5
00022a  d002              BEQ      |L4.562|
;;;773                        || (dg_sta == DG_STOP))
00022c  481e              LDR      r0,|L4.680|
00022e  7800              LDRB     r0,[r0,#0]  ; dg_sta
000230  b940              CBNZ     r0,|L4.580|
                  |L4.562|
;;;774                    {
;;;775                        SetTextValue(2,26,"顶杆上升...");
000232  a21e              ADR      r2,|L4.684|
000234  211a              MOVS     r1,#0x1a
000236  2002              MOVS     r0,#2
000238  f7fffffe          BL       SetTextValue
;;;776                        dg_sta = DG_FIX_UP;//顶杆上升
00023c  200e              MOVS     r0,#0xe
00023e  491a              LDR      r1,|L4.680|
000240  7008              STRB     r0,[r1,#0]
000242  e027              B        |L4.660|
                  |L4.580|
;;;777                    }else
;;;778                    {
;;;779                        SetTextValue(0,26,"顶杆未在底部，操作错误");
000244  a21c              ADR      r2,|L4.696|
000246  211a              MOVS     r1,#0x1a
000248  2000              MOVS     r0,#0
00024a  f7fffffe          BL       SetTextValue
00024e  e021              B        |L4.660|
                  |L4.592|
;;;780                    }
;;;781                }
;;;782            }
;;;783            else if(control_id==10) //顶杆停止
000250  2c0a              CMP      r4,#0xa
000252  d108              BNE      |L4.614|
;;;784            {
;;;785    	        //if( state ) //按下 //顶杆停止
;;;786                {
;;;787                    dg_sta = DG_STOP;//顶杆停止
000254  2000              MOVS     r0,#0
000256  4914              LDR      r1,|L4.680|
000258  7008              STRB     r0,[r1,#0]
;;;788                    SetTextValue(2,26,"顶杆停止");
00025a  a21d              ADR      r2,|L4.720|
00025c  211a              MOVS     r1,#0x1a
00025e  2002              MOVS     r0,#2
000260  f7fffffe          BL       SetTextValue
000264  e016              B        |L4.660|
                  |L4.614|
;;;789                }
;;;790            }
;;;791            else if(control_id==11) //顶杆归零
000266  2c0b              CMP      r4,#0xb
000268  d114              BNE      |L4.660|
;;;792            {
;;;793    	        //if( state ) //按下 //顶杆归零
;;;794                {
;;;795                    if ((dg_sta == DG_STOP_TOP) //顶杆在顶部
00026a  480f              LDR      r0,|L4.680|
00026c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00026e  2804              CMP      r0,#4
000270  d002              BEQ      |L4.632|
;;;796                        || (dg_sta == DG_STOP))
000272  480d              LDR      r0,|L4.680|
000274  7800              LDRB     r0,[r0,#0]  ; dg_sta
000276  b940              CBNZ     r0,|L4.650|
                  |L4.632|
;;;797                    {
;;;798                        SetTextValue(2,26,"顶杆归零...");
000278  a218              ADR      r2,|L4.732|
00027a  211a              MOVS     r1,#0x1a
00027c  2002              MOVS     r0,#2
00027e  f7fffffe          BL       SetTextValue
;;;799                        dg_sta = DG_FIX_DOWN;//顶杆归零
000282  200f              MOVS     r0,#0xf
000284  4908              LDR      r1,|L4.680|
000286  7008              STRB     r0,[r1,#0]
000288  e004              B        |L4.660|
                  |L4.650|
;;;800                    }else
;;;801                    {
;;;802                        SetTextValue(2,26,"顶杆未在底部，操作错误");
00028a  a20b              ADR      r2,|L4.696|
00028c  211a              MOVS     r1,#0x1a
00028e  2002              MOVS     r0,#2
000290  f7fffffe          BL       SetTextValue
                  |L4.660|
;;;803                    }
;;;804                }
;;;805            }
;;;806        }
;;;807    }
000294  bdf8              POP      {r3-r7,pc}
;;;808    
                          ENDP

000296  0000              DCW      0x0000
                  |L4.664|
                          DCD      Tmy
                  |L4.668|
                          DCD      Motor
                  |L4.672|
                          DCD      0x0003b97e
                  |L4.676|
                          DCD      0x0004af8e
                  |L4.680|
                          DCD      dg_sta
                  |L4.684|
0002ac  b6a5b8cb          DCB      182,165,184,203,201,207,201,253,"...",0
0002b0  c9cfc9fd
0002b4  2e2e2e00
                  |L4.696|
0002b8  b6a5b8cb          DCB      182,165,184,203,206,180,212,218,181,215,178,191,163,172,178
0002bc  ceb4d4da
0002c0  b5d7b2bf
0002c4  a3acb2  
0002c7  d9d7f7b4          DCB      217,215,247,180,237,206,243,0
0002cb  edcef300
0002cf  00                DCB      0
                  |L4.720|
0002d0  b6a5b8cb          DCB      182,165,184,203,205,163,214,185,0
0002d4  cda3d6b9
0002d8  00      
0002d9  00                DCB      0
0002da  00                DCB      0
0002db  00                DCB      0
                  |L4.732|
0002dc  b6a5b8cb          DCB      182,165,184,203,185,233,193,227,"...",0
0002e0  b9e9c1e3
0002e4  2e2e2e00

                          AREA ||i.NotifyMenu||, CODE, READONLY, ALIGN=1

                  NotifyMenu PROC
;;;891    */
;;;892    void NotifyMenu(uint16 screen_id, uint16 control_id, uint8 item, uint8 state)
000000  4770              BX       lr
;;;893    {
;;;894        //TODO: 添加用户代码
;;;895    }
;;;896    
                          ENDP


                          AREA ||i.NotifyMeter||, CODE, READONLY, ALIGN=1

                  NotifyMeter PROC
;;;878    */
;;;879    void NotifyMeter(uint16 screen_id, uint16 control_id, uint32 value)
000000  4770              BX       lr
;;;880    {
;;;881        //TODO: 添加用户代码
;;;882    }
;;;883    
                          ENDP


                          AREA ||i.NotifyProgress||, CODE, READONLY, ALIGN=1

                  NotifyProgress PROC
;;;847    */                                                                              
;;;848    void NotifyProgress(uint16 screen_id, uint16 control_id, uint32 value)           
000000  4770              BX       lr
;;;849    {  
;;;850        //TODO: 添加用户代码   
;;;851    }                                                                                
;;;852    
                          ENDP


                          AREA ||i.NotifyReadFlash||, CODE, READONLY, ALIGN=1

                  NotifyReadFlash PROC
;;;936    */
;;;937    void NotifyReadFlash(uint8 status,uint8 *_data,uint16 length)
000000  4770              BX       lr
;;;938    {
;;;939        //TODO: 添加用户代码
;;;940    }
;;;941    
                          ENDP


                          AREA ||i.NotifyReadRTC||, CODE, READONLY, ALIGN=1

                  NotifyReadRTC PROC
;;;960    */
;;;961    void NotifyReadRTC(uint8 year,uint8 month,uint8 week,uint8 day,uint8 hour,uint8 minute,uint8 second)
000000  b570              PUSH     {r4-r6,lr}
;;;962    { 
000002  ac04              ADD      r4,sp,#0x10
000004  cc70              LDM      r4,{r4-r6}
;;;963    ;	
;;;964    //    sec    =(0xff & (second>>4))*10 +(0xf & second);                                    //BCD码转十进制
;;;965    //    years   =(0xff & (year>>4))*10 +(0xf & year);                                      
;;;966    //    months  =(0xff & (month>>4))*10 +(0xf & month);                                     
;;;967    //    weeks   =(0xff & (week>>4))*10 +(0xf & week);                                      
;;;968    //    days    =(0xff & (day>>4))*10 +(0xf & day);                                      
;;;969    //    hours   =(0xff & (hour>>4))*10 +(0xf & hour);                                       
;;;970    //    minutes =(0xff & (minute>>4))*10 +(0xf & minute);                                                                                                                  
;;;971    }
000006  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i.NotifyScreen||, CODE, READONLY, ALIGN=2

                  NotifyScreen PROC
;;;394    */
;;;395    void NotifyScreen(uint16 screen_id)
000000  b538              PUSH     {r3-r5,lr}
;;;396    {
000002  4605              MOV      r5,r0
;;;397        uint8_t i;
;;;398    
;;;399        //TODO: 添加用户代码
;;;400        current_screen_id = screen_id;                                                   //在工程配置中开启画面切换通知，记录当前画面ID
000004  480f              LDR      r0,|L10.68|
000006  8005              STRH     r5,[r0,#0]
;;;401    
;;;402        //工作页面
;;;403        if(screen_id == 0)
000008  b915              CBNZ     r5,|L10.16|
;;;404        {
;;;405            //SetBuzzer(100);               
;;;406            lg_lcd_init = 1;
00000a  2001              MOVS     r0,#1
00000c  490e              LDR      r1,|L10.72|
00000e  7008              STRB     r0,[r1,#0]
                  |L10.16|
;;;407    //        //if( lg_lcd_init < 2 )
;;;408    //        {
;;;409    //            SetBuzzer(100);
;;;410    //            lg_lcd_init = 2;
;;;411    //            LCD_ParaInit();
;;;412    //        }
;;;413        }
;;;414        //设置参数
;;;415       if(screen_id == 1)
000010  2d01              CMP      r5,#1
000012  d116              BNE      |L10.66|
;;;416       {
;;;417            delay_ms(100); 
000014  2064              MOVS     r0,#0x64
000016  f7fffffe          BL       delay_ms
;;;418            //压力值校准 0 3 5 7 9 11 11.5 Kg
;;;419            for ( i=0; i<7; i++) //0~11.5 Kg
00001a  2400              MOVS     r4,#0
00001c  e00f              B        |L10.62|
                  |L10.30|
;;;420            {
;;;421                SetTextInt32(1, 11+i, data_saved.data.Pressure[i], 0, 1); //显示压力值
00001e  2001              MOVS     r0,#1
000020  9000              STR      r0,[sp,#0]
000022  480a              LDR      r0,|L10.76|
000024  f8502024          LDR      r2,[r0,r4,LSL #2]
000028  f104010b          ADD      r1,r4,#0xb
00002c  2300              MOVS     r3,#0
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       SetTextInt32
;;;422                delay_ms(100);                                              
000034  2064              MOVS     r0,#0x64
000036  f7fffffe          BL       delay_ms
00003a  1c60              ADDS     r0,r4,#1              ;419
00003c  b2c4              UXTB     r4,r0                 ;419
                  |L10.62|
00003e  2c07              CMP      r4,#7                 ;419
000040  dbed              BLT      |L10.30|
                  |L10.66|
;;;423            }
;;;424       }
;;;425    }
000042  bd38              POP      {r3-r5,pc}
;;;426    
                          ENDP

                  |L10.68|
                          DCD      current_screen_id
                  |L10.72|
                          DCD      lg_lcd_init
                  |L10.76|
                          DCD      data_saved+0x34

                          AREA ||i.NotifySelector||, CODE, READONLY, ALIGN=1

                  NotifySelector PROC
;;;903    */
;;;904    void NotifySelector(uint16 screen_id, uint16 control_id, uint8  item)
000000  4770              BX       lr
;;;905    {
;;;906    	;
;;;907    //    if(screen_id == 13&&control_id == 1)                                               //获取当前选择控件的值
;;;908    //    {
;;;909    //        Select_H =  item;
;;;910    //    } 
;;;911    //    if(screen_id == 13&&control_id == 2)                                               //获取当前选择控件的值
;;;912    //    {
;;;913    //        Select_M =  item;
;;;914    //    } 
;;;915    
;;;916    }
;;;917    
                          ENDP


                          AREA ||i.NotifySlider||, CODE, READONLY, ALIGN=1

                  NotifySlider PROC
;;;859    */                                                                              
;;;860    void NotifySlider(uint16 screen_id, uint16 control_id, uint32 value)             
000000  b5f8              PUSH     {r3-r7,lr}
;;;861    {                                                             
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;862        if(screen_id==7&&control_id==5)                                                  //滑块控制
000008  2e07              CMP      r6,#7
00000a  d111              BNE      |L12.48|
00000c  2d05              CMP      r5,#5
00000e  d10f              BNE      |L12.48|
;;;863        {                                                                              
;;;864            if(value<100||value>0)                                                       
000010  2c64              CMP      r4,#0x64
000012  d300              BCC      |L12.22|
000014  b164              CBZ      r4,|L12.48|
                  |L12.22|
;;;865            {                                                                            
;;;866                SetProgressValue(7,4,value);                                             //更新进度条数值
000016  4622              MOV      r2,r4
000018  2104              MOVS     r1,#4
00001a  2007              MOVS     r0,#7
00001c  f7fffffe          BL       SetProgressValue
;;;867                SetTextInt32(7,6,value,0,1);                                             
000020  2001              MOVS     r0,#1
000022  2300              MOVS     r3,#0
000024  4622              MOV      r2,r4
000026  2106              MOVS     r1,#6
000028  9000              STR      r0,[sp,#0]
00002a  2007              MOVS     r0,#7
00002c  f7fffffe          BL       SetTextInt32
                  |L12.48|
;;;868            }
;;;869        }
;;;870    }
000030  bdf8              POP      {r3-r7,pc}
;;;871    
                          ENDP


                          AREA ||i.NotifyText||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                  NotifyText PROC
;;;817    */
;;;818    void NotifyText(uint16 screen_id, uint16 control_id, uint8 *str)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;819    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;820        if(screen_id==4)                                                                //画面ID2：文本设置和显示
00000a  2c04              CMP      r4,#4
00000c  d129              BNE      |L13.98|
;;;821        {                                                                            
;;;822            int32 value=0;                                                            
00000e  2000              MOVS     r0,#0
000010  9001              STR      r0,[sp,#4]
;;;823            sscanf((char*)str,"%ld",&value);//sscanf(str,"%ld",&value);                 //把字符串转换为整数 
000012  aa01              ADD      r2,sp,#4
000014  a114              ADR      r1,|L13.104|
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       __0sscanf
;;;824            if(control_id==2)                                                           //最高电压
00001c  2d02              CMP      r5,#2
00001e  d11f              BNE      |L13.96|
;;;825            {                                                                         
;;;826                //限定数值范围（也可以在文本控件属性中设置）                             
;;;827                if(value<0)                                                              
000020  9801              LDR      r0,[sp,#4]
000022  2800              CMP      r0,#0
000024  da02              BGE      |L13.44|
;;;828                {                                                                        
;;;829                    value = 0;                                                            
000026  2000              MOVS     r0,#0
000028  9001              STR      r0,[sp,#4]
00002a  e006              B        |L13.58|
                  |L13.44|
;;;830                }                                                                        
;;;831                else if(value>380)                                                       
00002c  9801              LDR      r0,[sp,#4]
00002e  f5b07fbe          CMP      r0,#0x17c
000032  dd02              BLE      |L13.58|
;;;832                {                                                                        
;;;833                    value = 380;                                                           
000034  f44f70be          MOV      r0,#0x17c
000038  9001              STR      r0,[sp,#4]
                  |L13.58|
;;;834                }                                                                        
;;;835                SetTextInt32(4,2,value,0,1);                                             //更新最高电压
00003a  2001              MOVS     r0,#1
00003c  2300              MOVS     r3,#0
00003e  9000              STR      r0,[sp,#0]
000040  2102              MOVS     r1,#2
000042  2004              MOVS     r0,#4
000044  9a01              LDR      r2,[sp,#4]
000046  f7fffffe          BL       SetTextInt32
;;;836                SetTextInt32(4,5,value/2,1,1);                                           //更新最高电压/2
00004a  2001              MOVS     r0,#1
00004c  9f01              LDR      r7,[sp,#4]
00004e  9000              STR      r0,[sp,#0]
000050  eb0770d7          ADD      r0,r7,r7,LSR #31
000054  1042              ASRS     r2,r0,#1
000056  2301              MOVS     r3,#1
000058  2105              MOVS     r1,#5
00005a  2004              MOVS     r0,#4
00005c  f7fffffe          BL       SetTextInt32
                  |L13.96|
;;;837            }                                                                         
;;;838        }                                                                            
000060  bf00              NOP      
                  |L13.98|
;;;839    }                                                                                
000062  e8bd81fc          POP      {r2-r8,pc}
;;;840    
                          ENDP

000066  0000              DCW      0x0000
                  |L13.104|
000068  256c6400          DCB      "%ld",0

                          AREA ||i.NotifyTimer||, CODE, READONLY, ALIGN=1

                  NotifyTimer PROC
;;;922    */
;;;923    void NotifyTimer(uint16 screen_id, uint16 control_id)
000000  4770              BX       lr
;;;924    {
;;;925        // if(screen_id==8&&control_id == 7)
;;;926        // {
;;;927        //     SetBuzzer(100);
;;;928        // } 
;;;929    }
;;;930    
                          ENDP


                          AREA ||i.NotifyTouchXY||, CODE, READONLY, ALIGN=1

                  NotifyTouchXY PROC
;;;432    */
;;;433    void NotifyTouchXY(uint8 press,uint16 x,uint16 y)
000000  4770              BX       lr
;;;434    { 
;;;435        //TODO: 添加用户代码
;;;436    }
;;;437    
                          ENDP


                          AREA ||i.NotifyWriteFlash||, CODE, READONLY, ALIGN=1

                  NotifyWriteFlash PROC
;;;945    */
;;;946    void NotifyWriteFlash(uint8 status)
000000  4770              BX       lr
;;;947    {
;;;948        //TODO: 添加用户代码
;;;949    }
;;;950    
                          ENDP


                          AREA ||i.ProcessMessage||, CODE, READONLY, ALIGN=2

                  ProcessMessage PROC
;;;251    */
;;;252    void ProcessMessage( PCTRL_MSG msg, uint16 size )
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;253    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;254        uint8 cmd_type = msg->cmd_type;                                                  //指令类型
000008  7866              LDRB     r6,[r4,#1]
;;;255        uint8 ctrl_msg = msg->ctrl_msg;                                                  //消息的类型
00000a  78a7              LDRB     r7,[r4,#2]
;;;256        uint8 control_type = msg->control_type;                                          //控件类型
00000c  f8948007          LDRB     r8,[r4,#7]
;;;257        uint16 screen_id = PTR2U16(&msg->screen_id);                                     //画面ID
000010  7920              LDRB     r0,[r4,#4]
000012  78e1              LDRB     r1,[r4,#3]
000014  ea402901          ORR      r9,r0,r1,LSL #8
;;;258        uint16 control_id = PTR2U16(&msg->control_id);                                   //控件ID
000018  79a0              LDRB     r0,[r4,#6]
00001a  7961              LDRB     r1,[r4,#5]
00001c  ea402a01          ORR      r10,r0,r1,LSL #8
;;;259        uint32 value = PTR2U32(msg->param);                                              //数值
000020  7a20              LDRB     r0,[r4,#8]
000022  0601              LSLS     r1,r0,#24
000024  7a60              LDRB     r0,[r4,#9]
000026  ea414100          ORR      r1,r1,r0,LSL #16
00002a  7aa0              LDRB     r0,[r4,#0xa]
00002c  ea412000          ORR      r0,r1,r0,LSL #8
000030  7ae1              LDRB     r1,[r4,#0xb]
000032  ea400b01          ORR      r11,r0,r1
;;;260    
;;;261    
;;;262        switch(cmd_type)
000036  2e0d              CMP      r6,#0xd
000038  d02c              BEQ      |L17.148|
00003a  dc08              BGT      |L17.78|
00003c  2e01              CMP      r6,#1
00003e  d00f              BEQ      |L17.96|
000040  2e03              CMP      r6,#3
000042  d00e              BEQ      |L17.98|
000044  2e0b              CMP      r6,#0xb
000046  d029              BEQ      |L17.156|
000048  2e0c              CMP      r6,#0xc
                  |L17.74|
00004a  d16f              BNE      |L17.300|
00004c  e01e              B        |L17.140|
                  |L17.78|
00004e  2e0f              CMP      r6,#0xf
000050  d02c              BEQ      |L17.172|
000052  2e55              CMP      r6,#0x55
000054  d06b              BEQ      |L17.302|
000056  2eb1              CMP      r6,#0xb1
000058  d043              BEQ      |L17.226|
00005a  2ef7              CMP      r6,#0xf7
00005c  d1f5              BNE      |L17.74|
00005e  e02b              B        |L17.184|
                  |L17.96|
;;;263        {  
;;;264        case NOTIFY_TOUCH_PRESS:                                                        //触摸屏按下
;;;265        case NOTIFY_TOUCH_RELEASE:                                                      //触摸屏松开
000060  bf00              NOP      
                  |L17.98|
;;;266            NotifyTouchXY(cmd_buffer[1],PTR2U16(cmd_buffer+2),PTR2U16(cmd_buffer+4)); 
000062  4b47              LDR      r3,|L17.384|
000064  795b              LDRB     r3,[r3,#5]
000066  f8dfc118          LDR      r12,|L17.384|
00006a  f89cc004          LDRB     r12,[r12,#4]  ; cmd_buffer
00006e  ea43220c          ORR      r2,r3,r12,LSL #8
000072  4b43              LDR      r3,|L17.384|
000074  78db              LDRB     r3,[r3,#3]
000076  f8dfc108          LDR      r12,|L17.384|
00007a  f89cc002          LDRB     r12,[r12,#2]  ; cmd_buffer
00007e  ea43210c          ORR      r1,r3,r12,LSL #8
000082  4b3f              LDR      r3,|L17.384|
000084  7858              LDRB     r0,[r3,#1]  ; cmd_buffer
000086  f7fffffe          BL       NotifyTouchXY
;;;267            break;                                                                    
00008a  e076              B        |L17.378|
                  |L17.140|
;;;268        case NOTIFY_WRITE_FLASH_OK:                                                     //写FLASH成功
;;;269            NotifyWriteFlash(1);                                                      
00008c  2001              MOVS     r0,#1
00008e  f7fffffe          BL       NotifyWriteFlash
;;;270            break;                                                                    
000092  e072              B        |L17.378|
                  |L17.148|
;;;271        case NOTIFY_WRITE_FLASH_FAILD:                                                  //写FLASH失败
;;;272            NotifyWriteFlash(0);                                                      
000094  2000              MOVS     r0,#0
000096  f7fffffe          BL       NotifyWriteFlash
;;;273            break;                                                                    
00009a  e06e              B        |L17.378|
                  |L17.156|
;;;274        case NOTIFY_READ_FLASH_OK:                                                      //读取FLASH成功
;;;275            NotifyReadFlash(1,cmd_buffer+2,size-6);                                     //去除帧头帧尾
00009c  1fa8              SUBS     r0,r5,#6
00009e  b282              UXTH     r2,r0
0000a0  4937              LDR      r1,|L17.384|
0000a2  1c89              ADDS     r1,r1,#2
0000a4  2001              MOVS     r0,#1
0000a6  f7fffffe          BL       NotifyReadFlash
;;;276            break;                                                                    
0000aa  e066              B        |L17.378|
                  |L17.172|
;;;277        case NOTIFY_READ_FLASH_FAILD:                                                   //读取FLASH失败
;;;278            NotifyReadFlash(0,0,0);                                                   
0000ac  2200              MOVS     r2,#0
0000ae  4611              MOV      r1,r2
0000b0  4610              MOV      r0,r2
0000b2  f7fffffe          BL       NotifyReadFlash
;;;279            break;                                                                    
0000b6  e060              B        |L17.378|
                  |L17.184|
;;;280        case NOTIFY_READ_RTC:                                                           //读取RTC时间
;;;281            NotifyReadRTC(cmd_buffer[2],cmd_buffer[3],cmd_buffer[4],cmd_buffer[5],cmd_buffer[6],cmd_buffer[7],cmd_buffer[8]);
0000b8  4831              LDR      r0,|L17.384|
0000ba  7a01              LDRB     r1,[r0,#8]  ; cmd_buffer
0000bc  79c0              LDRB     r0,[r0,#7]  ; cmd_buffer
0000be  4a30              LDR      r2,|L17.384|
0000c0  7992              LDRB     r2,[r2,#6]  ; cmd_buffer
0000c2  f8dfc0bc          LDR      r12,|L17.384|
0000c6  e9cd2000          STRD     r2,r0,[sp,#0]
0000ca  9102              STR      r1,[sp,#8]
0000cc  f89c3005          LDRB     r3,[r12,#5]  ; cmd_buffer
0000d0  f89c2004          LDRB     r2,[r12,#4]  ; cmd_buffer
0000d4  f89c1003          LDRB     r1,[r12,#3]  ; cmd_buffer
0000d8  f89c0002          LDRB     r0,[r12,#2]  ; cmd_buffer
0000dc  f7fffffe          BL       NotifyReadRTC
;;;282            break;
0000e0  e04b              B        |L17.378|
                  |L17.226|
;;;283        case NOTIFY_CONTROL:
;;;284            {
;;;285                if(ctrl_msg==MSG_GET_CURRENT_SCREEN)                                    //画面ID变化通知
0000e2  2f01              CMP      r7,#1
0000e4  d103              BNE      |L17.238|
;;;286                {
;;;287                    NotifyScreen(screen_id);                                            //画面切换调动的函数
0000e6  4648              MOV      r0,r9
0000e8  f7fffffe          BL       NotifyScreen
0000ec  e040              B        |L17.368|
                  |L17.238|
;;;288                }
;;;289                else
;;;290                {
;;;291                    switch(control_type)
0000ee  f1a80010          SUB      r0,r8,#0x10
0000f2  280c              CMP      r0,#0xc
0000f4  d23a              BCS      |L17.364|
0000f6  e8dff000          TBB      [pc,r0]
0000fa  060c              DCB      0x06,0x0c
0000fc  131b2139          DCB      0x13,0x1b,0x21,0x39
000100  39343939          DCB      0x39,0x34,0x39,0x39
000104  272e              DCB      0x27,0x2e
;;;292                    {
;;;293                    case kCtrlButton:                                                   //按钮控件
;;;294                        NotifyButton(screen_id,control_id,msg->param[1]);                  
000106  7a62              LDRB     r2,[r4,#9]
000108  4651              MOV      r1,r10
00010a  4648              MOV      r0,r9
00010c  f7fffffe          BL       NotifyButton
;;;295                        break;                                                             
000110  e02d              B        |L17.366|
;;;296                    case kCtrlText:                                                     //文本控件
;;;297                        NotifyText(screen_id,control_id,msg->param);                       
000112  f1040208          ADD      r2,r4,#8
000116  4651              MOV      r1,r10
000118  4648              MOV      r0,r9
00011a  f7fffffe          BL       NotifyText
;;;298                        break;                                                             
00011e  e026              B        |L17.366|
;;;299                    case kCtrlProgress:                                                 //进度条控件
;;;300                        NotifyProgress(screen_id,control_id,value);                        
000120  465a              MOV      r2,r11
000122  4651              MOV      r1,r10
000124  4648              MOV      r0,r9
000126  f7fffffe          BL       NotifyProgress
;;;301                        break;                                                             
00012a  e020              B        |L17.366|
                  |L17.300|
00012c  e024              B        |L17.376|
                  |L17.302|
00012e  e020              B        |L17.370|
;;;302                    case kCtrlSlider:                                                   //滑动条控件
;;;303                        NotifySlider(screen_id,control_id,value);                          
000130  465a              MOV      r2,r11
000132  4651              MOV      r1,r10
000134  4648              MOV      r0,r9
000136  f7fffffe          BL       NotifySlider
;;;304                        break;                                                             
00013a  e018              B        |L17.366|
;;;305                    case kCtrlMeter:                                                    //仪表控件
;;;306                        NotifyMeter(screen_id,control_id,value);                           
00013c  465a              MOV      r2,r11
00013e  4651              MOV      r1,r10
000140  4648              MOV      r0,r9
000142  f7fffffe          BL       NotifyMeter
;;;307                        break;                                                             
000146  e012              B        |L17.366|
;;;308                    case kCtrlMenu:                                                     //菜单控件
;;;309                        NotifyMenu(screen_id,control_id,msg->param[0],msg->param[1]);      
000148  7a63              LDRB     r3,[r4,#9]
00014a  7a22              LDRB     r2,[r4,#8]
00014c  4651              MOV      r1,r10
00014e  4648              MOV      r0,r9
000150  f7fffffe          BL       NotifyMenu
;;;310                        break;                                                              
000154  e00b              B        |L17.366|
;;;311                    case kCtrlSelector:                                                 //选择控件
;;;312                        NotifySelector(screen_id,control_id,msg->param[0]);                
000156  7a22              LDRB     r2,[r4,#8]
000158  4651              MOV      r1,r10
00015a  4648              MOV      r0,r9
00015c  f7fffffe          BL       NotifySelector
;;;313                        break;                                                              
000160  e005              B        |L17.366|
;;;314                    case kCtrlRTC:                                                      //倒计时控件
;;;315                        NotifyTimer(screen_id,control_id);
000162  4651              MOV      r1,r10
000164  4648              MOV      r0,r9
000166  f7fffffe          BL       NotifyTimer
;;;316                        break;
00016a  e000              B        |L17.366|
                  |L17.364|
;;;317                    default:
;;;318                        break;
00016c  bf00              NOP      
                  |L17.366|
00016e  bf00              NOP                            ;295
                  |L17.368|
;;;319                    }
;;;320                } 
;;;321                break;  
000170  e003              B        |L17.378|
                  |L17.370|
;;;322            } 
;;;323        case NOTIFY_HandShake:                                                          //握手通知                                                     
;;;324            NOTIFYHandShake();
000172  f7fffffe          BL       NOTIFYHandShake
;;;325            break;
000176  e000              B        |L17.378|
                  |L17.376|
;;;326        default:
;;;327            break;
000178  bf00              NOP      
                  |L17.378|
00017a  bf00              NOP                            ;267
;;;328        }
;;;329    }
00017c  e8bd8ffe          POP      {r1-r11,pc}
;;;330    
                          ENDP

                  |L17.384|
                          DCD      cmd_buffer

                          AREA ||i.ULCD_Init||, CODE, READONLY, ALIGN=2

                  ULCD_Init PROC
;;;134    
;;;135    void ULCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;136    {
;;;137        ULCD_InitIO();
000002  f7fffffe          BL       ULCD_InitIO
;;;138       // UartInit(115200);//UartInit(19200);                                                               
;;;139    
;;;140        //清空串口接收缓冲区                                                          
;;;141        //queue_reset();                                                                  
;;;142        lcd_prosser = 0; 
000006  2000              MOVS     r0,#0
000008  4906              LDR      r1,|L18.36|
00000a  8008              STRH     r0,[r1,#0]
;;;143        timer_beep = 0;
00000c  4906              LDR      r1,|L18.40|
00000e  6008              STR      r0,[r1,#0]  ; timer_beep
;;;144        lg_lcd_init = 0;
000010  4906              LDR      r1,|L18.44|
000012  7008              STRB     r0,[r1,#0]
;;;145        dg_sta_befor = 0;
000014  4906              LDR      r1,|L18.48|
000016  7008              STRB     r0,[r1,#0]
;;;146        //延时等待串口屏初始化完毕,必须等待300ms                                      
;;;147        vTaskDelay(pdMS_TO_TICKS(300));//bsp_DelayMS(300);
000018  f44f7096          MOV      r0,#0x12c
00001c  f7fffffe          BL       vTaskDelay
;;;148    	
;;;149    }
000020  bd10              POP      {r4,pc}
;;;150    
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
                          DCD      lcd_prosser
                  |L18.40|
                          DCD      timer_beep
                  |L18.44|
                          DCD      lg_lcd_init
                  |L18.48|
                          DCD      dg_sta_befor

                          AREA ||i.ULCD_InitIO||, CODE, READONLY, ALIGN=2

                  ULCD_InitIO PROC
;;;58     
;;;59     void ULCD_InitIO(void)
000000  b508              PUSH     {r3,lr}
;;;60     {
;;;61         GPIO_InitTypeDef GPIO_InitStructure;
;;;62     
;;;63     	/* 打开GPIO时钟 */
;;;64     	RCC_APB2PeriphClockCmd(RCC_ULCD, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;65     	
;;;66     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;67     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //推挽输出模式
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;68     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_ULCD_POWEN;
000016  2001              MOVS     r0,#1
000018  f8ad0000          STRH     r0,[sp,#0]
;;;69     	GPIO_Init(GPIO_PORT_ULCD, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4809              LDR      r0,|L19.68|
000020  f7fffffe          BL       GPIO_Init
;;;70         
;;;71         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
000024  2048              MOVS     r0,#0x48
000026  f88d0003          STRB     r0,[sp,#3]
;;;72     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_ULCD_BUSY;
00002a  2002              MOVS     r0,#2
00002c  f8ad0000          STRH     r0,[sp,#0]
;;;73     	GPIO_Init(GPIO_PORT_ULCD, &GPIO_InitStructure);
000030  4669              MOV      r1,sp
000032  4804              LDR      r0,|L19.68|
000034  f7fffffe          BL       GPIO_Init
;;;74         
;;;75         ULCD_POW_ON;
000038  2101              MOVS     r1,#1
00003a  4802              LDR      r0,|L19.68|
00003c  f7fffffe          BL       GPIO_SetBits
;;;76     }
000040  bd08              POP      {r3,pc}
;;;77     
                          ENDP

000042  0000              DCW      0x0000
                  |L19.68|
                          DCD      0x40010800

                          AREA ||i.ULCD_Task||, CODE, READONLY, ALIGN=2

                  ULCD_Task PROC
;;;150    
;;;151    void ULCD_Task( void )                                                                          
000000  b510              PUSH     {r4,lr}
;;;152    {       
;;;153    //    uint8_t i; 
;;;154    //    uint16_t n = 0;   
;;;155    //    static int32 test_value = 0;                                                     //测试值
;;;156    //    uint32 timer_tick_last_update = 0;                                               //上一次更新的时间
;;;157        qsize  size = 0;                                                                
000002  2400              MOVS     r4,#0
;;;158    
;;;159        //while(1)                                                                        
;;;160        {                                                                               
;;;161            size = queue_find_cmd(cmd_buffer,CMD_MAX_SIZE);                               //从缓冲区中获取一条指令         
000004  2140              MOVS     r1,#0x40
000006  4823              LDR      r0,|L20.148|
000008  f7fffffe          BL       queue_find_cmd
00000c  4604              MOV      r4,r0
;;;162    
;;;163            if(size>0)                                                              
00000e  2c00              CMP      r4,#0
000010  dd03              BLE      |L20.26|
;;;164            {   
;;;165    //            for( i=0; i<size; i++ )
;;;166    //            {
;;;167    //                printf("%02X ",cmd_buffer[i]);
;;;168    //            }
;;;169                //comSendBuf(COM1, cmd_buffer, size );                                                                       
;;;170                ProcessMessage((PCTRL_MSG)cmd_buffer, size);                             //指令处理  
000012  4621              MOV      r1,r4
000014  481f              LDR      r0,|L20.148|
000016  f7fffffe          BL       ProcessMessage
                  |L20.26|
;;;171            } 
;;;172            //    特别注意
;;;173            //    MCU不要频繁向串口屏发送数据，否则串口屏的内部缓存区会满，从而导致数据丢失(缓冲区大小：标准型8K，基本型4.7K)
;;;174            //    1) 一般情况下，控制MCU向串口屏发送数据的周期大于100ms，就可以避免数据丢失的问题；
;;;175            //    2) 如果仍然有数据丢失的问题，请判断串口屏的BUSY引脚，为高时不能发送数据给串口屏。
;;;176    
;;;177            //    TODO: 添加用户代码
;;;178            //    数据有更新时标志位发生改变，定时100毫秒刷新屏幕
;;;179    //        if(update_en&&timer_tick_count-timer_tick_last_update>=TIME_100MS)
;;;180    //        {
;;;181    //            update_en = 0;
;;;182    //            timer_tick_last_update = timer_tick_count;   
;;;183    //
;;;184    //            UpdateUI();
;;;185    //        }
;;;186      
;;;187    
;;;188    /*
;;;189    EE B1 10 00 2B 00 0C 00 00 00 32 FF FC FF FF 
;;;190    EE B1 10 00 2B 00 0C 00 00 00 01 FF FC FF FF 
;;;191    EE B1 10 00 2B 00 10 00 00 00 01 FF FC FF FF 
;;;192    */
;;;193            //这里为了演示方便，每20毫秒自动更新一次
;;;194            //进一次中断10ms，timer_tick_count值+1,100*timer_tick_count = 1s
;;;195            if( !timer_lcd_update )//if(timer_tick_count%2==0)
00001a  481f              LDR      r0,|L20.152|
00001c  6800              LDR      r0,[r0,#0]  ; timer_lcd_update
00001e  b920              CBNZ     r0,|L20.42|
;;;196            {
;;;197                timer_lcd_update = 100; //1s
000020  2064              MOVS     r0,#0x64
000022  491d              LDR      r1,|L20.152|
000024  6008              STR      r0,[r1,#0]  ; timer_lcd_update
;;;198                
;;;199                 UpdateUI();
000026  f7fffffe          BL       UpdateUI
                  |L20.42|
;;;200                 
;;;201    //             if( i>6 ) i = 0;
;;;202    //             AnimationPlayFrame(0,4,i++);//显示wifi图标
;;;203                 
;;;204    //            //if( Motor.state.bit.move )
;;;205    //            {
;;;206    //                lcd_prosser = 100*Motor.counter_step/Motor.max_step;
;;;207    //                SetProgressValue(0,12,lcd_prosser);
;;;208    //                SetTextInt32(0, 19, Motor.counter_step, 0, 1);
;;;209    //            }
;;;210    //            SetProgressValue(0,15,Tmy.power_percent);
;;;211    //            SetTextInt32(0, 27, Tmy.pressure, 0, 1); //测试显示压力
;;;212            }
;;;213            
;;;214            if( Motor.state.bit.move )
00002a  481c              LDR      r0,|L20.156|
00002c  7880              LDRB     r0,[r0,#2]  ; Motor
00002e  f3c000c0          UBFX     r0,r0,#3,#1
000032  b308              CBZ      r0,|L20.120|
;;;215            {
;;;216                if( !timer_beep )
000034  481a              LDR      r0,|L20.160|
000036  6800              LDR      r0,[r0,#0]  ; timer_beep
000038  b9f0              CBNZ     r0,|L20.120|
;;;217                {
;;;218    //                if( dg_sta == DG_DGJC ) //顶杆检查，无声
;;;219    //                {
;;;220    //                    
;;;221    //                }else
;;;222                    if( dg_sta == DG_UP ) //工作，上升
00003a  481a              LDR      r0,|L20.164|
00003c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00003e  2806              CMP      r0,#6
000040  d10b              BNE      |L20.90|
;;;223                    {
;;;224                        timer_beep = BEEP_TIMER[Motor.speed-1];
000042  4816              LDR      r0,|L20.156|
000044  7800              LDRB     r0,[r0,#0]  ; Motor
000046  1e40              SUBS     r0,r0,#1
000048  4917              LDR      r1,|L20.168|
00004a  f8310010          LDRH     r0,[r1,r0,LSL #1]
00004e  4914              LDR      r1,|L20.160|
000050  6008              STR      r0,[r1,#0]  ; timer_beep
;;;225                        SetBuzzer( 10 ); //蜂鸣器
000052  200a              MOVS     r0,#0xa
000054  f7fffffe          BL       SetBuzzer
000058  e01a              B        |L20.144|
                  |L20.90|
;;;226                    }else
;;;227                    if( ( dg_sta == DG_HX_UP ) || ( dg_sta == DG_HX_DOWN ) ) //回吸
00005a  4812              LDR      r0,|L20.164|
00005c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00005e  280a              CMP      r0,#0xa
000060  d003              BEQ      |L20.106|
000062  4810              LDR      r0,|L20.164|
000064  7800              LDRB     r0,[r0,#0]  ; dg_sta
000066  280b              CMP      r0,#0xb
000068  d107              BNE      |L20.122|
                  |L20.106|
;;;228                    {
;;;229                        timer_beep = BEEP_TIMER[HX];
00006a  480f              LDR      r0,|L20.168|
00006c  8980              LDRH     r0,[r0,#0xc]  ; BEEP_TIMER
00006e  490c              LDR      r1,|L20.160|
000070  6008              STR      r0,[r1,#0]  ; timer_beep
;;;230                        SetBuzzer( 10 ); //蜂鸣器
000072  200a              MOVS     r0,#0xa
000074  f7fffffe          BL       SetBuzzer
                  |L20.120|
000078  e00a              B        |L20.144|
                  |L20.122|
;;;231                    }else
;;;232                    if( dg_sta == DG_ZDPK_UP ) //自动排空
00007a  480a              LDR      r0,|L20.164|
00007c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00007e  2808              CMP      r0,#8
000080  d106              BNE      |L20.144|
;;;233                    {
;;;234                        timer_beep = BEEP_TIMER[ZDPK];
000082  4809              LDR      r0,|L20.168|
000084  8940              LDRH     r0,[r0,#0xa]  ; BEEP_TIMER
000086  4906              LDR      r1,|L20.160|
000088  6008              STR      r0,[r1,#0]  ; timer_beep
;;;235                        SetBuzzer( 10 ); //蜂鸣器
00008a  200a              MOVS     r0,#0xa
00008c  f7fffffe          BL       SetBuzzer
                  |L20.144|
;;;236                    }
;;;237    //                if( Motor.speed ) //
;;;238    //                {
;;;239    //                    timer_beep = BEEP_TIMER[Motor.speed-1];
;;;240    //                    SetBuzzer( 10 ); //蜂鸣器
;;;241    //                }
;;;242                }
;;;243            }
;;;244        }  
;;;245    }
000090  bd10              POP      {r4,pc}
;;;246    
                          ENDP

000092  0000              DCW      0x0000
                  |L20.148|
                          DCD      cmd_buffer
                  |L20.152|
                          DCD      timer_lcd_update
                  |L20.156|
                          DCD      Motor
                  |L20.160|
                          DCD      timer_beep
                  |L20.164|
                          DCD      dg_sta
                  |L20.168|
                          DCD      BEEP_TIMER

                          AREA ||i.UpdateUI||, CODE, READONLY, ALIGN=2

                  UpdateUI PROC
;;;441    */ 
;;;442    void UpdateUI()
000000  b508              PUSH     {r3,lr}
;;;443    {
;;;444        //EE B1 26 00 00 00 0D 00 00 FF FC FF FF 
;;;445        if(current_screen_id == 0)//主页面一
000002  487d              LDR      r0,|L21.504|
000004  8800              LDRH     r0,[r0,#0]  ; current_screen_id
000006  2800              CMP      r0,#0
000008  d17e              BNE      |L21.264|
;;;446        {
;;;447            if (ble_state_tem.bit.link != Ble.state.bit.link)
00000a  487c              LDR      r0,|L21.508|
00000c  7800              LDRB     r0,[r0,#0]  ; ble_state_tem
00000e  f0000001          AND      r0,r0,#1
000012  497b              LDR      r1,|L21.512|
000014  7809              LDRB     r1,[r1,#0]  ; Ble
000016  f0010101          AND      r1,r1,#1
00001a  4288              CMP      r0,r1
00001c  d016              BEQ      |L21.76|
;;;448            {
;;;449                ble_state_tem.bit.link = Ble.state.bit.link;
00001e  4878              LDR      r0,|L21.512|
000020  7800              LDRB     r0,[r0,#0]  ; Ble
000022  4976              LDR      r1,|L21.508|
000024  7809              LDRB     r1,[r1,#0]  ; ble_state_tem
000026  f3600100          BFI      r1,r0,#0,#1
00002a  4874              LDR      r0,|L21.508|
00002c  7001              STRB     r1,[r0,#0]
;;;450                if (ble_state_tem.bit.link) //更新BLE联网图标状态
00002e  7800              LDRB     r0,[r0,#0]  ; ble_state_tem
000030  f0000001          AND      r0,r0,#1
000034  b128              CBZ      r0,|L21.66|
;;;451                {
;;;452                    AnimationPlayFrame(0,32,0);//联网
000036  2200              MOVS     r2,#0
000038  2120              MOVS     r1,#0x20
00003a  4610              MOV      r0,r2
00003c  f7fffffe          BL       AnimationPlayFrame
000040  e004              B        |L21.76|
                  |L21.66|
;;;453                }else
;;;454                {
;;;455                    AnimationPlayFrame(0,32,1);//掉线
000042  2201              MOVS     r2,#1
000044  2120              MOVS     r1,#0x20
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       AnimationPlayFrame
                  |L21.76|
;;;456                }
;;;457            }
;;;458            
;;;459            //if( Motor.state.bit.move )
;;;460            {
;;;461                lcd_prosser = 100*Motor.counter_step/Motor.max_step;
00004c  486d              LDR      r0,|L21.516|
00004e  6840              LDR      r0,[r0,#4]  ; Motor
000050  2164              MOVS     r1,#0x64
000052  4348              MULS     r0,r1,r0
000054  496b              LDR      r1,|L21.516|
000056  6889              LDR      r1,[r1,#8]  ; Motor
000058  fbb0f0f1          UDIV     r0,r0,r1
00005c  496a              LDR      r1,|L21.520|
00005e  8008              STRH     r0,[r1,#0]
;;;462                SetProgressValue(0,12,lcd_prosser);
000060  4608              MOV      r0,r1
000062  8802              LDRH     r2,[r0,#0]  ; lcd_prosser
000064  210c              MOVS     r1,#0xc
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       SetProgressValue
;;;463                SetTextInt32(0, 19, Motor.counter_step, 0, 1);
00006c  2001              MOVS     r0,#1
00006e  9000              STR      r0,[sp,#0]
000070  4864              LDR      r0,|L21.516|
000072  2300              MOVS     r3,#0
000074  2113              MOVS     r1,#0x13
000076  6842              LDR      r2,[r0,#4]  ; Motor
000078  4618              MOV      r0,r3
00007a  f7fffffe          BL       SetTextInt32
;;;464            }
;;;465            SetProgressValue(0,15,Tmy.power_percent);
00007e  4863              LDR      r0,|L21.524|
000080  7a42              LDRB     r2,[r0,#9]  ; Tmy
000082  210f              MOVS     r1,#0xf
000084  2000              MOVS     r0,#0
000086  f7fffffe          BL       SetProgressValue
;;;466            SetTextInt32(0, 27, Tmy.pressure, 0, 1); //测试显示压力 
00008a  2001              MOVS     r0,#1
00008c  9000              STR      r0,[sp,#0]
00008e  485f              LDR      r0,|L21.524|
000090  2300              MOVS     r3,#0
000092  211b              MOVS     r1,#0x1b
000094  68c2              LDR      r2,[r0,#0xc]  ; Tmy
000096  4618              MOV      r0,r3
000098  f7fffffe          BL       SetTextInt32
;;;467            //SetTextInt32(0, 26, Tmy.pressureLevel, 0, 1); //测试显示压力 
;;;468    //        SetTextInt32(0, 29, PressureTable[ 0 ], 0, 1); //
;;;469    //        SetTextInt32(0, 24, PressureTable[ 1 ], 0, 1); //
;;;470            
;;;471            AnimationPlayFrame(0, 4, Tmy.pressureLevel);//显示压力图标
00009c  485b              LDR      r0,|L21.524|
00009e  7942              LDRB     r2,[r0,#5]  ; Tmy
0000a0  2104              MOVS     r1,#4
0000a2  2000              MOVS     r0,#0
0000a4  f7fffffe          BL       AnimationPlayFrame
;;;472    
;;;473            if ((dg_sta != DG_STOP_BOT) && (menu_visable)) 
0000a8  4859              LDR      r0,|L21.528|
0000aa  7800              LDRB     r0,[r0,#0]  ; dg_sta
0000ac  2805              CMP      r0,#5
0000ae  d03f              BEQ      |L21.304|
0000b0  4858              LDR      r0,|L21.532|
0000b2  7800              LDRB     r0,[r0,#0]  ; menu_visable
0000b4  2800              CMP      r0,#0
0000b6  d03b              BEQ      |L21.304|
;;;474            {
;;;475                menu_visable = 0;
0000b8  2000              MOVS     r0,#0
0000ba  4956              LDR      r1,|L21.532|
0000bc  7008              STRB     r0,[r1,#0]
;;;476    
;;;477                //显示控件
;;;478                SetControlVisiable(0, 13, 1);
0000be  2201              MOVS     r2,#1
0000c0  210d              MOVS     r1,#0xd
0000c2  f7fffffe          BL       SetControlVisiable
;;;479    
;;;480                //隐藏控件
;;;481                //SetControlVisiable(0, 10, 0);
;;;482                //SetControlVisiable(0, 11, 0);
;;;483                SetControlVisiable(0, 33, 0);
0000c6  2200              MOVS     r2,#0
0000c8  2121              MOVS     r1,#0x21
0000ca  4610              MOV      r0,r2
0000cc  f7fffffe          BL       SetControlVisiable
;;;484                SetControlVisiable(0, 34, 0);
0000d0  2200              MOVS     r2,#0
0000d2  2122              MOVS     r1,#0x22
0000d4  4610              MOV      r0,r2
0000d6  f7fffffe          BL       SetControlVisiable
;;;485                SetTextValue(0, 10, "  ");
0000da  a24f              ADR      r2,|L21.536|
0000dc  210a              MOVS     r1,#0xa
0000de  2000              MOVS     r0,#0
0000e0  f7fffffe          BL       SetTextValue
;;;486    		    SetTextValue(0, 11, "  ");
0000e4  a24c              ADR      r2,|L21.536|
0000e6  210b              MOVS     r1,#0xb
0000e8  2000              MOVS     r0,#0
0000ea  f7fffffe          BL       SetTextValue
;;;487                //SetTextValue(0, 11, "\xCD\xA3\xD6\xB9\x00");
;;;488                //SetTextValue(0, 11, "复位");
;;;489    
;;;490                //禁止控件
;;;491                SetControlEnable(0, 5, 0);
0000ee  2200              MOVS     r2,#0
0000f0  2105              MOVS     r1,#5
0000f2  4610              MOV      r0,r2
0000f4  f7fffffe          BL       SetControlEnable
;;;492                SetControlEnable(0, 6, 0);
0000f8  2200              MOVS     r2,#0
0000fa  2106              MOVS     r1,#6
0000fc  4610              MOV      r0,r2
0000fe  f7fffffe          BL       SetControlEnable
;;;493                SetControlEnable(0, 7, 0);
000102  2200              MOVS     r2,#0
000104  2107              MOVS     r1,#7
000106  e000              B        |L21.266|
                  |L21.264|
000108  e054              B        |L21.436|
                  |L21.266|
00010a  4610              MOV      r0,r2
00010c  f7fffffe          BL       SetControlEnable
;;;494                SetControlEnable(0, 8, 0);
000110  2200              MOVS     r2,#0
000112  2108              MOVS     r1,#8
000114  4610              MOV      r0,r2
000116  f7fffffe          BL       SetControlEnable
;;;495                SetControlEnable(0, 21, 0);
00011a  2200              MOVS     r2,#0
00011c  2115              MOVS     r1,#0x15
00011e  4610              MOV      r0,r2
000120  f7fffffe          BL       SetControlEnable
;;;496                SetControlEnable(0, 22, 0);
000124  2200              MOVS     r2,#0
000126  2116              MOVS     r1,#0x16
000128  4610              MOV      r0,r2
00012a  f7fffffe          BL       SetControlEnable
00012e  e041              B        |L21.436|
                  |L21.304|
;;;497    
;;;498            }else
;;;499            if ((dg_sta == DG_STOP_BOT) && (!menu_visable)) 
000130  4837              LDR      r0,|L21.528|
000132  7800              LDRB     r0,[r0,#0]  ; dg_sta
000134  2805              CMP      r0,#5
000136  d13d              BNE      |L21.436|
000138  4836              LDR      r0,|L21.532|
00013a  7800              LDRB     r0,[r0,#0]  ; menu_visable
00013c  2800              CMP      r0,#0
00013e  d139              BNE      |L21.436|
;;;500            {
;;;501                menu_visable = 1;
000140  2001              MOVS     r0,#1
000142  4934              LDR      r1,|L21.532|
000144  7008              STRB     r0,[r1,#0]
;;;502    
;;;503                //隐藏控件
;;;504                SetControlVisiable(0, 13, 0);
000146  2200              MOVS     r2,#0
000148  210d              MOVS     r1,#0xd
00014a  4610              MOV      r0,r2
00014c  f7fffffe          BL       SetControlVisiable
;;;505    
;;;506                //显示控件
;;;507                // SetControlVisiable(0, 10, 1);
;;;508                // SetControlVisiable(0, 11, 1);
;;;509                SetControlVisiable(0, 33, 1);
000150  2201              MOVS     r2,#1
000152  2121              MOVS     r1,#0x21
000154  2000              MOVS     r0,#0
000156  f7fffffe          BL       SetControlVisiable
;;;510                SetControlVisiable(0, 34, 1);
00015a  2201              MOVS     r2,#1
00015c  2122              MOVS     r1,#0x22
00015e  2000              MOVS     r0,#0
000160  f7fffffe          BL       SetControlVisiable
;;;511                SetTextValue(0, 10, "配置1");
000164  a22d              ADR      r2,|L21.540|
000166  210a              MOVS     r1,#0xa
000168  2000              MOVS     r0,#0
00016a  f7fffffe          BL       SetTextValue
;;;512                SetTextValue(0, 11, "配置2");
00016e  a22d              ADR      r2,|L21.548|
000170  210b              MOVS     r1,#0xb
000172  2000              MOVS     r0,#0
000174  f7fffffe          BL       SetTextValue
;;;513    
;;;514                //使能控件
;;;515                SetControlEnable(0, 5, 1);
000178  2201              MOVS     r2,#1
00017a  2105              MOVS     r1,#5
00017c  2000              MOVS     r0,#0
00017e  f7fffffe          BL       SetControlEnable
;;;516                SetControlEnable(0, 6, 1);
000182  2201              MOVS     r2,#1
000184  2106              MOVS     r1,#6
000186  2000              MOVS     r0,#0
000188  f7fffffe          BL       SetControlEnable
;;;517                SetControlEnable(0, 7, 1);
00018c  2201              MOVS     r2,#1
00018e  2107              MOVS     r1,#7
000190  2000              MOVS     r0,#0
000192  f7fffffe          BL       SetControlEnable
;;;518                SetControlEnable(0, 8, 1);
000196  2201              MOVS     r2,#1
000198  2108              MOVS     r1,#8
00019a  2000              MOVS     r0,#0
00019c  f7fffffe          BL       SetControlEnable
;;;519                SetControlEnable(0, 21, 1);
0001a0  2201              MOVS     r2,#1
0001a2  2115              MOVS     r1,#0x15
0001a4  2000              MOVS     r0,#0
0001a6  f7fffffe          BL       SetControlEnable
;;;520                SetControlEnable(0, 22, 1);
0001aa  2201              MOVS     r2,#1
0001ac  2116              MOVS     r1,#0x16
0001ae  2000              MOVS     r0,#0
0001b0  f7fffffe          BL       SetControlEnable
                  |L21.436|
;;;521            }
;;;522        }
;;;523        
;;;524        if(current_screen_id == 1)//主页面二
0001b4  4810              LDR      r0,|L21.504|
0001b6  8800              LDRH     r0,[r0,#0]  ; current_screen_id
0001b8  2801              CMP      r0,#1
0001ba  d107              BNE      |L21.460|
;;;525        {
;;;526            SetTextInt32(1, 11, Tmy.pressure, 0, 1); //显示压力
0001bc  9000              STR      r0,[sp,#0]
0001be  4813              LDR      r0,|L21.524|
0001c0  2300              MOVS     r3,#0
0001c2  210b              MOVS     r1,#0xb
0001c4  68c2              LDR      r2,[r0,#0xc]  ; Tmy
0001c6  2001              MOVS     r0,#1
0001c8  f7fffffe          BL       SetTextInt32
                  |L21.460|
;;;527        }
;;;528        
;;;529        //AnimationPlayFrame(0,4,0);//显示wifi图标
;;;530        if(current_screen_id == 2)//主页面三
0001cc  480a              LDR      r0,|L21.504|
0001ce  8800              LDRH     r0,[r0,#0]  ; current_screen_id
0001d0  2802              CMP      r0,#2
0001d2  d10f              BNE      |L21.500|
;;;531        {
;;;532            //if( Motor.state.bit.move )
;;;533            {
;;;534                lcd_prosser = 100*Motor.counter_step/Motor.max_step;
0001d4  480b              LDR      r0,|L21.516|
0001d6  6840              LDR      r0,[r0,#4]  ; Motor
0001d8  2164              MOVS     r1,#0x64
0001da  4348              MULS     r0,r1,r0
0001dc  4909              LDR      r1,|L21.516|
0001de  6889              LDR      r1,[r1,#8]  ; Motor
0001e0  fbb0f0f1          UDIV     r0,r0,r1
0001e4  4908              LDR      r1,|L21.520|
0001e6  8008              STRH     r0,[r1,#0]
;;;535                SetProgressValue(2,12,lcd_prosser);
0001e8  4608              MOV      r0,r1
0001ea  8802              LDRH     r2,[r0,#0]  ; lcd_prosser
0001ec  210c              MOVS     r1,#0xc
0001ee  2002              MOVS     r0,#2
0001f0  f7fffffe          BL       SetProgressValue
                  |L21.500|
;;;536                //SetTextInt32(2, 19, Motor.counter_step, 0, 1);
;;;537            }
;;;538        }
;;;539    
;;;540    }
0001f4  bd08              POP      {r3,pc}
;;;541    
                          ENDP

0001f6  0000              DCW      0x0000
                  |L21.504|
                          DCD      current_screen_id
                  |L21.508|
                          DCD      ble_state_tem
                  |L21.512|
                          DCD      Ble
                  |L21.516|
                          DCD      Motor
                  |L21.520|
                          DCD      lcd_prosser
                  |L21.524|
                          DCD      Tmy
                  |L21.528|
                          DCD      dg_sta
                  |L21.532|
                          DCD      menu_visable
                  |L21.536|
000218  202000            DCB      "  ",0
00021b  00                DCB      0
                  |L21.540|
00021c  c5e4d6c3          DCB      197,228,214,195,"1",0
000220  3100    
000222  00                DCB      0
000223  00                DCB      0
                  |L21.548|
000224  c5e4d6c3          DCB      197,228,214,195,"2",0
000228  3200    
00022a  00                DCB      0
00022b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  BLE_TxBuf
                          %        100
                  BLE_RxBuf
                          %        100
                  cmd_buffer
                          %        64

                          AREA ||.data||, DATA, ALIGN=2

                  lg_lcd_init
000000  00                DCB      0x00
                  dg_sta_befor
000001  000000            DCB      0x00,0x00,0x00
                  timer_lcd_update
                          DCD      0x00000000
                  timer_beep
                          DCD      0x00000000
                  lcd_prosser
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  timer_tick_count
                          DCD      0x00000000
                  current_screen_id
000014  0000              DCW      0x0000
                  menu_visable
000016  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\bsp_uart_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_uart_lcd_c_bef8e2f6____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_bsp_uart_lcd_c_bef8e2f6____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_uart_lcd_c_bef8e2f6____REVSH|
#line 128
|__asm___14_bsp_uart_lcd_c_bef8e2f6____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
