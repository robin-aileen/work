; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_key.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_key.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -I..\..\User\delay -I.\RTE\_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_key.crf ..\..\User\bsp\src\bsp_key.c]
                          THUMB

                          AREA ||i.IsKeyDown1||, CODE, READONLY, ALIGN=2

                  IsKeyDown1 PROC
;;;151    #else	
;;;152    static uint8_t IsKeyDown1(void) {if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L1.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000010          AND      r0,r0,#0x10
000008  b908              CBNZ     r0,|L1.14|
00000a  2001              MOVS     r0,#1
                  |L1.12|
00000c  4770              BX       lr
                  |L1.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L1.12|
;;;153    static uint8_t IsKeyDown2(void) {if ((GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown10||, CODE, READONLY, ALIGN=2

                  IsKeyDown10 PROC
;;;168    
;;;169    static uint8_t IsKeyDown10(void) {if ((GPIO_PORT_K10->IDR & GPIO_PIN_K10) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L2.20|
000002  6800              LDR      r0,[r0,#0]
000004  f4004080          AND      r0,r0,#0x4000
000008  b908              CBNZ     r0,|L2.14|
00000a  2001              MOVS     r0,#1
                  |L2.12|
00000c  4770              BX       lr
                  |L2.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L2.12|
;;;170    static uint8_t IsKeyDown11(void) {if ((GPIO_PORT_K11->IDR & GPIO_PIN_K11) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40010c08

                          AREA ||i.IsKeyDown11||, CODE, READONLY, ALIGN=2

                  IsKeyDown11 PROC
;;;169    static uint8_t IsKeyDown10(void) {if ((GPIO_PORT_K10->IDR & GPIO_PIN_K10) == 0) return 1;else return 0;}
;;;170    static uint8_t IsKeyDown11(void) {if ((GPIO_PORT_K11->IDR & GPIO_PIN_K11) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L3.20|
000002  6800              LDR      r0,[r0,#0]
000004  f4004000          AND      r0,r0,#0x8000
000008  b908              CBNZ     r0,|L3.14|
00000a  2001              MOVS     r0,#1
                  |L3.12|
00000c  4770              BX       lr
                  |L3.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L3.12|
;;;171    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40010c08

                          AREA ||i.IsKeyDown2||, CODE, READONLY, ALIGN=2

                  IsKeyDown2 PROC
;;;152    static uint8_t IsKeyDown1(void) {if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0) return 1;else return 0;}
;;;153    static uint8_t IsKeyDown2(void) {if ((GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L4.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000020          AND      r0,r0,#0x20
000008  b908              CBNZ     r0,|L4.14|
00000a  2001              MOVS     r0,#1
                  |L4.12|
00000c  4770              BX       lr
                  |L4.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L4.12|
;;;154    static uint8_t IsKeyDown3(void) {if ((GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown3||, CODE, READONLY, ALIGN=2

                  IsKeyDown3 PROC
;;;153    static uint8_t IsKeyDown2(void) {if ((GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0) return 1;else return 0;}
;;;154    static uint8_t IsKeyDown3(void) {if ((GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L5.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000040          AND      r0,r0,#0x40
000008  b908              CBNZ     r0,|L5.14|
00000a  2001              MOVS     r0,#1
                  |L5.12|
00000c  4770              BX       lr
                  |L5.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L5.12|
;;;155    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown4||, CODE, READONLY, ALIGN=2

                  IsKeyDown4 PROC
;;;160    /* 5·½ÏòÒ¡¸Ë */
;;;161    static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L6.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000080          AND      r0,r0,#0x80
000008  b908              CBNZ     r0,|L6.14|
00000a  2001              MOVS     r0,#1
                  |L6.12|
00000c  4770              BX       lr
                  |L6.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L6.12|
;;;162    static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40010808

                          AREA ||i.IsKeyDown5||, CODE, READONLY, ALIGN=2

                  IsKeyDown5 PROC
;;;161    static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
;;;162    static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L7.20|
000002  6880              LDR      r0,[r0,#8]
000004  f0000010          AND      r0,r0,#0x10
000008  b908              CBNZ     r0,|L7.14|
00000a  2001              MOVS     r0,#1
                  |L7.12|
00000c  4770              BX       lr
                  |L7.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L7.12|
;;;163    static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40011000

                          AREA ||i.IsKeyDown6||, CODE, READONLY, ALIGN=2

                  IsKeyDown6 PROC
;;;162    static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
;;;163    static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L8.20|
000002  6880              LDR      r0,[r0,#8]
000004  f0000020          AND      r0,r0,#0x20
000008  b908              CBNZ     r0,|L8.14|
00000a  2001              MOVS     r0,#1
                  |L8.12|
00000c  4770              BX       lr
                  |L8.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L8.12|
;;;164    static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40011000

                          AREA ||i.IsKeyDown7||, CODE, READONLY, ALIGN=2

                  IsKeyDown7 PROC
;;;163    static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
;;;164    static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L9.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b908              CBNZ     r0,|L9.14|
00000a  2001              MOVS     r0,#1
                  |L9.12|
00000c  4770              BX       lr
                  |L9.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L9.12|
;;;165    static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40010c08

                          AREA ||i.IsKeyDown8||, CODE, READONLY, ALIGN=2

                  IsKeyDown8 PROC
;;;164    static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
;;;165    static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L10.20|
000002  6800              LDR      r0,[r0,#0]
000004  f0000002          AND      r0,r0,#2
000008  b908              CBNZ     r0,|L10.14|
00000a  2001              MOVS     r0,#1
                  |L10.12|
00000c  4770              BX       lr
                  |L10.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L10.12|
;;;166    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40010c08

                          AREA ||i.IsKeyDown9||, CODE, READONLY, ALIGN=2

                  IsKeyDown9 PROC
;;;166    
;;;167    static uint8_t IsKeyDown9(void) {if ((GPIO_PORT_K9->IDR & GPIO_PIN_K9) == 0) return 1;else return 0;}
000000  4804              LDR      r0,|L11.20|
000002  6800              LDR      r0,[r0,#0]
000004  f4005000          AND      r0,r0,#0x2000
000008  b908              CBNZ     r0,|L11.14|
00000a  2001              MOVS     r0,#1
                  |L11.12|
00000c  4770              BX       lr
                  |L11.14|
00000e  2000              MOVS     r0,#0
000010  e7fc              B        |L11.12|
;;;168    
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x40010c08

                          AREA ||i.bsp_ClearKey||, CODE, READONLY, ALIGN=2

                  bsp_ClearKey PROC
;;;298    */
;;;299    void bsp_ClearKey(void)
000000  4802              LDR      r0,|L12.12|
;;;300    {
;;;301    	s_tKey.Read = s_tKey.Write;
000002  7ac0              LDRB     r0,[r0,#0xb]  ; s_tKey
000004  4901              LDR      r1,|L12.12|
000006  7288              STRB     r0,[r1,#0xa]
;;;302    }
000008  4770              BX       lr
;;;303    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      s_tKey

                          AREA ||i.bsp_DetectKey||, CODE, READONLY, ALIGN=2

                  bsp_DetectKey PROC
;;;424    */
;;;425    static void bsp_DetectKey(uint8_t i)
000000  b570              PUSH     {r4-r6,lr}
;;;426    {
000002  4605              MOV      r5,r0
;;;427    	KEY_T *pBtn;
;;;428    
;;;429    	/*
;;;430    		Èç¹ûÃ»ÓÐ³õÊ¼»¯°´¼üº¯Êý£¬Ôò±¨´í
;;;431    		if (s_tBtn[i].IsKeyDownFunc == 0)
;;;432    		{
;;;433    			printf("Fault : DetectButton(), s_tBtn[i].IsKeyDownFunc undefine");
;;;434    		}
;;;435    	*/
;;;436    
;;;437    	pBtn = &s_tBtn[i];
000004  4830              LDR      r0,|L13.200|
000006  eb001405          ADD      r4,r0,r5,LSL #4
;;;438    	if (pBtn->IsKeyDownFunc())
00000a  6820              LDR      r0,[r4,#0]
00000c  4780              BLX      r0
00000e  2800              CMP      r0,#0
000010  d03e              BEQ      |L13.144|
;;;439    	{
;;;440    		if (pBtn->Count < KEY_FILTER_TIME)
000012  7920              LDRB     r0,[r4,#4]
000014  2805              CMP      r0,#5
000016  da02              BGE      |L13.30|
;;;441    		{
;;;442    			pBtn->Count = KEY_FILTER_TIME;
000018  2005              MOVS     r0,#5
00001a  7120              STRB     r0,[r4,#4]
00001c  e052              B        |L13.196|
                  |L13.30|
;;;443    		}
;;;444    		else if(pBtn->Count < 2 * KEY_FILTER_TIME)
00001e  7920              LDRB     r0,[r4,#4]
000020  280a              CMP      r0,#0xa
000022  da03              BGE      |L13.44|
;;;445    		{
;;;446    			pBtn->Count++;
000024  7920              LDRB     r0,[r4,#4]
000026  1c40              ADDS     r0,r0,#1
000028  7120              STRB     r0,[r4,#4]
00002a  e04b              B        |L13.196|
                  |L13.44|
;;;447    		}
;;;448    		else
;;;449    		{
;;;450    			if (pBtn->State == 0)
00002c  7aa0              LDRB     r0,[r4,#0xa]
00002e  b938              CBNZ     r0,|L13.64|
;;;451    			{
;;;452    				pBtn->State = 1;
000030  2001              MOVS     r0,#1
000032  72a0              STRB     r0,[r4,#0xa]
;;;453    
;;;454    				/* ·¢ËÍ°´Å¥°´ÏÂµÄÏûÏ¢ */
;;;455    				bsp_PutKey((uint8_t)(3 * i + 1));
000034  eb050145          ADD      r1,r5,r5,LSL #1
000038  1c49              ADDS     r1,r1,#1
00003a  b2c8              UXTB     r0,r1
00003c  f7fffffe          BL       bsp_PutKey
                  |L13.64|
;;;456    			}
;;;457    
;;;458    			if (pBtn->LongTime > 0)
000040  8920              LDRH     r0,[r4,#8]
000042  2800              CMP      r0,#0
000044  dd3e              BLE      |L13.196|
;;;459    			{
;;;460    				if (pBtn->LongCount < pBtn->LongTime)
000046  88e0              LDRH     r0,[r4,#6]
000048  8921              LDRH     r1,[r4,#8]
00004a  4288              CMP      r0,r1
00004c  da0d              BGE      |L13.106|
;;;461    				{
;;;462    					/* ·¢ËÍ°´Å¥³ÖÐø°´ÏÂµÄÏûÏ¢ */
;;;463    					if (++pBtn->LongCount == pBtn->LongTime)
00004e  88e0              LDRH     r0,[r4,#6]
000050  1c40              ADDS     r0,r0,#1
000052  b280              UXTH     r0,r0
000054  80e0              STRH     r0,[r4,#6]
000056  8921              LDRH     r1,[r4,#8]
000058  4288              CMP      r0,r1
00005a  d133              BNE      |L13.196|
;;;464    					{
;;;465    						/* ¼üÖµ·ÅÈë°´¼üFIFO */
;;;466    						bsp_PutKey((uint8_t)(3 * i + 3));
00005c  eb050145          ADD      r1,r5,r5,LSL #1
000060  1cc9              ADDS     r1,r1,#3
000062  b2c8              UXTB     r0,r1
000064  f7fffffe          BL       bsp_PutKey
000068  e02c              B        |L13.196|
                  |L13.106|
;;;467    					}
;;;468    				}
;;;469    				else
;;;470    				{
;;;471    					if (pBtn->RepeatSpeed > 0)
00006a  7ae0              LDRB     r0,[r4,#0xb]
00006c  2800              CMP      r0,#0
00006e  dd29              BLE      |L13.196|
;;;472    					{
;;;473    						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed)
000070  7b20              LDRB     r0,[r4,#0xc]
000072  1c40              ADDS     r0,r0,#1
000074  b2c0              UXTB     r0,r0
000076  7320              STRB     r0,[r4,#0xc]
000078  7ae1              LDRB     r1,[r4,#0xb]
00007a  4288              CMP      r0,r1
00007c  db22              BLT      |L13.196|
;;;474    						{
;;;475    							pBtn->RepeatCount = 0;
00007e  2000              MOVS     r0,#0
000080  7320              STRB     r0,[r4,#0xc]
;;;476    							/* ³£°´¼üºó£¬Ã¿¸ô10ms·¢ËÍ1¸ö°´¼ü */
;;;477    							bsp_PutKey((uint8_t)(3 * i + 1));
000082  eb050145          ADD      r1,r5,r5,LSL #1
000086  1c49              ADDS     r1,r1,#1
000088  b2c8              UXTB     r0,r1
00008a  f7fffffe          BL       bsp_PutKey
00008e  e019              B        |L13.196|
                  |L13.144|
;;;478    						}
;;;479    					}
;;;480    				}
;;;481    			}
;;;482    		}
;;;483    	}
;;;484    	else
;;;485    	{
;;;486    		if(pBtn->Count > KEY_FILTER_TIME)
000090  7920              LDRB     r0,[r4,#4]
000092  2805              CMP      r0,#5
000094  dd02              BLE      |L13.156|
;;;487    		{
;;;488    			pBtn->Count = KEY_FILTER_TIME;
000096  2005              MOVS     r0,#5
000098  7120              STRB     r0,[r4,#4]
00009a  e010              B        |L13.190|
                  |L13.156|
;;;489    		}
;;;490    		else if(pBtn->Count != 0)
00009c  7920              LDRB     r0,[r4,#4]
00009e  b118              CBZ      r0,|L13.168|
;;;491    		{
;;;492    			pBtn->Count--;
0000a0  7920              LDRB     r0,[r4,#4]
0000a2  1e40              SUBS     r0,r0,#1
0000a4  7120              STRB     r0,[r4,#4]
0000a6  e00a              B        |L13.190|
                  |L13.168|
;;;493    		}
;;;494    		else
;;;495    		{
;;;496    			if (pBtn->State == 1)
0000a8  7aa0              LDRB     r0,[r4,#0xa]
0000aa  2801              CMP      r0,#1
0000ac  d107              BNE      |L13.190|
;;;497    			{
;;;498    				pBtn->State = 0;
0000ae  2000              MOVS     r0,#0
0000b0  72a0              STRB     r0,[r4,#0xa]
;;;499    
;;;500    				/* ·¢ËÍ°´Å¥µ¯ÆðµÄÏûÏ¢ */
;;;501    				bsp_PutKey((uint8_t)(3 * i + 2));
0000b2  eb050145          ADD      r1,r5,r5,LSL #1
0000b6  1c89              ADDS     r1,r1,#2
0000b8  b2c8              UXTB     r0,r1
0000ba  f7fffffe          BL       bsp_PutKey
                  |L13.190|
;;;502    			}
;;;503    		}
;;;504    
;;;505    		pBtn->LongCount = 0;
0000be  2000              MOVS     r0,#0
0000c0  80e0              STRH     r0,[r4,#6]
;;;506    		pBtn->RepeatCount = 0;
0000c2  7320              STRB     r0,[r4,#0xc]
                  |L13.196|
;;;507    	}
;;;508    }
0000c4  bd70              POP      {r4-r6,pc}
;;;509    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L13.200|
                          DCD      s_tBtn

                          AREA ||i.bsp_GetKey||, CODE, READONLY, ALIGN=2

                  bsp_GetKey PROC
;;;211    */
;;;212    uint8_t bsp_GetKey(void)
000000  480b              LDR      r0,|L14.48|
;;;213    {
;;;214    	uint8_t ret;
;;;215    
;;;216    	if (s_tKey.Read == s_tKey.Write)
000002  7a80              LDRB     r0,[r0,#0xa]  ; s_tKey
000004  4a0a              LDR      r2,|L14.48|
000006  7ad2              LDRB     r2,[r2,#0xb]  ; s_tKey
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L14.16|
;;;217    	{
;;;218    		return KEY_NONE;
00000c  2000              MOVS     r0,#0
                  |L14.14|
;;;219    	}
;;;220    	else
;;;221    	{
;;;222    		ret = s_tKey.Buf[s_tKey.Read];
;;;223    
;;;224    		if (++s_tKey.Read >= KEY_FIFO_SIZE)
;;;225    		{
;;;226    			s_tKey.Read = 0;
;;;227    		}
;;;228    		return ret;
;;;229    	}
;;;230    }
00000e  4770              BX       lr
                  |L14.16|
000010  4807              LDR      r0,|L14.48|
000012  7a80              LDRB     r0,[r0,#0xa]          ;222  ; s_tKey
000014  4a06              LDR      r2,|L14.48|
000016  5c11              LDRB     r1,[r2,r0]            ;222
000018  4610              MOV      r0,r2                 ;224
00001a  7a80              LDRB     r0,[r0,#0xa]          ;224  ; s_tKey
00001c  1c40              ADDS     r0,r0,#1              ;224
00001e  b2c0              UXTB     r0,r0                 ;224
000020  7290              STRB     r0,[r2,#0xa]          ;224
000022  280a              CMP      r0,#0xa               ;224
000024  db01              BLT      |L14.42|
000026  2000              MOVS     r0,#0                 ;226
000028  7290              STRB     r0,[r2,#0xa]          ;226
                  |L14.42|
00002a  4608              MOV      r0,r1                 ;228
00002c  e7ef              B        |L14.14|
;;;231    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      s_tKey

                          AREA ||i.bsp_GetKey2||, CODE, READONLY, ALIGN=2

                  bsp_GetKey2 PROC
;;;239    */
;;;240    uint8_t bsp_GetKey2(void)
000000  480b              LDR      r0,|L15.48|
;;;241    {
;;;242    	uint8_t ret;
;;;243    
;;;244    	if (s_tKey.Read2 == s_tKey.Write)
000002  7b00              LDRB     r0,[r0,#0xc]  ; s_tKey
000004  4a0a              LDR      r2,|L15.48|
000006  7ad2              LDRB     r2,[r2,#0xb]  ; s_tKey
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L15.16|
;;;245    	{
;;;246    		return KEY_NONE;
00000c  2000              MOVS     r0,#0
                  |L15.14|
;;;247    	}
;;;248    	else
;;;249    	{
;;;250    		ret = s_tKey.Buf[s_tKey.Read2];
;;;251    
;;;252    		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
;;;253    		{
;;;254    			s_tKey.Read2 = 0;
;;;255    		}
;;;256    		return ret;
;;;257    	}
;;;258    }
00000e  4770              BX       lr
                  |L15.16|
000010  4807              LDR      r0,|L15.48|
000012  7b00              LDRB     r0,[r0,#0xc]          ;250  ; s_tKey
000014  4a06              LDR      r2,|L15.48|
000016  5c11              LDRB     r1,[r2,r0]            ;250
000018  4610              MOV      r0,r2                 ;252
00001a  7b00              LDRB     r0,[r0,#0xc]          ;252  ; s_tKey
00001c  1c40              ADDS     r0,r0,#1              ;252
00001e  b2c0              UXTB     r0,r0                 ;252
000020  7310              STRB     r0,[r2,#0xc]          ;252
000022  280a              CMP      r0,#0xa               ;252
000024  db01              BLT      |L15.42|
000026  2000              MOVS     r0,#0                 ;254
000028  7310              STRB     r0,[r2,#0xc]          ;254
                  |L15.42|
00002a  4608              MOV      r0,r1                 ;256
00002c  e7ef              B        |L15.14|
;;;259    
                          ENDP

00002e  0000              DCW      0x0000
                  |L15.48|
                          DCD      s_tKey

                          AREA ||i.bsp_GetKeyState||, CODE, READONLY, ALIGN=2

                  bsp_GetKeyState PROC
;;;267    */
;;;268    uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID)
000000  4601              MOV      r1,r0
;;;269    {
;;;270    	return s_tBtn[_ucKeyID].State;
000002  4802              LDR      r0,|L16.12|
000004  eb001001          ADD      r0,r0,r1,LSL #4
000008  7a80              LDRB     r0,[r0,#0xa]
;;;271    }
00000a  4770              BX       lr
;;;272    
                          ENDP

                  |L16.12|
                          DCD      s_tBtn

                          AREA ||i.bsp_InitKey||, CODE, READONLY, ALIGN=1

                  bsp_InitKey PROC
;;;179    */
;;;180    void bsp_InitKey(void)
000000  b510              PUSH     {r4,lr}
;;;181    {
;;;182    	bsp_InitKeyVar();		/* ³õÊ¼»¯°´¼ü±äÁ¿ */
000002  f7fffffe          BL       bsp_InitKeyVar
;;;183    	bsp_InitKeyHard();		/* ³õÊ¼»¯°´¼üÓ²¼þ */
000006  f7fffffe          BL       bsp_InitKeyHard
;;;184    }
00000a  bd10              POP      {r4,pc}
;;;185    
                          ENDP


                          AREA ||i.bsp_InitKeyHard||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyHard PROC
;;;311    */
;;;312    static void bsp_InitKeyHard(void)
000000  b508              PUSH     {r3,lr}
;;;313    {
;;;314    	GPIO_InitTypeDef GPIO_InitStructure;
;;;315    
;;;316    	/* µÚ1²½£º´ò¿ªGPIOÊ±ÖÓ */
;;;317    	RCC_APB2PeriphClockCmd(RCC_ALL_KEY, ENABLE);
000002  2101              MOVS     r1,#1
000004  201c              MOVS     r0,#0x1c
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;318    
;;;319    	/* µÚ2²½£ºÅäÖÃËùÓÐµÄ°´¼üGPIOÎª¸¡¶¯ÊäÈëÄ£Ê½(Êµ¼ÊÉÏCPU¸´Î»ºó¾ÍÊÇÊäÈë×´Ì¬) */
;;;320    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;321    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	/* ÊäÈë¸¡¿ÕÄ£Ê½ */
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;322    	
;;;323    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K1;
000016  2010              MOVS     r0,#0x10
000018  f8ad0000          STRH     r0,[sp,#0]
;;;324    	GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4826              LDR      r0,|L18.184|
000020  f7fffffe          BL       GPIO_Init
;;;325    
;;;326    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K2;
000024  2020              MOVS     r0,#0x20
000026  f8ad0000          STRH     r0,[sp,#0]
;;;327    	GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4822              LDR      r0,|L18.184|
00002e  f7fffffe          BL       GPIO_Init
;;;328    
;;;329    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K3;
000032  2040              MOVS     r0,#0x40
000034  f8ad0000          STRH     r0,[sp,#0]
;;;330    	GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  481f              LDR      r0,|L18.184|
00003c  f7fffffe          BL       GPIO_Init
;;;331    
;;;332    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K4;
000040  2080              MOVS     r0,#0x80
000042  f8ad0000          STRH     r0,[sp,#0]
;;;333    	GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  481b              LDR      r0,|L18.184|
00004a  f7fffffe          BL       GPIO_Init
;;;334    
;;;335    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K5;
00004e  2010              MOVS     r0,#0x10
000050  f8ad0000          STRH     r0,[sp,#0]
;;;336    	GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
000054  4669              MOV      r1,sp
000056  4819              LDR      r0,|L18.188|
000058  f7fffffe          BL       GPIO_Init
;;;337    
;;;338    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K6;
00005c  2020              MOVS     r0,#0x20
00005e  f8ad0000          STRH     r0,[sp,#0]
;;;339    	GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
000062  4669              MOV      r1,sp
000064  4815              LDR      r0,|L18.188|
000066  f7fffffe          BL       GPIO_Init
;;;340    
;;;341    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K7;
00006a  2001              MOVS     r0,#1
00006c  f8ad0000          STRH     r0,[sp,#0]
;;;342    	GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4813              LDR      r0,|L18.192|
000074  f7fffffe          BL       GPIO_Init
;;;343    
;;;344    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K8;
000078  2002              MOVS     r0,#2
00007a  f8ad0000          STRH     r0,[sp,#0]
;;;345    	GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
00007e  4669              MOV      r1,sp
000080  480f              LDR      r0,|L18.192|
000082  f7fffffe          BL       GPIO_Init
;;;346    	
;;;347    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K9;
000086  f44f5000          MOV      r0,#0x2000
00008a  f8ad0000          STRH     r0,[sp,#0]
;;;348    	GPIO_Init(GPIO_PORT_K9, &GPIO_InitStructure);
00008e  4669              MOV      r1,sp
000090  480b              LDR      r0,|L18.192|
000092  f7fffffe          BL       GPIO_Init
;;;349    	
;;;350    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K10;
000096  f44f4080          MOV      r0,#0x4000
00009a  f8ad0000          STRH     r0,[sp,#0]
;;;351    	GPIO_Init(GPIO_PORT_K10, &GPIO_InitStructure);
00009e  4669              MOV      r1,sp
0000a0  4807              LDR      r0,|L18.192|
0000a2  f7fffffe          BL       GPIO_Init
;;;352    	
;;;353    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K11;
0000a6  f44f4000          MOV      r0,#0x8000
0000aa  f8ad0000          STRH     r0,[sp,#0]
;;;354    	GPIO_Init(GPIO_PORT_K11, &GPIO_InitStructure);
0000ae  4669              MOV      r1,sp
0000b0  4803              LDR      r0,|L18.192|
0000b2  f7fffffe          BL       GPIO_Init
;;;355    }
0000b6  bd08              POP      {r3,pc}
;;;356    
                          ENDP

                  |L18.184|
                          DCD      0x40010800
                  |L18.188|
                          DCD      0x40011000
                  |L18.192|
                          DCD      0x40010c00

                          AREA ||i.bsp_InitKeyVar||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyVar PROC
;;;364    */
;;;365    static void bsp_InitKeyVar(void)
000000  2100              MOVS     r1,#0
;;;366    {
;;;367    	uint8_t i;
;;;368    
;;;369    	/* ¶Ô°´¼üFIFO¶ÁÐ´Ö¸ÕëÇåÁã */
;;;370    	s_tKey.Read = 0;
000002  4a1e              LDR      r2,|L19.124|
000004  7291              STRB     r1,[r2,#0xa]
;;;371    	s_tKey.Write = 0;
000006  72d1              STRB     r1,[r2,#0xb]
;;;372    	s_tKey.Read2 = 0;
000008  7311              STRB     r1,[r2,#0xc]
;;;373    
;;;374    	/* ¸øÃ¿¸ö°´¼ü½á¹¹Ìå³ÉÔ±±äÁ¿¸³Ò»×éÈ±Ê¡Öµ */
;;;375    	for (i = 0; i < KEY_COUNT; i++)
00000a  2000              MOVS     r0,#0
00000c  e018              B        |L19.64|
                  |L19.14|
;;;376    	{
;;;377    		s_tBtn[i].LongTime = 0;//KEY_LONG_TIME;			/* ³¤°´Ê±¼ä 0 ±íÊ¾²»¼ì²â³¤°´¼üÊÂ¼þ */
00000e  2100              MOVS     r1,#0
000010  4a1b              LDR      r2,|L19.128|
000012  eb021200          ADD      r2,r2,r0,LSL #4
000016  8111              STRH     r1,[r2,#8]
;;;378    		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* ¼ÆÊýÆ÷ÉèÖÃÎªÂË²¨Ê±¼äµÄÒ»°ë */
000018  2102              MOVS     r1,#2
00001a  4a19              LDR      r2,|L19.128|
00001c  eb021200          ADD      r2,r2,r0,LSL #4
000020  7111              STRB     r1,[r2,#4]
;;;379    		s_tBtn[i].State = 0;							/* °´¼üÈ±Ê¡×´Ì¬£¬0ÎªÎ´°´ÏÂ */
000022  2100              MOVS     r1,#0
000024  4a16              LDR      r2,|L19.128|
000026  eb021200          ADD      r2,r2,r0,LSL #4
00002a  7291              STRB     r1,[r2,#0xa]
;;;380    		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* °´¼ü°´ÏÂµÄ¼üÖµ´úÂë */
;;;381    		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* °´¼üµ¯ÆðµÄ¼üÖµ´úÂë */
;;;382    		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* °´¼ü±»³ÖÐø°´ÏÂµÄ¼üÖµ´úÂë */
;;;383    		s_tBtn[i].RepeatSpeed = 0;						/* °´¼üÁ¬·¢µÄËÙ¶È£¬0±íÊ¾²»Ö§³ÖÁ¬·¢ */
00002c  4a14              LDR      r2,|L19.128|
00002e  eb021200          ADD      r2,r2,r0,LSL #4
000032  72d1              STRB     r1,[r2,#0xb]
;;;384    		s_tBtn[i].RepeatCount = 0;						/* Á¬·¢¼ÆÊýÆ÷ */
000034  4a12              LDR      r2,|L19.128|
000036  eb021200          ADD      r2,r2,r0,LSL #4
00003a  7311              STRB     r1,[r2,#0xc]
00003c  1c41              ADDS     r1,r0,#1              ;375
00003e  b2c8              UXTB     r0,r1                 ;375
                  |L19.64|
000040  280b              CMP      r0,#0xb               ;375
000042  dbe4              BLT      |L19.14|
;;;385    	}
;;;386    
;;;387    	/* Èç¹ûÐèÒªµ¥¶À¸ü¸ÄÄ³¸ö°´¼üµÄ²ÎÊý£¬¿ÉÒÔÔÚ´Ëµ¥¶ÀÖØÐÂ¸³Öµ */
;;;388    	/* ±ÈÈç£¬ÎÒÃÇÏ£Íû°´¼ü1°´ÏÂ³¬¹ý1Ãëºó£¬×Ô¶¯ÖØ·¢ÏàÍ¬¼üÖµ */
;;;389    //	s_tBtn[KID_JOY_U].LongTime = 0;//100;
;;;390    //	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
;;;391    //
;;;392    //	s_tBtn[KID_JOY_D].LongTime = 0;//100;
;;;393    //	s_tBtn[KID_JOY_D].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
;;;394    //
;;;395    //	s_tBtn[KID_JOY_L].LongTime = 0;//100;
;;;396    //	s_tBtn[KID_JOY_L].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
;;;397    //
;;;398    //	s_tBtn[KID_JOY_R].LongTime = 0;//100;
;;;399    //	s_tBtn[KID_JOY_R].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
;;;400    
;;;401    	/* ÅÐ¶Ï°´¼ü°´ÏÂµÄº¯Êý */
;;;402    	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
000044  490f              LDR      r1,|L19.132|
000046  4a0e              LDR      r2,|L19.128|
000048  6011              STR      r1,[r2,#0]  ; s_tBtn
;;;403    	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
00004a  490f              LDR      r1,|L19.136|
00004c  6111              STR      r1,[r2,#0x10]  ; s_tBtn
;;;404    	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
00004e  490f              LDR      r1,|L19.140|
000050  6211              STR      r1,[r2,#0x20]  ; s_tBtn
;;;405    	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
000052  490f              LDR      r1,|L19.144|
000054  6311              STR      r1,[r2,#0x30]  ; s_tBtn
;;;406    	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
000056  490f              LDR      r1,|L19.148|
000058  6411              STR      r1,[r2,#0x40]  ; s_tBtn
;;;407    	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
00005a  490f              LDR      r1,|L19.152|
00005c  6511              STR      r1,[r2,#0x50]  ; s_tBtn
;;;408    	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
00005e  490f              LDR      r1,|L19.156|
000060  6611              STR      r1,[r2,#0x60]  ; s_tBtn
;;;409    	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
000062  490f              LDR      r1,|L19.160|
000064  6711              STR      r1,[r2,#0x70]  ; s_tBtn
;;;410    
;;;411    	/* ´«¸ÐÆ÷ */
;;;412    	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
000066  490f              LDR      r1,|L19.164|
000068  f8c21080          STR      r1,[r2,#0x80]  ; s_tBtn
;;;413    	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
00006c  490e              LDR      r1,|L19.168|
00006e  f8c21090          STR      r1,[r2,#0x90]  ; s_tBtn
;;;414    	s_tBtn[10].IsKeyDownFunc = IsKeyDown11;
000072  490e              LDR      r1,|L19.172|
000074  f8c210a0          STR      r1,[r2,#0xa0]  ; s_tBtn
;;;415    }
000078  4770              BX       lr
;;;416    
                          ENDP

00007a  0000              DCW      0x0000
                  |L19.124|
                          DCD      s_tKey
                  |L19.128|
                          DCD      s_tBtn
                  |L19.132|
                          DCD      IsKeyDown1
                  |L19.136|
                          DCD      IsKeyDown2
                  |L19.140|
                          DCD      IsKeyDown3
                  |L19.144|
                          DCD      IsKeyDown4
                  |L19.148|
                          DCD      IsKeyDown5
                  |L19.152|
                          DCD      IsKeyDown6
                  |L19.156|
                          DCD      IsKeyDown7
                  |L19.160|
                          DCD      IsKeyDown8
                  |L19.164|
                          DCD      IsKeyDown9
                  |L19.168|
                          DCD      IsKeyDown10
                  |L19.172|
                          DCD      IsKeyDown11

                          AREA ||i.bsp_KeyScan||, CODE, READONLY, ALIGN=1

                  bsp_KeyScan PROC
;;;517    */
;;;518    void bsp_KeyScan(void)
000000  b510              PUSH     {r4,lr}
;;;519    {
;;;520    	uint8_t i;
;;;521    
;;;522    	for (i = 0; i < KEY_COUNT; i++)
000002  2400              MOVS     r4,#0
000004  e004              B        |L20.16|
                  |L20.6|
;;;523    	{
;;;524    		bsp_DetectKey(i);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       bsp_DetectKey
00000c  1c60              ADDS     r0,r4,#1              ;522
00000e  b2c4              UXTB     r4,r0                 ;522
                  |L20.16|
000010  2c0b              CMP      r4,#0xb               ;522
000012  dbf8              BLT      |L20.6|
;;;525    	}
;;;526    }
000014  bd10              POP      {r4,pc}
;;;527    
                          ENDP


                          AREA ||i.bsp_PutKey||, CODE, READONLY, ALIGN=2

                  bsp_PutKey PROC
;;;193    */
;;;194    void bsp_PutKey(uint8_t _KeyCode)
000000  4906              LDR      r1,|L21.28|
;;;195    {
;;;196    	s_tKey.Buf[s_tKey.Write] = _KeyCode;
000002  7ac9              LDRB     r1,[r1,#0xb]  ; s_tKey
000004  4a05              LDR      r2,|L21.28|
000006  5450              STRB     r0,[r2,r1]
;;;197    
;;;198    	if (++s_tKey.Write  >= KEY_FIFO_SIZE)
000008  4611              MOV      r1,r2
00000a  7ac9              LDRB     r1,[r1,#0xb]  ; s_tKey
00000c  1c49              ADDS     r1,r1,#1
00000e  b2c9              UXTB     r1,r1
000010  72d1              STRB     r1,[r2,#0xb]
000012  290a              CMP      r1,#0xa
000014  db01              BLT      |L21.26|
;;;199    	{
;;;200    		s_tKey.Write = 0;
000016  2100              MOVS     r1,#0
000018  72d1              STRB     r1,[r2,#0xb]
                  |L21.26|
;;;201    	}
;;;202    }
00001a  4770              BX       lr
;;;203    
                          ENDP

                  |L21.28|
                          DCD      s_tKey

                          AREA ||i.bsp_SetKeyParam||, CODE, READONLY, ALIGN=2

                  bsp_SetKeyParam PROC
;;;282    */
;;;283    void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t  _RepeatSpeed)
000000  b510              PUSH     {r4,lr}
;;;284    {
;;;285    	s_tBtn[_ucKeyID].LongTime = _LongTime;			/* ³¤°´Ê±¼ä 0 ±íÊ¾²»¼ì²â³¤°´¼üÊÂ¼þ */
000002  4b07              LDR      r3,|L22.32|
000004  eb031300          ADD      r3,r3,r0,LSL #4
000008  8119              STRH     r1,[r3,#8]
;;;286    	s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed;			/* °´¼üÁ¬·¢µÄËÙ¶È£¬0±íÊ¾²»Ö§³ÖÁ¬·¢ */
00000a  4b05              LDR      r3,|L22.32|
00000c  eb031300          ADD      r3,r3,r0,LSL #4
000010  72da              STRB     r2,[r3,#0xb]
;;;287    	s_tBtn[_ucKeyID].RepeatCount = 0;						/* Á¬·¢¼ÆÊýÆ÷ */
000012  2300              MOVS     r3,#0
000014  4c02              LDR      r4,|L22.32|
000016  eb041400          ADD      r4,r4,r0,LSL #4
00001a  7323              STRB     r3,[r4,#0xc]
;;;288    }
00001c  bd10              POP      {r4,pc}
;;;289    
                          ENDP

00001e  0000              DCW      0x0000
                  |L22.32|
                          DCD      s_tBtn

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BLE_TxBuf
                          %        100
                  BLE_RxBuf
                          %        100
                  s_tBtn
                          %        176
                  s_tKey
                          %        13

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_key_c_dc6aca1d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REVSH|
#line 128
|__asm___9_bsp_key_c_dc6aca1d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
