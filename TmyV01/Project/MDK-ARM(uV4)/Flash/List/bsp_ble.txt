; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_ble.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_ble.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -ID:\MyDoc\MyPrj\MyGitPrj\TmyV01\Project\MDK-ARM(uV4)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_ble.crf ..\..\User\bsp\src\bsp_ble.c]
                          THUMB

                          AREA ||i.BLE_CheckState||, CODE, READONLY, ALIGN=2

                  BLE_CheckState PROC
;;;30     
;;;31     void BLE_CheckState( void )
000000  b510              PUSH     {r4,lr}
;;;32     {
;;;33         //uint16_t tem16;
;;;34         
;;;35         if( GPIO_ReadInputData( GPIO_PORT_BLE_LINK ) & GPIO_PIN_BLE_LINK )
000002  480a              LDR      r0,|L1.44|
000004  f7fffffe          BL       GPIO_ReadInputData
000008  f4004000          AND      r0,r0,#0x8000
00000c  b138              CBZ      r0,|L1.30|
;;;36         {
;;;37             Ble.state.bit.link = 1;
00000e  4808              LDR      r0,|L1.48|
000010  7800              LDRB     r0,[r0,#0]  ; Ble
000012  f0200001          BIC      r0,r0,#1
000016  1c40              ADDS     r0,r0,#1
000018  4905              LDR      r1,|L1.48|
00001a  7008              STRB     r0,[r1,#0]
00001c  e005              B        |L1.42|
                  |L1.30|
;;;38         }else
;;;39         {
;;;40             Ble.state.bit.link = 0;
00001e  4804              LDR      r0,|L1.48|
000020  7800              LDRB     r0,[r0,#0]  ; Ble
000022  f0200001          BIC      r0,r0,#1
000026  4902              LDR      r1,|L1.48|
000028  7008              STRB     r0,[r1,#0]
                  |L1.42|
;;;41         }
;;;42     
;;;43     }
00002a  bd10              POP      {r4,pc}
;;;44     // void ble_get_token( uint8_t *number )
                          ENDP

                  |L1.44|
                          DCD      0x40010800
                  |L1.48|
                          DCD      Ble

                          AREA ||i.BLE_GetMsg||, CODE, READONLY, ALIGN=1

                  BLE_GetMsg PROC
;;;446    
;;;447    uint8_t BLE_GetMsg( void )
000000  b538              PUSH     {r3-r5,lr}
;;;448    {
;;;449        uint8_t err, tem8=0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;450        err = comGetChar(BLE_COM, &tem8);
000006  4669              MOV      r1,sp
000008  2003              MOVS     r0,#3
00000a  f7fffffe          BL       comGetChar
00000e  4604              MOV      r4,r0
;;;451        if( !err ) //无数据
000010  b90c              CBNZ     r4,|L2.22|
;;;452        {
;;;453            tem8=0;
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
                  |L2.22|
;;;454        }
;;;455    
;;;456        return tem8;
000016  f89d0000          LDRB     r0,[sp,#0]
;;;457    }
00001a  bd38              POP      {r3-r5,pc}
;;;458    
                          ENDP


                          AREA ||i.BLE_HwReset||, CODE, READONLY, ALIGN=2

                  BLE_HwReset PROC
;;;107    */
;;;108    void BLE_HwReset(void)
000000  b510              PUSH     {r4,lr}
;;;109    {
;;;110        debug_ble("Ble reset!\r\n");
000002  a008              ADR      r0,|L3.36|
000004  f7fffffe          BL       debug_ble
;;;111        
;;;112        GPIO_PORT_BLE_RESET->BRR = GPIO_PIN_BLE_RESET;//拉低2S
000008  2040              MOVS     r0,#0x40
00000a  490a              LDR      r1,|L3.52|
00000c  6008              STR      r0,[r1,#0]
;;;113        vTaskDelay(pdMS_TO_TICKS(100));
00000e  2064              MOVS     r0,#0x64
000010  f7fffffe          BL       vTaskDelay
;;;114        GPIO_PORT_BLE_RESET->BSRR = GPIO_PIN_BLE_RESET;//再拉高
000014  2040              MOVS     r0,#0x40
000016  4907              LDR      r1,|L3.52|
000018  1f09              SUBS     r1,r1,#4
00001a  6008              STR      r0,[r1,#0]
;;;115        vTaskDelay(pdMS_TO_TICKS(100));
00001c  2064              MOVS     r0,#0x64
00001e  f7fffffe          BL       vTaskDelay
;;;116    }
000022  bd10              POP      {r4,pc}
;;;117    
                          ENDP

                  |L3.36|
000024  426c6520          DCB      "Ble reset!\r\n",0
000028  72657365
00002c  74210d0a
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
                  |L3.52|
                          DCD      0x40010c14

                          AREA ||i.BLE_Init||, CODE, READONLY, ALIGN=1

                  BLE_Init PROC
;;;440    */
;;;441    void BLE_Init(void)
000000  b510              PUSH     {r4,lr}
;;;442    {
;;;443        BLE_IoInit();
000002  f7fffffe          BL       BLE_IoInit
;;;444        BLE_VarInit();
000006  f7fffffe          BL       BLE_VarInit
;;;445    }
00000a  bd10              POP      {r4,pc}
;;;446    
                          ENDP


                          AREA ||i.BLE_IoInit||, CODE, READONLY, ALIGN=2

                  BLE_IoInit PROC
;;;73     
;;;74     void BLE_IoInit(void)
000000  b508              PUSH     {r3,lr}
;;;75     {
;;;76         GPIO_InitTypeDef GPIO_InitStructure;
;;;77     
;;;78         RCC_APB2PeriphClockCmd(RCC_ALL_BLE, ENABLE);
000002  2101              MOVS     r1,#1
000004  200c              MOVS     r0,#0xc
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;79     	
;;;80     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;81     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //推挽输出模式
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;82         
;;;83         GPIO_InitStructure.GPIO_Pin = GPIO_PIN_BLE_WAKE;
000016  2080              MOVS     r0,#0x80
000018  f8ad0000          STRH     r0,[sp,#0]
;;;84         GPIO_Init(GPIO_PORT_BLE_WAKE, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  480f              LDR      r0,|L5.92|
000020  f7fffffe          BL       GPIO_Init
;;;85           
;;;86         GPIO_InitStructure.GPIO_Pin = GPIO_PIN_BLE_RESET;
000024  2040              MOVS     r0,#0x40
000026  f8ad0000          STRH     r0,[sp,#0]
;;;87         GPIO_Init(GPIO_PORT_BLE_RESET, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  480b              LDR      r0,|L5.92|
00002e  f7fffffe          BL       GPIO_Init
;;;88         
;;;89     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;// 输入模式
000032  2048              MOVS     r0,#0x48
000034  f88d0003          STRB     r0,[sp,#3]
;;;90         GPIO_InitStructure.GPIO_Pin = GPIO_PIN_BLE_LINK;
000038  f44f4000          MOV      r0,#0x8000
00003c  f8ad0000          STRH     r0,[sp,#0]
;;;91         GPIO_Init(GPIO_PORT_BLE_LINK, &GPIO_InitStructure);
000040  4669              MOV      r1,sp
000042  4807              LDR      r0,|L5.96|
000044  f7fffffe          BL       GPIO_Init
;;;92         
;;;93         //拉高reset和wake
;;;94         GPIO_SetBits(GPIO_PORT_BLE_WAKE, GPIO_PIN_BLE_WAKE);
000048  2180              MOVS     r1,#0x80
00004a  4804              LDR      r0,|L5.92|
00004c  f7fffffe          BL       GPIO_SetBits
;;;95         GPIO_SetBits(GPIO_PORT_BLE_RESET, GPIO_PIN_BLE_RESET);
000050  2140              MOVS     r1,#0x40
000052  4802              LDR      r0,|L5.92|
000054  f7fffffe          BL       GPIO_SetBits
;;;96         
;;;97     }
000058  bd08              POP      {r3,pc}
;;;98     
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      0x40010c00
                  |L5.96|
                          DCD      0x40010800

                          AREA ||i.BLE_PapaInit||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  BLE_PapaInit PROC
;;;324    
;;;325    uint8_t BLE_PapaInit( void )
000000  b53e              PUSH     {r1-r5,lr}
;;;326    {
;;;327        uint8_t i, err;
;;;328        char TEM[ 10 ];
;;;329        i=0;
000002  2500              MOVS     r5,#0
;;;330        //WH-BLE103 V1.0.7
;;;331        while( 1 )
000004  e080              B        |L6.264|
                  |L6.6|
;;;332        {
;;;333            vTaskDelay( 1 );
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       vTaskDelay
;;;334            //SoftWdtFed( vTaskOtg_ID );
;;;335            
;;;336            switch( i )
00000c  2d09              CMP      r5,#9
00000e  d26f              BCS      |L6.240|
000010  e8dff005          TBB      [pc,r5]
000014  05111a2a          DCB      0x05,0x11,0x1a,0x2a
000018  35404b55          DCB      0x35,0x40,0x4b,0x55
00001c  6200              DCB      0x62,0x00
;;;337            {
;;;338                case 0 ://
;;;339                    err = ble_cmd("+++a","a+ok", 500 );
00001e  f44f72fa          MOV      r2,#0x1f4
000022  a13a              ADR      r1,|L6.268|
000024  a03b              ADR      r0,|L6.276|
000026  f7fffffe          BL       ble_cmd
00002a  4604              MOV      r4,r0
;;;340                    if( err )
00002c  b10c              CBZ      r4,|L6.50|
;;;341                    {
;;;342                        i = 2;
00002e  2502              MOVS     r5,#2
000030  e000              B        |L6.52|
                  |L6.50|
;;;343                    }else
;;;344                    {
;;;345                        i = 1;
000032  2501              MOVS     r5,#1
                  |L6.52|
;;;346                    }
;;;347                    break;
000034  e062              B        |L6.252|
;;;348                 case 1 ://
;;;349                    err = ble_cmd("AT+ENTM\r\n","+ENTM:OK", 500 );//err = ble_cmd("AT+PASS?\r\n","+PASS:", 500 ); //JC-G6201
000036  f44f72fa          MOV      r2,#0x1f4
00003a  a138              ADR      r1,|L6.284|
00003c  a03a              ADR      r0,|L6.296|
00003e  f7fffffe          BL       ble_cmd
000042  4604              MOV      r4,r0
;;;350    //                if( err )
;;;351    //                {
;;;352    //                    i=0;
;;;353    //                }
;;;354                    i=0;
000044  2500              MOVS     r5,#0
;;;355                    break;
000046  e059              B        |L6.252|
;;;356                 case 2 ://设置名称
;;;357                    sprintf( TEM, "AT+NAME=%s\r\n", Ble.Name );
000048  4a3a              LDR      r2,|L6.308|
00004a  a13b              ADR      r1,|L6.312|
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       __2sprintf
;;;358                    err = ble_cmd( TEM, Ble.Name, 1000 ); //err = ble_cmd( TEM, "+NAME:JC-G6201", 1000 ); //
000052  f44f727a          MOV      r2,#0x3e8
000056  4937              LDR      r1,|L6.308|
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       ble_cmd
00005e  4604              MOV      r4,r0
;;;359                    if( err )
000060  b10c              CBZ      r4,|L6.102|
;;;360                    {
;;;361                        i++;
000062  1c68              ADDS     r0,r5,#1
000064  b2c5              UXTB     r5,r0
                  |L6.102|
;;;362                    }
;;;363                    break;
000066  e049              B        |L6.252|
;;;364                 case 3 ://设置UUID
;;;365                    err = ble_cmd("AT+UUID=AA0000fee700001000800000805f9b34fb\r\n","DATA:0000FEE7", 1000 ); //0000fee7-0000-1000-8000-00805f9b34fb
000068  f44f727a          MOV      r2,#0x3e8
00006c  a136              ADR      r1,|L6.328|
00006e  a03a              ADR      r0,|L6.344|
000070  f7fffffe          BL       ble_cmd
000074  4604              MOV      r4,r0
;;;366                    if( err )
000076  b10c              CBZ      r4,|L6.124|
;;;367                    {
;;;368                        i++;
000078  1c68              ADDS     r0,r5,#1
00007a  b2c5              UXTB     r5,r0
                  |L6.124|
;;;369                    }
;;;370                    break;
00007c  e03e              B        |L6.252|
;;;371                 case 4 ://设置UUID r
;;;372                    err = ble_cmd("AT+UUID=BB000036f600001000800000805f9b34fb\r\n","DATA:000036F6", 1000 ); //000036f6-0000-1000-8000-00805f9b34fb
00007e  f44f727a          MOV      r2,#0x3e8
000082  a141              ADR      r1,|L6.392|
000084  a044              ADR      r0,|L6.408|
000086  f7fffffe          BL       ble_cmd
00008a  4604              MOV      r4,r0
;;;373                    
;;;374                    if( err )
00008c  b10c              CBZ      r4,|L6.146|
;;;375                    {
;;;376                        i++;
00008e  1c68              ADDS     r0,r5,#1
000090  b2c5              UXTB     r5,r0
                  |L6.146|
;;;377                    }
;;;378                    break;
000092  e033              B        |L6.252|
;;;379                 case 5 ://设置UUID w
;;;380                    err = ble_cmd("AT+UUID=CC000036f500001000800000805f9b34fb\r\n","DATA:000036F5", 1000 ); //000036f5-0000-1000-8000-00805f9b34fb
000094  f44f727a          MOV      r2,#0x3e8
000098  a14b              ADR      r1,|L6.456|
00009a  a04f              ADR      r0,|L6.472|
00009c  f7fffffe          BL       ble_cmd
0000a0  4604              MOV      r4,r0
;;;381                    if( err )
0000a2  b10c              CBZ      r4,|L6.168|
;;;382                    {
;;;383                        i++;
0000a4  1c68              ADDS     r0,r5,#1
0000a6  b2c5              UXTB     r5,r0
                  |L6.168|
;;;384                    }
;;;385                    break;
0000a8  e028              B        |L6.252|
;;;386                    
;;;387                 case 6 ://查询MAC地址 +MAC:9CA52512DD8E
;;;388                    ble_get_mac( Ble.Mac, 3000 );//err = ble_cmd("AT+MAC?\r\n","+MAC:", 1000 ); //
0000aa  f64031b8          MOV      r1,#0xbb8
0000ae  4821              LDR      r0,|L6.308|
0000b0  380d              SUBS     r0,r0,#0xd
0000b2  f7fffffe          BL       ble_get_mac
;;;389                    if( err )
0000b6  b10c              CBZ      r4,|L6.188|
;;;390                    {
;;;391                        i++;
0000b8  1c68              ADDS     r0,r5,#1
0000ba  b2c5              UXTB     r5,r0
                  |L6.188|
;;;392                    }
;;;393                    break;
0000bc  e01e              B        |L6.252|
;;;394    //             case 7://设为从机模式 设置完从机模块会复位，退出命令模式
;;;395    //                err = ble_cmd("AT+MODE=S\r\n","+MODE:Slave", 1000 ); //
;;;396    //                if( err )
;;;397    //                {
;;;398    //                    i++;
;;;399    //                }
;;;400    //                break; AT+HIBERNATE
;;;401                case 7://低功耗模式设置 
;;;402                    
;;;403                    err = ble_cmd("AT+AUTOSLEEP=OFF,4\r\n","AUTO:OFF\r\n", 1000 ); //取消自动睡眠模式
0000be  f44f727a          MOV      r2,#0x3e8
0000c2  a151              ADR      r1,|L6.520|
0000c4  a053              ADR      r0,|L6.532|
0000c6  f7fffffe          BL       ble_cmd
0000ca  4604              MOV      r4,r0
;;;404                    //err = ble_cmd("AT+AUTOSLEEP=ON,5\r\n","AUTO:ON\r\n", 1000 ); //自动睡眠模式 2.5mA
;;;405                    //err = ble_cmd("AT+DEEPSLEEP\r\n","+DEEPSLEEP:OK\r\n", 1000 ); //深度睡眠模式 0.39mA
;;;406                    //err = ble_cmd("AT+HIBERNATE\r\n","OK\r\n", 1000 ); //休眠模式 <60uA
;;;407                    if( err )
0000cc  b11c              CBZ      r4,|L6.214|
;;;408                    {
;;;409                        i++;
0000ce  1c68              ADDS     r0,r5,#1
0000d0  b2c5              UXTB     r5,r0
;;;410                        return 1;
0000d2  2001              MOVS     r0,#1
                  |L6.212|
;;;411                    }
;;;412                    
;;;413                    break; 
;;;414                case 8 ://
;;;415                    err = ble_cmd("AT+ENTM\r\n","+ENTM:OK", 500 );
;;;416                    if( err )
;;;417                    {
;;;418                        return 1;
;;;419                    }
;;;420                    break;
;;;421                 
;;;422                 default :
;;;423                    vTaskDelay( 5000 ); 
;;;424                    i = 0;
;;;425                    break;
;;;426            }
;;;427            
;;;428            if( !err ) vTaskDelay( 3000 ); 
;;;429        }
;;;430        
;;;431    }
0000d4  bd3e              POP      {r1-r5,pc}
                  |L6.214|
0000d6  e011              B        |L6.252|
0000d8  f44f72fa          MOV      r2,#0x1f4             ;415
0000dc  a10f              ADR      r1,|L6.284|
0000de  a012              ADR      r0,|L6.296|
0000e0  f7fffffe          BL       ble_cmd
0000e4  4604              MOV      r4,r0                 ;415
0000e6  b10c              CBZ      r4,|L6.236|
0000e8  2001              MOVS     r0,#1                 ;418
0000ea  e7f3              B        |L6.212|
                  |L6.236|
0000ec  e006              B        |L6.252|
0000ee  e7ff              B        |L6.240|
                  |L6.240|
0000f0  f2413088          MOV      r0,#0x1388            ;423
0000f4  f7fffffe          BL       vTaskDelay
0000f8  2500              MOVS     r5,#0                 ;424
0000fa  bf00              NOP                            ;425
                  |L6.252|
0000fc  bf00              NOP                            ;347
0000fe  b91c              CBNZ     r4,|L6.264|
000100  f64030b8          MOV      r0,#0xbb8             ;428
000104  f7fffffe          BL       vTaskDelay
                  |L6.264|
000108  e77d              B        |L6.6|
;;;432    
                          ENDP

00010a  0000              DCW      0x0000
                  |L6.268|
00010c  612b6f6b          DCB      "a+ok",0
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L6.276|
000114  2b2b2b61          DCB      "+++a",0
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L6.284|
00011c  2b454e54          DCB      "+ENTM:OK",0
000120  4d3a4f4b
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L6.296|
000128  41542b45          DCB      "AT+ENTM\r\n",0
00012c  4e544d0d
000130  0a00    
000132  00                DCB      0
000133  00                DCB      0
                  |L6.308|
                          DCD      Ble+0x14
                  |L6.312|
000138  41542b4e          DCB      "AT+NAME=%s\r\n",0
00013c  414d453d
000140  25730d0a
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
                  |L6.328|
000148  44415441          DCB      "DATA:0000FEE7",0
00014c  3a303030
000150  30464545
000154  3700    
000156  00                DCB      0
000157  00                DCB      0
                  |L6.344|
000158  41542b55          DCB      "AT+UUID=AA0000fee700001000800000805f9b34fb\r\n",0
00015c  5549443d
000160  41413030
000164  30306665
000168  65373030
00016c  30303130
000170  30303830
000174  30303030
000178  38303566
00017c  39623334
000180  66620d0a
000184  00      
000185  00                DCB      0
000186  00                DCB      0
000187  00                DCB      0
                  |L6.392|
000188  44415441          DCB      "DATA:000036F6",0
00018c  3a303030
000190  30333646
000194  3600    
000196  00                DCB      0
000197  00                DCB      0
                  |L6.408|
000198  41542b55          DCB      "AT+UUID=BB000036f600001000800000805f9b34fb\r\n",0
00019c  5549443d
0001a0  42423030
0001a4  30303336
0001a8  66363030
0001ac  30303130
0001b0  30303830
0001b4  30303030
0001b8  38303566
0001bc  39623334
0001c0  66620d0a
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L6.456|
0001c8  44415441          DCB      "DATA:000036F5",0
0001cc  3a303030
0001d0  30333646
0001d4  3500    
0001d6  00                DCB      0
0001d7  00                DCB      0
                  |L6.472|
0001d8  41542b55          DCB      "AT+UUID=CC000036f500001000800000805f9b34fb\r\n",0
0001dc  5549443d
0001e0  43433030
0001e4  30303336
0001e8  66353030
0001ec  30303130
0001f0  30303830
0001f4  30303030
0001f8  38303566
0001fc  39623334
000200  66620d0a
000204  00      
000205  00                DCB      0
000206  00                DCB      0
000207  00                DCB      0
                  |L6.520|
000208  4155544f          DCB      "AUTO:OFF\r\n",0
00020c  3a4f4646
000210  0d0a00  
000213  00                DCB      0
                  |L6.532|
000214  41542b41          DCB      "AT+AUTOSLEEP=OFF,4\r\n",0
000218  55544f53
00021c  4c454550
000220  3d4f4646
000224  2c340d0a
000228  00      
000229  00                DCB      0
00022a  00                DCB      0
00022b  00                DCB      0

                          AREA ||i.BLE_Send||, CODE, READONLY, ALIGN=1

                  BLE_Send PROC
;;;557    
;;;558    uint8_t BLE_Send( uint8_t *msg, uint8_t len )
000000  b570              PUSH     {r4-r6,lr}
;;;559    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;560        uint8_t err;
;;;561        
;;;562        err = 0;
000006  2600              MOVS     r6,#0
;;;563        
;;;564        //加密
;;;565        
;;;566        comSendBuf( BLE_COM, msg, len);
000008  462a              MOV      r2,r5
00000a  4621              MOV      r1,r4
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       comSendBuf
;;;567        
;;;568        return err;
000012  4630              MOV      r0,r6
;;;569    }
000014  bd70              POP      {r4-r6,pc}
;;;570    
                          ENDP


                          AREA ||i.BLE_Sleep||, CODE, READONLY, ALIGN=2

                  BLE_Sleep PROC
;;;129    
;;;130    uint8_t BLE_Sleep( void )
000000  b570              PUSH     {r4-r6,lr}
;;;131    {
;;;132        uint8_t i, err;
;;;133        //char TEM[ 10 ];
;;;134        i=0;
000002  2500              MOVS     r5,#0
;;;135        
;;;136        while( 1 )
000004  e057              B        |L8.182|
                  |L8.6|
;;;137        {
;;;138            vTaskDelay( 1 );
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       vTaskDelay
;;;139            //SoftWdtFed( vTaskOtg_ID );
;;;140            
;;;141            switch( i )
00000c  b135              CBZ      r5,|L8.28|
00000e  2d01              CMP      r5,#1
000010  d010              BEQ      |L8.52|
000012  2d02              CMP      r5,#2
000014  d01a              BEQ      |L8.76|
000016  2d03              CMP      r5,#3
000018  d141              BNE      |L8.158|
00001a  e022              B        |L8.98|
                  |L8.28|
;;;142            {
;;;143                case 0 ://
;;;144                    err = ble_cmd("+++a","a+ok", 500 );
00001c  f44f72fa          MOV      r2,#0x1f4
000020  a125              ADR      r1,|L8.184|
000022  a027              ADR      r0,|L8.192|
000024  f7fffffe          BL       ble_cmd
000028  4604              MOV      r4,r0
;;;145                    if( err )
00002a  b10c              CBZ      r4,|L8.48|
;;;146                    {
;;;147                        i = 2;
00002c  2502              MOVS     r5,#2
00002e  e000              B        |L8.50|
                  |L8.48|
;;;148                    }else
;;;149                    {
;;;150                        i = 1;
000030  2501              MOVS     r5,#1
                  |L8.50|
;;;151                    }
;;;152                    break;
000032  e03a              B        |L8.170|
                  |L8.52|
;;;153                 case 1 ://
;;;154                    err = ble_cmd("AT+ENTM\r\n","+ENTM:OK", 500 );//
000034  f44f72fa          MOV      r2,#0x1f4
000038  a123              ADR      r1,|L8.200|
00003a  a026              ADR      r0,|L8.212|
00003c  f7fffffe          BL       ble_cmd
000040  4604              MOV      r4,r0
;;;155                    
;;;156                    if( err )
000042  b10c              CBZ      r4,|L8.72|
;;;157                    {
;;;158                        i = 0;
000044  2500              MOVS     r5,#0
000046  e000              B        |L8.74|
                  |L8.72|
;;;159                    }else
;;;160                    {
;;;161                        i = 3;
000048  2503              MOVS     r5,#3
                  |L8.74|
;;;162                    }
;;;163                    break;
00004a  e02e              B        |L8.170|
                  |L8.76|
;;;164                case 2://低功耗模式设置 
;;;165                    
;;;166                    //err = ble_cmd("AT+AUTOSLEEP=ON,4\r\n","AUTO:ON\r\n", 1000 ); //自动睡眠模式 2.5mA
;;;167                    //err = ble_cmd("AT+DEEPSLEEP\r\n","+DEEPSLEEP:OK\r\n", 1000 ); //深度睡眠模式 0.39mA
;;;168                    err = ble_cmd("AT+HIBERNATE\r\n","OK\r\n", 1000 ); //休眠模式 <60uA
00004c  f44f727a          MOV      r2,#0x3e8
000050  a123              ADR      r1,|L8.224|
000052  a025              ADR      r0,|L8.232|
000054  f7fffffe          BL       ble_cmd
000058  4604              MOV      r4,r0
;;;169                    if( err )
00005a  b10c              CBZ      r4,|L8.96|
;;;170                    {
;;;171                        return 1;
00005c  2001              MOVS     r0,#1
;;;172                    }
;;;173                    
;;;174                    break; 
;;;175                 case 3 ://
;;;176                    if( !Ble.state.bit.link ) //如果蓝牙没有激活
;;;177                    {
;;;178                        Ble.state.bit.go_to_wake = 0;
;;;179                        Ble.state.bit.sleep = 0;
;;;180                        BLE_WakeUp( );
;;;181                        Ble.state.bit.wake = 1;
;;;182                    }else
;;;183                    {
;;;184                        BLE_HwReset( );
;;;185                    }
;;;186                    i = 0;
;;;187                    break;
;;;188                 default :
;;;189                    vTaskDelay( 1000 ); 
;;;190                    i = 0;
;;;191                    break;
;;;192            }
;;;193            
;;;194            if( !err ) vTaskDelay( 3000 ); 
;;;195        }
;;;196        
;;;197    }
00005e  bd70              POP      {r4-r6,pc}
                  |L8.96|
000060  e023              B        |L8.170|
                  |L8.98|
000062  4825              LDR      r0,|L8.248|
000064  7800              LDRB     r0,[r0,#0]            ;176  ; Ble
000066  f0000001          AND      r0,r0,#1              ;176
00006a  b9a0              CBNZ     r0,|L8.150|
00006c  4822              LDR      r0,|L8.248|
00006e  7800              LDRB     r0,[r0,#0]            ;178  ; Ble
000070  f0200020          BIC      r0,r0,#0x20           ;178
000074  4920              LDR      r1,|L8.248|
000076  7008              STRB     r0,[r1,#0]            ;178
000078  4608              MOV      r0,r1                 ;179
00007a  7800              LDRB     r0,[r0,#0]            ;179  ; Ble
00007c  f0200004          BIC      r0,r0,#4              ;179
000080  7008              STRB     r0,[r1,#0]            ;179
000082  f7fffffe          BL       BLE_WakeUp
000086  481c              LDR      r0,|L8.248|
000088  7800              LDRB     r0,[r0,#0]            ;181  ; Ble
00008a  f0200008          BIC      r0,r0,#8              ;181
00008e  3008              ADDS     r0,r0,#8              ;181
000090  4919              LDR      r1,|L8.248|
000092  7008              STRB     r0,[r1,#0]            ;181
000094  e001              B        |L8.154|
                  |L8.150|
000096  f7fffffe          BL       BLE_HwReset
                  |L8.154|
00009a  2500              MOVS     r5,#0                 ;186
00009c  e005              B        |L8.170|
                  |L8.158|
00009e  f44f707a          MOV      r0,#0x3e8             ;189
0000a2  f7fffffe          BL       vTaskDelay
0000a6  2500              MOVS     r5,#0                 ;190
0000a8  bf00              NOP                            ;191
                  |L8.170|
0000aa  bf00              NOP                            ;152
0000ac  b91c              CBNZ     r4,|L8.182|
0000ae  f64030b8          MOV      r0,#0xbb8             ;194
0000b2  f7fffffe          BL       vTaskDelay
                  |L8.182|
0000b6  e7a6              B        |L8.6|
;;;198    
                          ENDP

                  |L8.184|
0000b8  612b6f6b          DCB      "a+ok",0
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L8.192|
0000c0  2b2b2b61          DCB      "+++a",0
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L8.200|
0000c8  2b454e54          DCB      "+ENTM:OK",0
0000cc  4d3a4f4b
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L8.212|
0000d4  41542b45          DCB      "AT+ENTM\r\n",0
0000d8  4e544d0d
0000dc  0a00    
0000de  00                DCB      0
0000df  00                DCB      0
                  |L8.224|
0000e0  4f4b0d0a          DCB      "OK\r\n",0
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L8.232|
0000e8  41542b48          DCB      "AT+HIBERNATE\r\n",0
0000ec  49424552
0000f0  4e415445
0000f4  0d0a00  
0000f7  00                DCB      0
                  |L8.248|
                          DCD      Ble

                          AREA ||i.BLE_VarInit||, CODE, READONLY, ALIGN=2

                  BLE_VarInit PROC
;;;199    
;;;200    void BLE_VarInit(void)
000000  2000              MOVS     r0,#0
;;;201    {
;;;202        Ble.lg.all = 0;
000002  4901              LDR      r1,|L9.8|
000004  7048              STRB     r0,[r1,#1]
;;;203    }
000006  4770              BX       lr
;;;204    
                          ENDP

                  |L9.8|
                          DCD      Ble

                          AREA ||i.BLE_WakeUp||, CODE, READONLY, ALIGN=2

                  BLE_WakeUp PROC
;;;117    
;;;118    void BLE_WakeUp(void)
000000  b510              PUSH     {r4,lr}
;;;119    {
;;;120        debug_ble("Ble WakeUp!\r\n");
000002  a00b              ADR      r0,|L10.48|
000004  f7fffffe          BL       debug_ble
;;;121        
;;;122        GPIO_PORT_BLE_RESET->BRR = GPIO_PIN_BLE_WAKE;//拉低电平>1s 有效，
000008  2080              MOVS     r0,#0x80
00000a  490d              LDR      r1,|L10.64|
00000c  6008              STR      r0,[r1,#0]
;;;123        vTaskDelay(pdMS_TO_TICKS(1500));
00000e  f24050dc          MOV      r0,#0x5dc
000012  f7fffffe          BL       vTaskDelay
;;;124        GPIO_PORT_BLE_RESET->BSRR = GPIO_PIN_BLE_WAKE;//再拉高
000016  2080              MOVS     r0,#0x80
000018  4909              LDR      r1,|L10.64|
00001a  1f09              SUBS     r1,r1,#4
00001c  6008              STR      r0,[r1,#0]
;;;125        vTaskDelay(pdMS_TO_TICKS(100));
00001e  2064              MOVS     r0,#0x64
000020  f7fffffe          BL       vTaskDelay
;;;126        ble_wait_ack( "Wake UP\r\n", 2000 );
000024  f44f61fa          MOV      r1,#0x7d0
000028  a006              ADR      r0,|L10.68|
00002a  f7fffffe          BL       ble_wait_ack
;;;127        
;;;128    }
00002e  bd10              POP      {r4,pc}
;;;129    
                          ENDP

                  |L10.48|
000030  426c6520          DCB      "Ble WakeUp!\r\n",0
000034  57616b65
000038  5570210d
00003c  0a00    
00003e  00                DCB      0
00003f  00                DCB      0
                  |L10.64|
                          DCD      0x40010c14
                  |L10.68|
000044  57616b65          DCB      "Wake UP\r\n",0
000048  2055500d
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.ble_cmd||, CODE, READONLY, ALIGN=2

                  ble_cmd PROC
;;;239    
;;;240    static uint8_t ble_cmd(char *cmd, char *ack, uint16_t t)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;241    {
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
;;;242        uint8_t err, qn=1;
00000a  f04f0801          MOV      r8,#1
;;;243        char *add;
;;;244    
;;;245        comSendBuf( BLE_COM, (uint8_t *)cmd, strlen(cmd) );
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       strlen
000014  fa1ffa80          UXTH     r10,r0
000018  4652              MOV      r2,r10
00001a  4629              MOV      r1,r5
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       comSendBuf
;;;246        
;;;247        debug_ble("%s\r\n",cmd);
000022  4629              MOV      r1,r5
000024  a019              ADR      r0,|L11.140|
000026  f7fffffe          BL       debug_ble
;;;248        
;;;249        qn=t/100;
00002a  2064              MOVS     r0,#0x64
00002c  fb96f0f0          SDIV     r0,r6,r0
000030  f00008ff          AND      r8,r0,#0xff
;;;250        
;;;251        while( qn )
000034  e025              B        |L11.130|
                  |L11.54|
;;;252        {
;;;253            vTaskDelay( 10 );
000036  200a              MOVS     r0,#0xa
000038  f7fffffe          BL       vTaskDelay
;;;254            err = comGetALine( BLE_COM, BLE_RxBuf );
00003c  4915              LDR      r1,|L11.148|
00003e  2003              MOVS     r0,#3
000040  f7fffffe          BL       comGetALine
000044  b2c7              UXTB     r7,r0
;;;255            if( err ) //成功接收
000046  b1bf              CBZ      r7,|L11.120|
;;;256        	{
;;;257        	    debug_ble("%s",BLE_RxBuf);
000048  4912              LDR      r1,|L11.148|
00004a  a013              ADR      r0,|L11.152|
00004c  f7fffffe          BL       debug_ble
;;;258        	    add = strstr( (char *)BLE_RxBuf, ack );
000050  4649              MOV      r1,r9
000052  4810              LDR      r0,|L11.148|
000054  f7fffffe          BL       strstr
000058  4604              MOV      r4,r0
;;;259                if( add )
00005a  b12c              CBZ      r4,|L11.104|
;;;260                {
;;;261                    comClearRxFifo( BLE_COM );
00005c  2003              MOVS     r0,#3
00005e  f7fffffe          BL       comClearRxFifo
;;;262                    return 1;
000062  2001              MOVS     r0,#1
                  |L11.100|
;;;263                }else
;;;264                {
;;;265                   qn--;
;;;266                   vTaskDelay(pdMS_TO_TICKS(100));
;;;267                }
;;;268        	}
;;;269        	else
;;;270        	{
;;;271        	    qn=0;
;;;272        	    debug_ble("[Timeout.Try again.]\r\n");
;;;273        	}
;;;274        }
;;;275    
;;;276        return 0;
;;;277    }
000064  e8bd87f0          POP      {r4-r10,pc}
                  |L11.104|
000068  f1a80001          SUB      r0,r8,#1              ;265
00006c  f00008ff          AND      r8,r0,#0xff           ;265
000070  2064              MOVS     r0,#0x64              ;266
000072  f7fffffe          BL       vTaskDelay
000076  e004              B        |L11.130|
                  |L11.120|
000078  f04f0800          MOV      r8,#0                 ;271
00007c  a007              ADR      r0,|L11.156|
00007e  f7fffffe          BL       debug_ble
                  |L11.130|
000082  f1b80f00          CMP      r8,#0                 ;251
000086  d1d6              BNE      |L11.54|
000088  2000              MOVS     r0,#0                 ;276
00008a  e7eb              B        |L11.100|
;;;278    
                          ENDP

                  |L11.140|
00008c  25730d0a          DCB      "%s\r\n",0
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L11.148|
                          DCD      BLE_RxBuf
                  |L11.152|
000098  257300            DCB      "%s",0
00009b  00                DCB      0
                  |L11.156|
00009c  5b54696d          DCB      "[Timeout.Try again.]\r\n",0
0000a0  656f7574
0000a4  2e547279
0000a8  20616761
0000ac  696e2e5d
0000b0  0d0a00  
0000b3  00                DCB      0

                          AREA ||i.ble_get_mac||, CODE, READONLY, ALIGN=2

                  ble_get_mac PROC
;;;278    
;;;279    uint8_t ble_get_mac( uint8_t *mac, uint16_t t)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;280    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;281        uint8_t err, qn=1, i;
000008  f04f0901          MOV      r9,#1
;;;282        char *add;
;;;283        
;;;284        //BaseType_t xResult;
;;;285        //err = ble_cmd("AT+MAC?\r\n","+MAC:", 1000 ); // +MAC:9CA52512DD8E
;;;286        comSendBuf( BLE_COM, "AT+MAC?\r\n", strlen("AT+MAC?\r\n") );
00000c  2209              MOVS     r2,#9
00000e  a122              ADR      r1,|L12.152|
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       comSendBuf
;;;287        
;;;288        debug_ble("%s\r\n","AT+MAC?\r\n");
000016  a120              ADR      r1,|L12.152|
000018  a022              ADR      r0,|L12.164|
00001a  f7fffffe          BL       debug_ble
;;;289        
;;;290        qn=t/100;
00001e  2064              MOVS     r0,#0x64
000020  fb97f0f0          SDIV     r0,r7,r0
000024  f00009ff          AND      r9,r0,#0xff
;;;291        
;;;292        while( qn )
000028  e031              B        |L12.142|
                  |L12.42|
;;;293        {
;;;294            vTaskDelay( 10 );
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       vTaskDelay
;;;295            err = comGetALine( BLE_COM, BLE_RxBuf );
000030  491e              LDR      r1,|L12.172|
000032  2003              MOVS     r0,#3
000034  f7fffffe          BL       comGetALine
000038  f00008ff          AND      r8,r0,#0xff
;;;296            if( err ) //成功接收
00003c  f1b80f00          CMP      r8,#0
000040  d020              BEQ      |L12.132|
;;;297        	{
;;;298        	    debug_ble("%s",BLE_RxBuf);
000042  491a              LDR      r1,|L12.172|
000044  a01a              ADR      r0,|L12.176|
000046  f7fffffe          BL       debug_ble
;;;299        	    add = strstr( (char *)BLE_RxBuf, "+MAC:" );
00004a  a11a              ADR      r1,|L12.180|
00004c  4817              LDR      r0,|L12.172|
00004e  f7fffffe          BL       strstr
000052  4605              MOV      r5,r0
;;;300                if( add )
000054  b175              CBZ      r5,|L12.116|
;;;301                {
;;;302                    for( i=0; i<12; i++ )
000056  2400              MOVS     r4,#0
000058  e004              B        |L12.100|
                  |L12.90|
;;;303                    {
;;;304                        *(mac+i) = *(add+5+i);
00005a  1d68              ADDS     r0,r5,#5
00005c  5d00              LDRB     r0,[r0,r4]
00005e  5530              STRB     r0,[r6,r4]
000060  1c60              ADDS     r0,r4,#1              ;302
000062  b2c4              UXTB     r4,r0                 ;302
                  |L12.100|
000064  2c0c              CMP      r4,#0xc               ;302
000066  dbf8              BLT      |L12.90|
;;;305                    }
;;;306                    comClearRxFifo( BLE_COM );
000068  2003              MOVS     r0,#3
00006a  f7fffffe          BL       comClearRxFifo
;;;307                    return 1;
00006e  2001              MOVS     r0,#1
                  |L12.112|
;;;308                }else
;;;309                {
;;;310                   qn--;
;;;311                   vTaskDelay(pdMS_TO_TICKS(100));
;;;312                }
;;;313        	}
;;;314        	else
;;;315        	{
;;;316        	    qn=0;
;;;317        	    debug_ble("[Timeout.Try again.]\r\n");
;;;318        	}
;;;319        }
;;;320    
;;;321        return 0;
;;;322    }
000070  e8bd87f0          POP      {r4-r10,pc}
                  |L12.116|
000074  f1a90001          SUB      r0,r9,#1              ;310
000078  f00009ff          AND      r9,r0,#0xff           ;310
00007c  2064              MOVS     r0,#0x64              ;311
00007e  f7fffffe          BL       vTaskDelay
000082  e004              B        |L12.142|
                  |L12.132|
000084  f04f0900          MOV      r9,#0                 ;316
000088  a00c              ADR      r0,|L12.188|
00008a  f7fffffe          BL       debug_ble
                  |L12.142|
00008e  f1b90f00          CMP      r9,#0                 ;292
000092  d1ca              BNE      |L12.42|
000094  2000              MOVS     r0,#0                 ;321
000096  e7eb              B        |L12.112|
;;;323    
                          ENDP

                  |L12.152|
000098  41542b4d          DCB      "AT+MAC?\r\n",0
00009c  41433f0d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L12.164|
0000a4  25730d0a          DCB      "%s\r\n",0
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L12.172|
                          DCD      BLE_RxBuf
                  |L12.176|
0000b0  257300            DCB      "%s",0
0000b3  00                DCB      0
                  |L12.180|
0000b4  2b4d4143          DCB      "+MAC:",0
0000b8  3a00    
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L12.188|
0000bc  5b54696d          DCB      "[Timeout.Try again.]\r\n",0
0000c0  656f7574
0000c4  2e547279
0000c8  20616761
0000cc  696e2e5d
0000d0  0d0a00  
0000d3  00                DCB      0

                          AREA ||i.ble_wait_ack||, CODE, READONLY, ALIGN=2

                  ble_wait_ack PROC
;;;204    
;;;205    static uint8_t ble_wait_ack( char *ack, uint16_t t)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;206    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;207        uint8_t err, qn=1;
000008  f04f0801          MOV      r8,#1
;;;208        char  *add;
;;;209        
;;;210        qn=t/100;
00000c  2064              MOVS     r0,#0x64
00000e  fb96f0f0          SDIV     r0,r6,r0
000012  f00008ff          AND      r8,r0,#0xff
;;;211        
;;;212        while( qn )
000016  e022              B        |L13.94|
                  |L13.24|
;;;213        {
;;;214            err = comGetALine( BLE_COM, BLE_RxBuf );
000018  4913              LDR      r1,|L13.104|
00001a  2003              MOVS     r0,#3
00001c  f7fffffe          BL       comGetALine
000020  b2c7              UXTB     r7,r0
;;;215            if( err ) //成功接收
000022  b1bf              CBZ      r7,|L13.84|
;;;216        	{
;;;217        	    debug_ble("%s",BLE_RxBuf);
000024  4910              LDR      r1,|L13.104|
000026  a011              ADR      r0,|L13.108|
000028  f7fffffe          BL       debug_ble
;;;218        	    
;;;219        	    add = strstr( (char*)BLE_RxBuf, ack );
00002c  4629              MOV      r1,r5
00002e  480e              LDR      r0,|L13.104|
000030  f7fffffe          BL       strstr
000034  4604              MOV      r4,r0
;;;220                if( add )
000036  b12c              CBZ      r4,|L13.68|
;;;221                {
;;;222                    comClearRxFifo( BLE_COM );
000038  2003              MOVS     r0,#3
00003a  f7fffffe          BL       comClearRxFifo
;;;223                    return 1;
00003e  2001              MOVS     r0,#1
                  |L13.64|
;;;224                }else
;;;225                {
;;;226                   qn--;
;;;227                   vTaskDelay(pdMS_TO_TICKS(100));
;;;228                }
;;;229        	}
;;;230        	else
;;;231        	{
;;;232        	    qn=0;
;;;233        	    debug_ble("[Timeout.Try again.]\r\n");
;;;234        	}
;;;235        }
;;;236    
;;;237        return 0;
;;;238    }
000040  e8bd81f0          POP      {r4-r8,pc}
                  |L13.68|
000044  f1a80001          SUB      r0,r8,#1              ;226
000048  f00008ff          AND      r8,r0,#0xff           ;226
00004c  2064              MOVS     r0,#0x64              ;227
00004e  f7fffffe          BL       vTaskDelay
000052  e004              B        |L13.94|
                  |L13.84|
000054  f04f0800          MOV      r8,#0                 ;232
000058  a005              ADR      r0,|L13.112|
00005a  f7fffffe          BL       debug_ble
                  |L13.94|
00005e  f1b80f00          CMP      r8,#0                 ;212
000062  d1d9              BNE      |L13.24|
000064  2000              MOVS     r0,#0                 ;237
000066  e7eb              B        |L13.64|
;;;239    
                          ENDP

                  |L13.104|
                          DCD      BLE_RxBuf
                  |L13.108|
00006c  257300            DCB      "%s",0
00006f  00                DCB      0
                  |L13.112|
000070  5b54696d          DCB      "[Timeout.Try again.]\r\n",0
000074  656f7574
000078  2e547279
00007c  20616761
000080  696e2e5d
000084  0d0a00  
000087  00                DCB      0

                          AREA ||i.vTaskBle||, CODE, READONLY, ALIGN=2

                  vTaskBle PROC
;;;940    
;;;941    static void vTaskBle(void *pvParameters)
000000  2400              MOVS     r4,#0
;;;942    {
;;;943    //    uint8_t lock_sta;
;;;944        uint16_t err = 0;
;;;945    	
;;;946    //	uint8_t i;
;;;947    	
;;;948    //    Lock.state.bit.login = 0;
;;;949    //    Lock.state.bit.link_to_server = 0;
;;;950        debug_usr("[Ble : start.]\r\n");
000002  a03b              ADR      r0,|L14.240|
000004  f7fffffe          BL       debug_usr
;;;951    //    test_ble_cmd( );
;;;952        BLE_HwReset( );
000008  f7fffffe          BL       BLE_HwReset
;;;953        BLE_PapaInit( );
00000c  f7fffffe          BL       BLE_PapaInit
;;;954        BLE_HwReset( );
000010  f7fffffe          BL       BLE_HwReset
;;;955        vTaskDelay( 2000 );
000014  f44f60fa          MOV      r0,#0x7d0
000018  f7fffffe          BL       vTaskDelay
;;;956        
;;;957        //SoftWdtInit( vTaskOtg_ID, 5000 );
;;;958        
;;;959        Ble.timer_ble_nodata = BLE_TIME_NODATA;
00001c  201e              MOVS     r0,#0x1e
00001e  4939              LDR      r1,|L14.260|
000020  7748              STRB     r0,[r1,#0x1d]
;;;960        
;;;961    //    lock_sta = Lock.state.bit.lock;
;;;962        
;;;963        while( 1 )
000022  e063              B        |L14.236|
                  |L14.36|
;;;964        {
;;;965            vTaskDelay( 1 );
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       vTaskDelay
;;;966            //SoftWdtFed( vTaskOtg_ID );
;;;967            
;;;968    
;;;969            //蓝牙通信部分 可以考虑单独开个任务---------------------------------------------------------
;;;970            if( ( !Ble.timer_ble_nodata ) && ( !Ble.state.bit.sleep ) )
00002a  4836              LDR      r0,|L14.260|
00002c  7f40              LDRB     r0,[r0,#0x1d]  ; Ble
00002e  b968              CBNZ     r0,|L14.76|
000030  4834              LDR      r0,|L14.260|
000032  7800              LDRB     r0,[r0,#0]  ; Ble
000034  f3c00080          UBFX     r0,r0,#2,#1
000038  b940              CBNZ     r0,|L14.76|
;;;971            {
;;;972                Ble.timer_ble_nodata = BLE_TIME_NODATA; 
00003a  201e              MOVS     r0,#0x1e
00003c  4931              LDR      r1,|L14.260|
00003e  7748              STRB     r0,[r1,#0x1d]
;;;973                Ble.state.bit.go_to_sleep = 1;
000040  4608              MOV      r0,r1
000042  7800              LDRB     r0,[r0,#0]  ; Ble
000044  f0200010          BIC      r0,r0,#0x10
000048  3010              ADDS     r0,r0,#0x10
00004a  7008              STRB     r0,[r1,#0]
                  |L14.76|
;;;974            }
;;;975            
;;;976            if( ( Ble.state.bit.sleep == 0 ) && Ble.state.bit.go_to_sleep )
00004c  482d              LDR      r0,|L14.260|
00004e  7800              LDRB     r0,[r0,#0]  ; Ble
000050  f3c00080          UBFX     r0,r0,#2,#1
000054  b9d8              CBNZ     r0,|L14.142|
000056  482b              LDR      r0,|L14.260|
000058  7800              LDRB     r0,[r0,#0]  ; Ble
00005a  f3c01000          UBFX     r0,r0,#4,#1
00005e  b1b0              CBZ      r0,|L14.142|
;;;977            {
;;;978                debug_usr("[ble go to sleep]\r\n");
000060  a029              ADR      r0,|L14.264|
000062  f7fffffe          BL       debug_usr
;;;979                
;;;980                Ble.state.bit.go_to_sleep = 0;
000066  4827              LDR      r0,|L14.260|
000068  7800              LDRB     r0,[r0,#0]  ; Ble
00006a  f0200010          BIC      r0,r0,#0x10
00006e  4925              LDR      r1,|L14.260|
000070  7008              STRB     r0,[r1,#0]
;;;981                Ble.state.bit.wake = 0;
000072  4608              MOV      r0,r1
000074  7800              LDRB     r0,[r0,#0]  ; Ble
000076  f0200008          BIC      r0,r0,#8
00007a  7008              STRB     r0,[r1,#0]
;;;982                BLE_Sleep( );
00007c  f7fffffe          BL       BLE_Sleep
;;;983                Ble.state.bit.sleep = 1;
000080  4820              LDR      r0,|L14.260|
000082  7800              LDRB     r0,[r0,#0]  ; Ble
000084  f0200004          BIC      r0,r0,#4
000088  1d00              ADDS     r0,r0,#4
00008a  491e              LDR      r1,|L14.260|
00008c  7008              STRB     r0,[r1,#0]
                  |L14.142|
;;;984            }
;;;985            
;;;986            if( ( Ble.state.bit.wake == 0 ) && Ble.state.bit.go_to_wake )
00008e  481d              LDR      r0,|L14.260|
000090  7800              LDRB     r0,[r0,#0]  ; Ble
000092  f3c000c0          UBFX     r0,r0,#3,#1
000096  b9d8              CBNZ     r0,|L14.208|
000098  481a              LDR      r0,|L14.260|
00009a  7800              LDRB     r0,[r0,#0]  ; Ble
00009c  f3c01040          UBFX     r0,r0,#5,#1
0000a0  b1b0              CBZ      r0,|L14.208|
;;;987            {
;;;988                debug_usr("[ble go to wake]\r\n");
0000a2  a01e              ADR      r0,|L14.284|
0000a4  f7fffffe          BL       debug_usr
;;;989                
;;;990                Ble.state.bit.go_to_wake = 0;
0000a8  4816              LDR      r0,|L14.260|
0000aa  7800              LDRB     r0,[r0,#0]  ; Ble
0000ac  f0200020          BIC      r0,r0,#0x20
0000b0  4914              LDR      r1,|L14.260|
0000b2  7008              STRB     r0,[r1,#0]
;;;991                Ble.state.bit.sleep = 0;
0000b4  4608              MOV      r0,r1
0000b6  7800              LDRB     r0,[r0,#0]  ; Ble
0000b8  f0200004          BIC      r0,r0,#4
0000bc  7008              STRB     r0,[r1,#0]
;;;992                BLE_WakeUp( );
0000be  f7fffffe          BL       BLE_WakeUp
;;;993                Ble.state.bit.wake = 1;
0000c2  4810              LDR      r0,|L14.260|
0000c4  7800              LDRB     r0,[r0,#0]  ; Ble
0000c6  f0200008          BIC      r0,r0,#8
0000ca  3008              ADDS     r0,r0,#8
0000cc  490d              LDR      r1,|L14.260|
0000ce  7008              STRB     r0,[r1,#0]
                  |L14.208|
;;;994            }
;;;995            
;;;996            err = BLE_GetMsg( );
0000d0  f7fffffe          BL       BLE_GetMsg
0000d4  4604              MOV      r4,r0
;;;997            if( err == BLE_PEDAL_DOWN )
0000d6  2c55              CMP      r4,#0x55
0000d8  d103              BNE      |L14.226|
;;;998            {
;;;999                //发送脚踏踩下
;;;1000               bsp_PutKey( PEDAL_DOWN );
0000da  2019              MOVS     r0,#0x19
0000dc  f7fffffe          BL       bsp_PutKey
0000e0  e004              B        |L14.236|
                  |L14.226|
;;;1001           }else
;;;1002           if( err == BLE_PEDAL_UP )
0000e2  2caa              CMP      r4,#0xaa
0000e4  d102              BNE      |L14.236|
;;;1003           {
;;;1004               //发送脚踏抬起
;;;1005               bsp_PutKey( PEDAL_UP );
0000e6  201a              MOVS     r0,#0x1a
0000e8  f7fffffe          BL       bsp_PutKey
                  |L14.236|
0000ec  e79a              B        |L14.36|
;;;1006           }
;;;1007           
;;;1008           
;;;1009           //if( Ble.state.bit.link ) //蓝牙已连接
;;;1010           {
;;;1011   //            if( lock_sta != Lock.state.bit.lock )//锁状态上报
;;;1012   //            {
;;;1013   //                debug_usr("[ble lock sta changed]\r\n");
;;;1014   //                lock_sta = Lock.state.bit.lock;
;;;1015   //                if( Lock.state.bit.lock ) //关锁
;;;1016   //                {
;;;1017   //                    debug_usr("[ble unlock notice]\r\n");
;;;1018   //                    //蓝牙上报关锁状态
;;;1019   //                    comSendBuf( BLE_COM, "\x05\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 16 );
;;;1020   //                }
;;;1021   //            }
;;;1022           }
;;;1023           
;;;1024       }
;;;1025   }
;;;1026   
                          ENDP

0000ee  0000              DCW      0x0000
                  |L14.240|
0000f0  5b426c65          DCB      "[Ble : start.]\r\n",0
0000f4  203a2073
0000f8  74617274
0000fc  2e5d0d0a
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L14.260|
                          DCD      Ble
                  |L14.264|
000108  5b626c65          DCB      "[ble go to sleep]\r\n",0
00010c  20676f20
000110  746f2073
000114  6c656570
000118  5d0d0a00
                  |L14.284|
00011c  5b626c65          DCB      "[ble go to wake]\r\n",0
000120  20676f20
000124  746f2077
000128  616b655d
00012c  0d0a00  
00012f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  BLE_TxBuf
                          %        100
                  BLE_RxBuf
                          %        100
                  Ble
                          %        30

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_ble.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_ble_c_63fd190a____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_ble_c_63fd190a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_ble_c_63fd190a____REVSH|
#line 128
|__asm___9_bsp_ble_c_63fd190a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
