; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_lcd.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -I.\RTE\_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_uart_lcd.crf ..\..\User\app\bsp_uart_lcd.c]
                          THUMB

                          AREA ||i.LCD_ParaInit||, CODE, READONLY, ALIGN=2

                  LCD_ParaInit PROC
;;;330    
;;;331    void LCD_ParaInit( void )
000000  b508              PUSH     {r3,lr}
;;;332    {
;;;333        //方向
;;;334        if( Motor.state.bit.dir == UP )
000002  483f              LDR      r0,|L1.256|
000004  7880              LDRB     r0,[r0,#2]  ; Motor
000006  f0000001          AND      r0,r0,#1
00000a  b928              CBNZ     r0,|L1.24|
;;;335        {
;;;336            SetTextValue(0,18,"上升");
00000c  a23d              ADR      r2,|L1.260|
00000e  2112              MOVS     r1,#0x12
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       SetTextValue
000016  e004              B        |L1.34|
                  |L1.24|
;;;337        }else
;;;338        {
;;;339            SetTextValue(0,18,"下降");
000018  a23c              ADR      r2,|L1.268|
00001a  2112              MOVS     r1,#0x12
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       SetTextValue
                  |L1.34|
;;;340        }
;;;341        
;;;342        //速度
;;;343        SetTextValue(0, 16,"停止\x00");
000022  a23c              ADR      r2,|L1.276|
000024  2110              MOVS     r1,#0x10
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       SetTextValue
;;;344        
;;;345        //频率
;;;346        SetTextValue(0, 17,"0");
00002c  a23b              ADR      r2,|L1.284|
00002e  2111              MOVS     r1,#0x11
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       SetTextValue
;;;347        
;;;348        //最大步数
;;;349        if( Motor.max_step == MAX_STEP_18ML )                                                            //正弦波控件
000036  4832              LDR      r0,|L1.256|
000038  6880              LDR      r0,[r0,#8]  ; Motor
00003a  4939              LDR      r1,|L1.288|
00003c  4288              CMP      r0,r1
00003e  d109              BNE      |L1.84|
;;;350        {
;;;351            SetTextInt32(0, 20, Motor.max_step, 0, 1); //显示最大步数
000040  2001              MOVS     r0,#1
000042  9000              STR      r0,[sp,#0]
000044  482e              LDR      r0,|L1.256|
000046  2300              MOVS     r3,#0
000048  2114              MOVS     r1,#0x14
00004a  6882              LDR      r2,[r0,#8]  ; Motor
00004c  4618              MOV      r0,r3
00004e  f7fffffe          BL       SetTextInt32
000052  e00d              B        |L1.112|
                  |L1.84|
;;;352        }else if( Motor.max_step == MAX_STEP_22ML )                                                            //正弦波控件
000054  482a              LDR      r0,|L1.256|
000056  6880              LDR      r0,[r0,#8]  ; Motor
000058  4932              LDR      r1,|L1.292|
00005a  4288              CMP      r0,r1
00005c  d108              BNE      |L1.112|
;;;353        {
;;;354            SetTextInt32(0, 20, Motor.max_step, 0, 1); //显示最大步数
00005e  2001              MOVS     r0,#1
000060  9000              STR      r0,[sp,#0]
000062  4827              LDR      r0,|L1.256|
000064  2300              MOVS     r3,#0
000066  2114              MOVS     r1,#0x14
000068  6882              LDR      r2,[r0,#8]  ; Motor
00006a  4618              MOV      r0,r3
00006c  f7fffffe          BL       SetTextInt32
                  |L1.112|
;;;355        }
;;;356        
;;;357        //步数
;;;358        SetTextInt32(0, 19, Motor.counter_step, 0, 1);
000070  2001              MOVS     r0,#1
000072  9000              STR      r0,[sp,#0]
000074  4822              LDR      r0,|L1.256|
000076  2300              MOVS     r3,#0
000078  2113              MOVS     r1,#0x13
00007a  6842              LDR      r2,[r0,#4]  ; Motor
00007c  4618              MOV      r0,r3
00007e  f7fffffe          BL       SetTextInt32
;;;359        
;;;360        //默认参数
;;;361        Tmy.Key.zdpk = 1;
000082  4829              LDR      r0,|L1.296|
000084  7940              LDRB     r0,[r0,#5]  ; Tmy
000086  f0200002          BIC      r0,r0,#2
00008a  1c80              ADDS     r0,r0,#2
00008c  4926              LDR      r1,|L1.296|
00008e  7148              STRB     r0,[r1,#5]
;;;362        Tmy.Key.hx = 1;
000090  4608              MOV      r0,r1
000092  7940              LDRB     r0,[r0,#5]  ; Tmy
000094  f0200001          BIC      r0,r0,#1
000098  1c40              ADDS     r0,r0,#1
00009a  7148              STRB     r0,[r1,#5]
;;;363        Tmy.Key.zh = 0;
00009c  4608              MOV      r0,r1
00009e  7940              LDRB     r0,[r0,#5]  ; Tmy
0000a0  f0200008          BIC      r0,r0,#8
0000a4  7148              STRB     r0,[r1,#5]
;;;364        Motor.gear = GEAR_SLOW_NORMAL_FAST; //慢中快速
0000a6  2002              MOVS     r0,#2
0000a8  4915              LDR      r1,|L1.256|
0000aa  7048              STRB     r0,[r1,#1]
;;;365        SetButtonValue(0, 1, 1);//自动排空，默认有效
0000ac  2201              MOVS     r2,#1
0000ae  4611              MOV      r1,r2
0000b0  2000              MOVS     r0,#0
0000b2  f7fffffe          BL       SetButtonValue
;;;366        SetButtonValue(0, 3, 1);//回吸，默认有效
0000b6  2201              MOVS     r2,#1
0000b8  2103              MOVS     r1,#3
0000ba  2000              MOVS     r0,#0
0000bc  f7fffffe          BL       SetButtonValue
;;;367        SetButtonValue(0, 21, 1);//1.8ml，默认有效
0000c0  2201              MOVS     r2,#1
0000c2  2115              MOVS     r1,#0x15
0000c4  2000              MOVS     r0,#0
0000c6  f7fffffe          BL       SetButtonValue
;;;368        SetButtonValue(0, 5, 0);//
0000ca  2200              MOVS     r2,#0
0000cc  2105              MOVS     r1,#5
0000ce  4610              MOV      r0,r2
0000d0  f7fffffe          BL       SetButtonValue
;;;369        SetButtonValue(0, 6, 0);//
0000d4  2200              MOVS     r2,#0
0000d6  2106              MOVS     r1,#6
0000d8  4610              MOV      r0,r2
0000da  f7fffffe          BL       SetButtonValue
;;;370        SetButtonValue(0, 7, 1);//慢中快速，默认有效
0000de  2201              MOVS     r2,#1
0000e0  2107              MOVS     r1,#7
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       SetButtonValue
;;;371        SetButtonValue(0, 8, 0);//
0000e8  2200              MOVS     r2,#0
0000ea  2108              MOVS     r1,#8
0000ec  4610              MOV      r0,r2
0000ee  f7fffffe          BL       SetButtonValue
;;;372        
;;;373        AnimationPlayFrame(0,32,0);//显示wifi图标
0000f2  2200              MOVS     r2,#0
0000f4  2120              MOVS     r1,#0x20
0000f6  4610              MOV      r0,r2
0000f8  f7fffffe          BL       AnimationPlayFrame
;;;374    }
0000fc  bd08              POP      {r3,pc}
;;;375    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L1.256|
                          DCD      Motor
                  |L1.260|
000104  c9cfc9fd          DCB      201,207,201,253,0
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L1.268|
00010c  cfc2bdb5          DCB      207,194,189,181,0
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L1.276|
000114  cda3d6b9          DCB      205,163,214,185,0
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L1.284|
00011c  3000              DCB      "0",0
00011e  00                DCB      0
00011f  00                DCB      0
                  |L1.288|
                          DCD      0x0003b97e
                  |L1.292|
                          DCD      0x0004af8e
                  |L1.296|
                          DCD      Tmy

                          AREA ||i.NOTIFYHandShake||, CODE, READONLY, ALIGN=1

                  NOTIFYHandShake PROC
;;;325    */
;;;326    void NOTIFYHandShake()
000000  b510              PUSH     {r4,lr}
;;;327    {
;;;328       SetButtonValue(3,2,1);
000002  2201              MOVS     r2,#1
000004  2102              MOVS     r1,#2
000006  2003              MOVS     r0,#3
000008  f7fffffe          BL       SetButtonValue
;;;329    }
00000c  bd10              POP      {r4,pc}
;;;330    
                          ENDP


                          AREA ||i.NotifyButton||, CODE, READONLY, ALIGN=2

                  NotifyButton PROC
;;;664    */
;;;665    void NotifyButton(uint16 screen_id, uint16 control_id, uint8  state)
000000  b5f8              PUSH     {r3-r7,lr}
;;;666    { 
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;667        SetBuzzer( 10 ); //蜂鸣器
000008  200a              MOVS     r0,#0xa
00000a  f7fffffe          BL       SetBuzzer
;;;668        
;;;669        //按键控制曲线波形
;;;670        if(screen_id == 0)
00000e  2e00              CMP      r6,#0
000010  d109              BNE      |L3.38|
;;;671        {
;;;672            if(control_id==1) //自动排空
000012  2c01              CMP      r4,#1
000014  d10f              BNE      |L3.54|
;;;673            {
;;;674                if( state ) //按下
000016  b13d              CBZ      r5,|L3.40|
;;;675                {
;;;676                    Tmy.Key.zdpk = 1;
000018  4857              LDR      r0,|L3.376|
00001a  7940              LDRB     r0,[r0,#5]  ; Tmy
00001c  f0200002          BIC      r0,r0,#2
000020  1c80              ADDS     r0,r0,#2
000022  4955              LDR      r1,|L3.376|
000024  7148              STRB     r0,[r1,#5]
                  |L3.38|
000026  e0a5              B        |L3.372|
                  |L3.40|
;;;677                }else
;;;678                {
;;;679                    Tmy.Key.zdpk = 0;
000028  4853              LDR      r0,|L3.376|
00002a  7940              LDRB     r0,[r0,#5]  ; Tmy
00002c  f0200002          BIC      r0,r0,#2
000030  4951              LDR      r1,|L3.376|
000032  7148              STRB     r0,[r1,#5]
000034  e09e              B        |L3.372|
                  |L3.54|
;;;680                }                                                        
;;;681            }else
;;;682            if(control_id==2) //二次排空 
000036  2c02              CMP      r4,#2
000038  d10f              BNE      |L3.90|
;;;683            {
;;;684                if( state ) //按下
00003a  b13d              CBZ      r5,|L3.76|
;;;685                {
;;;686                    Tmy.Key.ecpk = 1;
00003c  484e              LDR      r0,|L3.376|
00003e  7940              LDRB     r0,[r0,#5]  ; Tmy
000040  f0200004          BIC      r0,r0,#4
000044  1d00              ADDS     r0,r0,#4
000046  494c              LDR      r1,|L3.376|
000048  7148              STRB     r0,[r1,#5]
00004a  e093              B        |L3.372|
                  |L3.76|
;;;687                }else
;;;688                {
;;;689                    Tmy.Key.ecpk = 0;
00004c  484a              LDR      r0,|L3.376|
00004e  7940              LDRB     r0,[r0,#5]  ; Tmy
000050  f0200004          BIC      r0,r0,#4
000054  4948              LDR      r1,|L3.376|
000056  7148              STRB     r0,[r1,#5]
000058  e08c              B        |L3.372|
                  |L3.90|
;;;690                }                                                        
;;;691            }else
;;;692            if(control_id==3) //回吸
00005a  2c03              CMP      r4,#3
00005c  d10f              BNE      |L3.126|
;;;693            {
;;;694                if( state ) //按下
00005e  b13d              CBZ      r5,|L3.112|
;;;695                {
;;;696                    Tmy.Key.hx = 1;
000060  4845              LDR      r0,|L3.376|
000062  7940              LDRB     r0,[r0,#5]  ; Tmy
000064  f0200001          BIC      r0,r0,#1
000068  1c40              ADDS     r0,r0,#1
00006a  4943              LDR      r1,|L3.376|
00006c  7148              STRB     r0,[r1,#5]
00006e  e081              B        |L3.372|
                  |L3.112|
;;;697                }else
;;;698                {
;;;699                    Tmy.Key.hx = 0;
000070  4841              LDR      r0,|L3.376|
000072  7940              LDRB     r0,[r0,#5]  ; Tmy
000074  f0200001          BIC      r0,r0,#1
000078  493f              LDR      r1,|L3.376|
00007a  7148              STRB     r0,[r1,#5]
00007c  e07a              B        |L3.372|
                  |L3.126|
;;;700                }                                                        
;;;701            }else
;;;702            if(control_id==4) //方向
00007e  2c04              CMP      r4,#4
000080  d108              BNE      |L3.148|
;;;703            {
;;;704                if( state ) //按下
000082  b11d              CBZ      r5,|L3.140|
;;;705                {
;;;706                    MOTOR_SetDir( UP );//
000084  2000              MOVS     r0,#0
000086  f7fffffe          BL       MOTOR_SetDir
00008a  e073              B        |L3.372|
                  |L3.140|
;;;707                    //SetTextValue(0,18,"上升");
;;;708                }else
;;;709                {
;;;710                    MOTOR_SetDir( DOWN );
00008c  2001              MOVS     r0,#1
00008e  f7fffffe          BL       MOTOR_SetDir
000092  e06f              B        |L3.372|
                  |L3.148|
;;;711                    //SetTextValue(0,18,"下降");
;;;712                }                                                        
;;;713            }else
;;;714            if(control_id==6)
000094  2c06              CMP      r4,#6
000096  d103              BNE      |L3.160|
;;;715            {
;;;716                Motor.gear = GEAR_SLOWEST; //慢慢速          
000098  2000              MOVS     r0,#0
00009a  4938              LDR      r1,|L3.380|
00009c  7048              STRB     r0,[r1,#1]
00009e  e069              B        |L3.372|
                  |L3.160|
;;;717            }
;;;718            else if(control_id==5)
0000a0  2c05              CMP      r4,#5
0000a2  d103              BNE      |L3.172|
;;;719            {
;;;720                Motor.gear = GEAR_SLOW; //常慢速
0000a4  2001              MOVS     r0,#1
0000a6  4935              LDR      r1,|L3.380|
0000a8  7048              STRB     r0,[r1,#1]
0000aa  e063              B        |L3.372|
                  |L3.172|
;;;721            }else if(control_id==7)
0000ac  2c07              CMP      r4,#7
0000ae  d103              BNE      |L3.184|
;;;722            {
;;;723                Motor.gear = GEAR_SLOW_NORMAL_FAST; //慢中快速
0000b0  2002              MOVS     r0,#2
0000b2  4932              LDR      r1,|L3.380|
0000b4  7048              STRB     r0,[r1,#1]
0000b6  e05d              B        |L3.372|
                  |L3.184|
;;;724            }  else if(control_id==8) 
0000b8  2c08              CMP      r4,#8
0000ba  d103              BNE      |L3.196|
;;;725            {
;;;726                Motor.gear = GEAR_SLOW_FAST_FASTEST; //慢快最快速
0000bc  2003              MOVS     r0,#3
0000be  492f              LDR      r1,|L3.380|
0000c0  7048              STRB     r0,[r1,#1]
0000c2  e057              B        |L3.372|
                  |L3.196|
;;;727            }  else if(control_id==9) //顶杆检查
0000c4  2c09              CMP      r4,#9
0000c6  d126              BNE      |L3.278|
;;;728            {
;;;729    	        //if( state ) //按下 //顶杆检查
;;;730                {
;;;731                    Tmy.Key.fix = 1;
0000c8  482b              LDR      r0,|L3.376|
0000ca  7940              LDRB     r0,[r0,#5]  ; Tmy
0000cc  f0200010          BIC      r0,r0,#0x10
0000d0  3010              ADDS     r0,r0,#0x10
0000d2  4929              LDR      r1,|L3.376|
0000d4  7148              STRB     r0,[r1,#5]
;;;732                    //Tmy.work_state = STA_FIX;
;;;733                    
;;;734                    if( dg_sta == DG_STOP_BOT ) //顶杆在底部
0000d6  482a              LDR      r0,|L3.384|
0000d8  7800              LDRB     r0,[r0,#0]  ; dg_sta
0000da  2805              CMP      r0,#5
0000dc  d108              BNE      |L3.240|
;;;735                    {
;;;736                        SetTextValue(0,26,"检修上升...");
0000de  a229              ADR      r2,|L3.388|
0000e0  211a              MOVS     r1,#0x1a
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       SetTextValue
;;;737                        dg_sta = DG_FIX_UP;//检修上升
0000e8  200e              MOVS     r0,#0xe
0000ea  4925              LDR      r1,|L3.384|
0000ec  7008              STRB     r0,[r1,#0]
0000ee  e041              B        |L3.372|
                  |L3.240|
;;;738                    }else
;;;739                    if( dg_sta == DG_STOP_TOP ) //顶杆在顶部
0000f0  4823              LDR      r0,|L3.384|
0000f2  7800              LDRB     r0,[r0,#0]  ; dg_sta
0000f4  2804              CMP      r0,#4
0000f6  d108              BNE      |L3.266|
;;;740                    {
;;;741                        SetTextValue(0,26,"顶杆归零...");
0000f8  a225              ADR      r2,|L3.400|
0000fa  211a              MOVS     r1,#0x1a
0000fc  2000              MOVS     r0,#0
0000fe  f7fffffe          BL       SetTextValue
;;;742                        dg_sta = DG_FIX_DOWN;//顶杆归零
000102  200f              MOVS     r0,#0xf
000104  491e              LDR      r1,|L3.384|
000106  7008              STRB     r0,[r1,#0]
000108  e034              B        |L3.372|
                  |L3.266|
;;;743                    }else
;;;744                    {
;;;745                        SetTextValue(0,26,"顶杆未在底部，操作错误");
00010a  a224              ADR      r2,|L3.412|
00010c  211a              MOVS     r1,#0x1a
00010e  2000              MOVS     r0,#0
000110  f7fffffe          BL       SetTextValue
000114  e02e              B        |L3.372|
                  |L3.278|
;;;746                    }
;;;747                }
;;;748    //            else //抬起 复位
;;;749    //            {
;;;750    //                Tmy.key.fix = 0;
;;;751    //                Tmy.work_state = STA_RESET;
;;;752    //            } 
;;;753            }else if(control_id==21) //注射器容量1.8ml
000116  2c15              CMP      r4,#0x15
000118  d10c              BNE      |L3.308|
;;;754            {
;;;755                Motor.max_step = MAX_STEP_18ML;
00011a  4826              LDR      r0,|L3.436|
00011c  4917              LDR      r1,|L3.380|
00011e  6088              STR      r0,[r1,#8]  ; Motor
;;;756                SetTextInt32(0, 20, Motor.max_step, 0, 1); //显示最大步数                                                      
000120  2001              MOVS     r0,#1
000122  9000              STR      r0,[sp,#0]
000124  4608              MOV      r0,r1
000126  2300              MOVS     r3,#0
000128  2114              MOVS     r1,#0x14
00012a  6882              LDR      r2,[r0,#8]  ; Motor
00012c  4618              MOV      r0,r3
00012e  f7fffffe          BL       SetTextInt32
000132  e01f              B        |L3.372|
                  |L3.308|
;;;757            }else if(control_id==22) //注射器容量2.2ml
000134  2c16              CMP      r4,#0x16
000136  d10c              BNE      |L3.338|
;;;758            {
;;;759                Motor.max_step = MAX_STEP_22ML;
000138  481f              LDR      r0,|L3.440|
00013a  4910              LDR      r1,|L3.380|
00013c  6088              STR      r0,[r1,#8]  ; Motor
;;;760                SetTextInt32(0, 20, Motor.max_step, 0, 1); //显示最大步数                                                      
00013e  2001              MOVS     r0,#1
000140  9000              STR      r0,[sp,#0]
000142  4608              MOV      r0,r1
000144  2300              MOVS     r3,#0
000146  2114              MOVS     r1,#0x14
000148  6882              LDR      r2,[r0,#8]  ; Motor
00014a  4618              MOV      r0,r3
00014c  f7fffffe          BL       SetTextInt32
000150  e010              B        |L3.372|
                  |L3.338|
;;;761            }else if(control_id==28) //培训
000152  2c1c              CMP      r4,#0x1c
000154  d10e              BNE      |L3.372|
;;;762            {
;;;763                if( state ) //按下
000156  b13d              CBZ      r5,|L3.360|
;;;764                {
;;;765                    Tmy.Key.px = 1;
000158  4807              LDR      r0,|L3.376|
00015a  7940              LDRB     r0,[r0,#5]  ; Tmy
00015c  f0200020          BIC      r0,r0,#0x20
000160  3020              ADDS     r0,r0,#0x20
000162  4905              LDR      r1,|L3.376|
000164  7148              STRB     r0,[r1,#5]
000166  e005              B        |L3.372|
                  |L3.360|
;;;766                }else
;;;767                {
;;;768                    Tmy.Key.px = 0;
000168  4803              LDR      r0,|L3.376|
00016a  7940              LDRB     r0,[r0,#5]  ; Tmy
00016c  f0200020          BIC      r0,r0,#0x20
000170  4901              LDR      r1,|L3.376|
000172  7148              STRB     r0,[r1,#5]
                  |L3.372|
;;;769                }                                                      
;;;770            }
;;;771        }
;;;772        
;;;773    //    //按键控制曲线波形
;;;774    //    if(screen_id == 11)
;;;775    //    {
;;;776    //        if(control_id==2)                                                            //正弦波控件
;;;777    //        {
;;;778    //            curves_type = 0;                                                                
;;;779    //        }
;;;780    //        else if(control_id==3)                                                       //锯齿波控件
;;;781    //        {
;;;782    //            curves_type = 1;
;;;783    //        }   
;;;784    //    }
;;;785    //    //时间画面按钮获取RTC时间
;;;786    //    if(screen_id == 8)
;;;787    //    {
;;;788    //        if(control_id==14 )                                                                     //获取时间
;;;789    //        {
;;;790    //            SetTextInt32(8,7,years,1,1);                                                        //显示年份                                                
;;;791    //            SetTextInt32(8,8,months,1,1);                                                       //显示月份  
;;;792    //            SetTextInt32(8,9,days,1,1);                                                         //显示日
;;;793    //            SetTextInt32(8,10,hours,1,1);                                                       //显示时
;;;794    //            SetTextInt32(8,11,minutes,1,1);                                                     //显示分
;;;795    //            SetTextInt32(8,12,sec,1,1);                                                         //显示秒
;;;796    //            
;;;797    //            if(weeks == 0)
;;;798    //            {
;;;799    //                 SetTextValue(8,13,"日");                                                       //显示星期数
;;;800    //            }
;;;801    //            else if(weeks == 1)
;;;802    //            {
;;;803    //                 SetTextValue(8,13,"一");
;;;804    //            }
;;;805    //            else if(weeks == 2)
;;;806    //            {
;;;807    //                 SetTextValue(8,13,"二");
;;;808    //            }
;;;809    //            else if(weeks == 3)
;;;810    //            {
;;;811    //                 SetTextValue(8,13,"三");
;;;812    //            }
;;;813    //            else if(weeks == 4)
;;;814    //            {
;;;815    //                 SetTextValue(8,13,"四"); 
;;;816    //            }
;;;817    //            else if(weeks == 5)
;;;818    //            { 
;;;819    //                 SetTextValue(8,13,"五");
;;;820    //            }
;;;821    //            else if(weeks == 6)
;;;822    //            {
;;;823    //                 SetTextValue(8,13,"六");
;;;824    //            }                 
;;;825    //        }
;;;826    //    }
;;;827    //    //选择控件显示时间段
;;;828    //     if(screen_id == 13 && control_id==4)
;;;829    //     {
;;;830    //         
;;;831    //        if(Select_H<=6)//if(Select_H>=0&&Select_H<=6)                                                       //0~6小时，凌晨  
;;;832    //        {     
;;;833    //            SetSelectorValue(13,3,0);                                                       //设置选择控件选项  
;;;834    //        }                                        
;;;835    //        else if(Select_H>=7&&Select_H<=12)                                                  //7~12小时，上午
;;;836    //        {
;;;837    //            SetSelectorValue(13,3,1);
;;;838    //        }         
;;;839    //        else if(Select_H>=13&&Select_H<=18)                                                 //13~18小时，下午
;;;840    //        { 
;;;841    //            SetSelectorValue(13,3,2);
;;;842    //        }    
;;;843    //        else if(Select_H>18&&Select_H<=23)                                                  //19~23小时，深夜
;;;844    //        {
;;;845    //            SetSelectorValue(13,3,3);
;;;846    //        }    
;;;847    //         Last_H   = Select_H;   
;;;848    //         Last_M   = Select_M;          
;;;849    //     }
;;;850    //         //选择控件显示时间段
;;;851    //     if(screen_id == 13 && control_id==5)
;;;852    //     {
;;;853    //          SetSelectorValue(13,1,Last_H);
;;;854    //          SetSelectorValue(13,2,Last_M);
;;;855    //     }
;;;856    }
000174  bdf8              POP      {r3-r7,pc}
;;;857    
                          ENDP

000176  0000              DCW      0x0000
                  |L3.376|
                          DCD      Tmy
                  |L3.380|
                          DCD      Motor
                  |L3.384|
                          DCD      dg_sta
                  |L3.388|
000184  bcecd0de          DCB      188,236,208,222,201,207,201,253,"...",0
000188  c9cfc9fd
00018c  2e2e2e00
                  |L3.400|
000190  b6a5b8cb          DCB      182,165,184,203,185,233,193,227,"...",0
000194  b9e9c1e3
000198  2e2e2e00
                  |L3.412|
00019c  b6a5b8cb          DCB      182,165,184,203,206,180,212,218,181,215,178,191,163,172,178
0001a0  ceb4d4da
0001a4  b5d7b2bf
0001a8  a3acb2  
0001ab  d9d7f7b4          DCB      217,215,247,180,237,206,243,0
0001af  edcef300
0001b3  00                DCB      0
                  |L3.436|
                          DCD      0x0003b97e
                  |L3.440|
                          DCD      0x0004af8e

                          AREA ||i.NotifyMenu||, CODE, READONLY, ALIGN=1

                  NotifyMenu PROC
;;;940    */
;;;941    void NotifyMenu(uint16 screen_id, uint16 control_id, uint8 item, uint8 state)
000000  4770              BX       lr
;;;942    {
;;;943        //TODO: 添加用户代码
;;;944    }
;;;945    
                          ENDP


                          AREA ||i.NotifyMeter||, CODE, READONLY, ALIGN=1

                  NotifyMeter PROC
;;;927    */
;;;928    void NotifyMeter(uint16 screen_id, uint16 control_id, uint32 value)
000000  4770              BX       lr
;;;929    {
;;;930        //TODO: 添加用户代码
;;;931    }
;;;932    
                          ENDP


                          AREA ||i.NotifyProgress||, CODE, READONLY, ALIGN=1

                  NotifyProgress PROC
;;;896    */                                                                              
;;;897    void NotifyProgress(uint16 screen_id, uint16 control_id, uint32 value)           
000000  4770              BX       lr
;;;898    {  
;;;899        //TODO: 添加用户代码   
;;;900    }                                                                                
;;;901    
                          ENDP


                          AREA ||i.NotifyReadFlash||, CODE, READONLY, ALIGN=1

                  NotifyReadFlash PROC
;;;985    */
;;;986    void NotifyReadFlash(uint8 status,uint8 *_data,uint16 length)
000000  4770              BX       lr
;;;987    {
;;;988        //TODO: 添加用户代码
;;;989    }
;;;990    
                          ENDP


                          AREA ||i.NotifyReadRTC||, CODE, READONLY, ALIGN=1

                  NotifyReadRTC PROC
;;;1009   */
;;;1010   void NotifyReadRTC(uint8 year,uint8 month,uint8 week,uint8 day,uint8 hour,uint8 minute,uint8 second)
000000  b570              PUSH     {r4-r6,lr}
;;;1011   { 
000002  ac04              ADD      r4,sp,#0x10
000004  cc70              LDM      r4,{r4-r6}
;;;1012   ;	
;;;1013   //    sec    =(0xff & (second>>4))*10 +(0xf & second);                                    //BCD码转十进制
;;;1014   //    years   =(0xff & (year>>4))*10 +(0xf & year);                                      
;;;1015   //    months  =(0xff & (month>>4))*10 +(0xf & month);                                     
;;;1016   //    weeks   =(0xff & (week>>4))*10 +(0xf & week);                                      
;;;1017   //    days    =(0xff & (day>>4))*10 +(0xf & day);                                      
;;;1018   //    hours   =(0xff & (hour>>4))*10 +(0xf & hour);                                       
;;;1019   //    minutes =(0xff & (minute>>4))*10 +(0xf & minute);                                                                                                                  
;;;1020   }
000006  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i.NotifyScreen||, CODE, READONLY, ALIGN=2

                  NotifyScreen PROC
;;;381    */
;;;382    void NotifyScreen(uint16 screen_id)
000000  b510              PUSH     {r4,lr}
;;;383    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;384        //TODO: 添加用户代码
;;;385        current_screen_id = screen_id;                                                   //在工程配置中开启画面切换通知，记录当前画面ID
000006  4843              LDR      r0,|L9.276|
000008  8004              STRH     r4,[r0,#0]
;;;386    
;;;387        //进到画面3亮起一个按钮并发送握手指令
;;;388        if(screen_id == 0)
00000a  b92c              CBNZ     r4,|L9.24|
;;;389        {
;;;390            SetBuzzer(100);               
00000c  2064              MOVS     r0,#0x64
00000e  f7fffffe          BL       SetBuzzer
;;;391            lg_lcd_init = 1;
000012  2001              MOVS     r0,#1
000014  4940              LDR      r1,|L9.280|
000016  7008              STRB     r0,[r1,#0]
                  |L9.24|
;;;392    //        //if( lg_lcd_init < 2 )
;;;393    //        {
;;;394    //            SetBuzzer(100);
;;;395    //            lg_lcd_init = 2;
;;;396    //            LCD_ParaInit();
;;;397    //        }
;;;398        }
;;;399        if(screen_id == 3)
000018  2c03              CMP      r4,#3
00001a  d106              BNE      |L9.42|
;;;400        {
;;;401            SetButtonValue(3,1,1);
00001c  2201              MOVS     r2,#1
00001e  4611              MOV      r1,r2
000020  2003              MOVS     r0,#3
000022  f7fffffe          BL       SetButtonValue
;;;402            SetHandShake();                 
000026  f7fffffe          BL       SetHandShake
                  |L9.42|
;;;403            
;;;404        }
;;;405        //进到画面自动播放GIF
;;;406        if(current_screen_id == 9)
00002a  483a              LDR      r0,|L9.276|
00002c  8800              LDRH     r0,[r0,#0]  ; current_screen_id
00002e  2809              CMP      r0,#9
000030  d102              BNE      |L9.56|
;;;407        {
;;;408            AnimationStart(9,1);                                                         //动画开始播放
000032  2101              MOVS     r1,#1
000034  f7fffffe          BL       AnimationStart
                  |L9.56|
;;;409        }
;;;410    
;;;411        //进到二维码页面生成二维码
;;;412        if(current_screen_id==14)                                   
000038  4836              LDR      r0,|L9.276|
00003a  8800              LDRH     r0,[r0,#0]  ; current_screen_id
00003c  280e              CMP      r0,#0xe
00003e  d10b              BNE      |L9.88|
;;;413        {
;;;414            //二维码控件显示中文字符时，需要转换为UTF8编码，
;;;415            //通过“指令助手”，转换“www.gz-dc.com” ，得到字符串编码如下
;;;416            uint8 dat[] = {0x77,0x77,0x77,0x2E,0x67,0x7A,0x2D,0x64,0x63,0x2E,0x63,0x6F,0x6D};
000040  a336              ADR      r3,|L9.284|
000042  cb0f              LDM      r3,{r0-r3}
000044  e9cd2304          STRD     r2,r3,[sp,#0x10]
000048  e9cd0102          STRD     r0,r1,[sp,#8]
;;;417            SetTextValue(14,1,dat);                                                      //发送二维码字符编码                     
00004c  aa02              ADD      r2,sp,#8
00004e  2101              MOVS     r1,#1
000050  200e              MOVS     r0,#0xe
000052  f7fffffe          BL       SetTextValue
;;;418        }
000056  bf00              NOP      
                  |L9.88|
;;;419    
;;;420        //数据记录显示
;;;421        if(current_screen_id == 15)
000058  482e              LDR      r0,|L9.276|
00005a  8800              LDRH     r0,[r0,#0]  ; current_screen_id
00005c  280f              CMP      r0,#0xf
00005e  d144              BNE      |L9.234|
;;;422        {
;;;423            Record_SetEvent(15,1,0,0);  
000060  2300              MOVS     r3,#0
000062  461a              MOV      r2,r3
000064  2101              MOVS     r1,#1
000066  f7fffffe          BL       Record_SetEvent
;;;424            Record_SetEvent(15,1,1,0);
00006a  2300              MOVS     r3,#0
00006c  2201              MOVS     r2,#1
00006e  4611              MOV      r1,r2
000070  200f              MOVS     r0,#0xf
000072  f7fffffe          BL       Record_SetEvent
;;;425            Record_SetEvent(15,1,2,0);
000076  2300              MOVS     r3,#0
000078  2202              MOVS     r2,#2
00007a  2101              MOVS     r1,#1
00007c  200f              MOVS     r0,#0xf
00007e  f7fffffe          BL       Record_SetEvent
;;;426            Record_SetEvent(15,1,3,0);
000082  2300              MOVS     r3,#0
000084  2203              MOVS     r2,#3
000086  2101              MOVS     r1,#1
000088  200f              MOVS     r0,#0xf
00008a  f7fffffe          BL       Record_SetEvent
;;;427            Record_SetEvent(15,1,4,0);
00008e  2300              MOVS     r3,#0
000090  2204              MOVS     r2,#4
000092  2101              MOVS     r1,#1
000094  200f              MOVS     r0,#0xf
000096  f7fffffe          BL       Record_SetEvent
;;;428            Record_SetEvent(15,1,5,0);
00009a  2300              MOVS     r3,#0
00009c  2205              MOVS     r2,#5
00009e  2101              MOVS     r1,#1
0000a0  200f              MOVS     r0,#0xf
0000a2  f7fffffe          BL       Record_SetEvent
;;;429            Record_SetEvent(15,1,6,0);
0000a6  2300              MOVS     r3,#0
0000a8  2206              MOVS     r2,#6
0000aa  2101              MOVS     r1,#1
0000ac  200f              MOVS     r0,#0xf
0000ae  f7fffffe          BL       Record_SetEvent
;;;430            Record_SetEvent(15,1,7,0);
0000b2  2300              MOVS     r3,#0
0000b4  2207              MOVS     r2,#7
0000b6  2101              MOVS     r1,#1
0000b8  200f              MOVS     r0,#0xf
0000ba  f7fffffe          BL       Record_SetEvent
;;;431            delay_ms(2000);                                                              //延时两秒
0000be  f44f60fa          MOV      r0,#0x7d0
0000c2  f7fffffe          BL       delay_ms
;;;432            Record_ResetEvent(15,1,0,0);
0000c6  2300              MOVS     r3,#0
0000c8  461a              MOV      r2,r3
0000ca  2101              MOVS     r1,#1
0000cc  200f              MOVS     r0,#0xf
0000ce  f7fffffe          BL       Record_ResetEvent
;;;433            Record_ResetEvent(15,1,1,0);
0000d2  2300              MOVS     r3,#0
0000d4  2201              MOVS     r2,#1
0000d6  4611              MOV      r1,r2
0000d8  200f              MOVS     r0,#0xf
0000da  f7fffffe          BL       Record_ResetEvent
;;;434            Record_ResetEvent(15,1,2,0);
0000de  2300              MOVS     r3,#0
0000e0  2202              MOVS     r2,#2
0000e2  2101              MOVS     r1,#1
0000e4  200f              MOVS     r0,#0xf
0000e6  f7fffffe          BL       Record_ResetEvent
                  |L9.234|
;;;435    
;;;436        }
;;;437        //进入音乐画面自动播放
;;;438        if(current_screen_id == 18)   
0000ea  480a              LDR      r0,|L9.276|
0000ec  8800              LDRH     r0,[r0,#0]  ; current_screen_id
0000ee  2812              CMP      r0,#0x12
0000f0  d10d              BNE      |L9.270|
;;;439        {
;;;440            uint8 buffer[19] = {0x94,0x61 ,0x3A ,0x2F ,0x73 ,0x6F ,0x75 ,0x6E ,0x64 ,0x73 ,0x2F , 0x30 ,0x31 ,0x2E ,0x6D ,0x70 ,0x33};
0000f2  2214              MOVS     r2,#0x14
0000f4  490d              LDR      r1,|L9.300|
0000f6  a801              ADD      r0,sp,#4
0000f8  f7fffffe          BL       __aeabi_memcpy4
;;;441            SetButtonValue(18,3,1);
0000fc  2201              MOVS     r2,#1
0000fe  2103              MOVS     r1,#3
000100  2012              MOVS     r0,#0x12
000102  f7fffffe          BL       SetButtonValue
;;;442            PlayMusic(buffer);                                                           //播放音乐
000106  a801              ADD      r0,sp,#4
000108  f7fffffe          BL       PlayMusic
;;;443        }
00010c  bf00              NOP      
                  |L9.270|
;;;444    }
00010e  b006              ADD      sp,sp,#0x18
000110  bd10              POP      {r4,pc}
;;;445    
                          ENDP

000112  0000              DCW      0x0000
                  |L9.276|
                          DCD      current_screen_id
                  |L9.280|
                          DCD      lg_lcd_init
                  |L9.284|
00011c  7777772e          DCB      "www.gz-dc.com",0
000120  677a2d64
000124  632e636f
000128  6d00    
00012a  00                DCB      0
00012b  00                DCB      0
                  |L9.300|
                          DCD      ||.constdata||

                          AREA ||i.NotifySelector||, CODE, READONLY, ALIGN=1

                  NotifySelector PROC
;;;952    */
;;;953    void NotifySelector(uint16 screen_id, uint16 control_id, uint8  item)
000000  4770              BX       lr
;;;954    {
;;;955    	;
;;;956    //    if(screen_id == 13&&control_id == 1)                                               //获取当前选择控件的值
;;;957    //    {
;;;958    //        Select_H =  item;
;;;959    //    } 
;;;960    //    if(screen_id == 13&&control_id == 2)                                               //获取当前选择控件的值
;;;961    //    {
;;;962    //        Select_M =  item;
;;;963    //    } 
;;;964    
;;;965    }
;;;966    
                          ENDP


                          AREA ||i.NotifySlider||, CODE, READONLY, ALIGN=1

                  NotifySlider PROC
;;;908    */                                                                              
;;;909    void NotifySlider(uint16 screen_id, uint16 control_id, uint32 value)             
000000  b5f8              PUSH     {r3-r7,lr}
;;;910    {                                                             
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;911        if(screen_id==7&&control_id==5)                                                  //滑块控制
000008  2e07              CMP      r6,#7
00000a  d111              BNE      |L11.48|
00000c  2d05              CMP      r5,#5
00000e  d10f              BNE      |L11.48|
;;;912        {                                                                              
;;;913            if(value<100||value>0)                                                       
000010  2c64              CMP      r4,#0x64
000012  d300              BCC      |L11.22|
000014  b164              CBZ      r4,|L11.48|
                  |L11.22|
;;;914            {                                                                            
;;;915                SetProgressValue(7,4,value);                                             //更新进度条数值
000016  4622              MOV      r2,r4
000018  2104              MOVS     r1,#4
00001a  2007              MOVS     r0,#7
00001c  f7fffffe          BL       SetProgressValue
;;;916                SetTextInt32(7,6,value,0,1);                                             
000020  2001              MOVS     r0,#1
000022  2300              MOVS     r3,#0
000024  4622              MOV      r2,r4
000026  2106              MOVS     r1,#6
000028  9000              STR      r0,[sp,#0]
00002a  2007              MOVS     r0,#7
00002c  f7fffffe          BL       SetTextInt32
                  |L11.48|
;;;917            }
;;;918        }
;;;919    }
000030  bdf8              POP      {r3-r7,pc}
;;;920    
                          ENDP


                          AREA ||i.NotifyText||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                  NotifyText PROC
;;;866    */
;;;867    void NotifyText(uint16 screen_id, uint16 control_id, uint8 *str)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;868    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;869        if(screen_id==4)                                                                //画面ID2：文本设置和显示
00000a  2c04              CMP      r4,#4
00000c  d129              BNE      |L12.98|
;;;870        {                                                                            
;;;871            int32 value=0;                                                            
00000e  2000              MOVS     r0,#0
000010  9001              STR      r0,[sp,#4]
;;;872            sscanf((char*)str,"%ld",&value);//sscanf(str,"%ld",&value);                 //把字符串转换为整数 
000012  aa01              ADD      r2,sp,#4
000014  a114              ADR      r1,|L12.104|
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       __0sscanf
;;;873            if(control_id==2)                                                           //最高电压
00001c  2d02              CMP      r5,#2
00001e  d11f              BNE      |L12.96|
;;;874            {                                                                         
;;;875                //限定数值范围（也可以在文本控件属性中设置）                             
;;;876                if(value<0)                                                              
000020  9801              LDR      r0,[sp,#4]
000022  2800              CMP      r0,#0
000024  da02              BGE      |L12.44|
;;;877                {                                                                        
;;;878                    value = 0;                                                            
000026  2000              MOVS     r0,#0
000028  9001              STR      r0,[sp,#4]
00002a  e006              B        |L12.58|
                  |L12.44|
;;;879                }                                                                        
;;;880                else if(value>380)                                                       
00002c  9801              LDR      r0,[sp,#4]
00002e  f5b07fbe          CMP      r0,#0x17c
000032  dd02              BLE      |L12.58|
;;;881                {                                                                        
;;;882                    value = 380;                                                           
000034  f44f70be          MOV      r0,#0x17c
000038  9001              STR      r0,[sp,#4]
                  |L12.58|
;;;883                }                                                                        
;;;884                SetTextInt32(4,2,value,0,1);                                             //更新最高电压
00003a  2001              MOVS     r0,#1
00003c  2300              MOVS     r3,#0
00003e  9000              STR      r0,[sp,#0]
000040  2102              MOVS     r1,#2
000042  2004              MOVS     r0,#4
000044  9a01              LDR      r2,[sp,#4]
000046  f7fffffe          BL       SetTextInt32
;;;885                SetTextInt32(4,5,value/2,1,1);                                           //更新最高电压/2
00004a  2001              MOVS     r0,#1
00004c  9f01              LDR      r7,[sp,#4]
00004e  9000              STR      r0,[sp,#0]
000050  eb0770d7          ADD      r0,r7,r7,LSR #31
000054  1042              ASRS     r2,r0,#1
000056  2301              MOVS     r3,#1
000058  2105              MOVS     r1,#5
00005a  2004              MOVS     r0,#4
00005c  f7fffffe          BL       SetTextInt32
                  |L12.96|
;;;886            }                                                                         
;;;887        }                                                                            
000060  bf00              NOP      
                  |L12.98|
;;;888    }                                                                                
000062  e8bd81fc          POP      {r2-r8,pc}
;;;889    
                          ENDP

000066  0000              DCW      0x0000
                  |L12.104|
000068  256c6400          DCB      "%ld",0

                          AREA ||i.NotifyTimer||, CODE, READONLY, ALIGN=1

                  NotifyTimer PROC
;;;971    */
;;;972    void NotifyTimer(uint16 screen_id, uint16 control_id)
000000  b570              PUSH     {r4-r6,lr}
;;;973    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;974        if(screen_id==8&&control_id == 7)
000006  2d08              CMP      r5,#8
000008  d104              BNE      |L13.20|
00000a  2c07              CMP      r4,#7
00000c  d102              BNE      |L13.20|
;;;975        {
;;;976            SetBuzzer(100);
00000e  2064              MOVS     r0,#0x64
000010  f7fffffe          BL       SetBuzzer
                  |L13.20|
;;;977        } 
;;;978    }
000014  bd70              POP      {r4-r6,pc}
;;;979    
                          ENDP


                          AREA ||i.NotifyTouchXY||, CODE, READONLY, ALIGN=1

                  NotifyTouchXY PROC
;;;451    */
;;;452    void NotifyTouchXY(uint8 press,uint16 x,uint16 y)
000000  4770              BX       lr
;;;453    { 
;;;454        //TODO: 添加用户代码
;;;455    }
;;;456    
                          ENDP


                          AREA ||i.NotifyWriteFlash||, CODE, READONLY, ALIGN=1

                  NotifyWriteFlash PROC
;;;994    */
;;;995    void NotifyWriteFlash(uint8 status)
000000  4770              BX       lr
;;;996    {
;;;997        //TODO: 添加用户代码
;;;998    }
;;;999    
                          ENDP


                          AREA ||i.ProcessMessage||, CODE, READONLY, ALIGN=2

                  ProcessMessage PROC
;;;243    */
;;;244    void ProcessMessage( PCTRL_MSG msg, uint16 size )
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;245    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;246        uint8 cmd_type = msg->cmd_type;                                                  //指令类型
000008  7866              LDRB     r6,[r4,#1]
;;;247        uint8 ctrl_msg = msg->ctrl_msg;                                                  //消息的类型
00000a  78a7              LDRB     r7,[r4,#2]
;;;248        uint8 control_type = msg->control_type;                                          //控件类型
00000c  f8948007          LDRB     r8,[r4,#7]
;;;249        uint16 screen_id = PTR2U16(&msg->screen_id);                                     //画面ID
000010  7920              LDRB     r0,[r4,#4]
000012  78e1              LDRB     r1,[r4,#3]
000014  ea402901          ORR      r9,r0,r1,LSL #8
;;;250        uint16 control_id = PTR2U16(&msg->control_id);                                   //控件ID
000018  79a0              LDRB     r0,[r4,#6]
00001a  7961              LDRB     r1,[r4,#5]
00001c  ea402a01          ORR      r10,r0,r1,LSL #8
;;;251        uint32 value = PTR2U32(msg->param);                                              //数值
000020  7a20              LDRB     r0,[r4,#8]
000022  0601              LSLS     r1,r0,#24
000024  7a60              LDRB     r0,[r4,#9]
000026  ea414100          ORR      r1,r1,r0,LSL #16
00002a  7aa0              LDRB     r0,[r4,#0xa]
00002c  ea412000          ORR      r0,r1,r0,LSL #8
000030  7ae1              LDRB     r1,[r4,#0xb]
000032  ea400b01          ORR      r11,r0,r1
;;;252    
;;;253    
;;;254        switch(cmd_type)
000036  2e0d              CMP      r6,#0xd
000038  d02c              BEQ      |L16.148|
00003a  dc08              BGT      |L16.78|
00003c  2e01              CMP      r6,#1
00003e  d00f              BEQ      |L16.96|
000040  2e03              CMP      r6,#3
000042  d00e              BEQ      |L16.98|
000044  2e0b              CMP      r6,#0xb
000046  d029              BEQ      |L16.156|
000048  2e0c              CMP      r6,#0xc
                  |L16.74|
00004a  d16f              BNE      |L16.300|
00004c  e01e              B        |L16.140|
                  |L16.78|
00004e  2e0f              CMP      r6,#0xf
000050  d02c              BEQ      |L16.172|
000052  2e55              CMP      r6,#0x55
000054  d06b              BEQ      |L16.302|
000056  2eb1              CMP      r6,#0xb1
000058  d043              BEQ      |L16.226|
00005a  2ef7              CMP      r6,#0xf7
00005c  d1f5              BNE      |L16.74|
00005e  e02b              B        |L16.184|
                  |L16.96|
;;;255        {  
;;;256        case NOTIFY_TOUCH_PRESS:                                                        //触摸屏按下
;;;257        case NOTIFY_TOUCH_RELEASE:                                                      //触摸屏松开
000060  bf00              NOP      
                  |L16.98|
;;;258            NotifyTouchXY(cmd_buffer[1],PTR2U16(cmd_buffer+2),PTR2U16(cmd_buffer+4)); 
000062  4b47              LDR      r3,|L16.384|
000064  795b              LDRB     r3,[r3,#5]
000066  f8dfc118          LDR      r12,|L16.384|
00006a  f89cc004          LDRB     r12,[r12,#4]  ; cmd_buffer
00006e  ea43220c          ORR      r2,r3,r12,LSL #8
000072  4b43              LDR      r3,|L16.384|
000074  78db              LDRB     r3,[r3,#3]
000076  f8dfc108          LDR      r12,|L16.384|
00007a  f89cc002          LDRB     r12,[r12,#2]  ; cmd_buffer
00007e  ea43210c          ORR      r1,r3,r12,LSL #8
000082  4b3f              LDR      r3,|L16.384|
000084  7858              LDRB     r0,[r3,#1]  ; cmd_buffer
000086  f7fffffe          BL       NotifyTouchXY
;;;259            break;                                                                    
00008a  e076              B        |L16.378|
                  |L16.140|
;;;260        case NOTIFY_WRITE_FLASH_OK:                                                     //写FLASH成功
;;;261            NotifyWriteFlash(1);                                                      
00008c  2001              MOVS     r0,#1
00008e  f7fffffe          BL       NotifyWriteFlash
;;;262            break;                                                                    
000092  e072              B        |L16.378|
                  |L16.148|
;;;263        case NOTIFY_WRITE_FLASH_FAILD:                                                  //写FLASH失败
;;;264            NotifyWriteFlash(0);                                                      
000094  2000              MOVS     r0,#0
000096  f7fffffe          BL       NotifyWriteFlash
;;;265            break;                                                                    
00009a  e06e              B        |L16.378|
                  |L16.156|
;;;266        case NOTIFY_READ_FLASH_OK:                                                      //读取FLASH成功
;;;267            NotifyReadFlash(1,cmd_buffer+2,size-6);                                     //去除帧头帧尾
00009c  1fa8              SUBS     r0,r5,#6
00009e  b282              UXTH     r2,r0
0000a0  4937              LDR      r1,|L16.384|
0000a2  1c89              ADDS     r1,r1,#2
0000a4  2001              MOVS     r0,#1
0000a6  f7fffffe          BL       NotifyReadFlash
;;;268            break;                                                                    
0000aa  e066              B        |L16.378|
                  |L16.172|
;;;269        case NOTIFY_READ_FLASH_FAILD:                                                   //读取FLASH失败
;;;270            NotifyReadFlash(0,0,0);                                                   
0000ac  2200              MOVS     r2,#0
0000ae  4611              MOV      r1,r2
0000b0  4610              MOV      r0,r2
0000b2  f7fffffe          BL       NotifyReadFlash
;;;271            break;                                                                    
0000b6  e060              B        |L16.378|
                  |L16.184|
;;;272        case NOTIFY_READ_RTC:                                                           //读取RTC时间
;;;273            NotifyReadRTC(cmd_buffer[2],cmd_buffer[3],cmd_buffer[4],cmd_buffer[5],cmd_buffer[6],cmd_buffer[7],cmd_buffer[8]);
0000b8  4831              LDR      r0,|L16.384|
0000ba  7a01              LDRB     r1,[r0,#8]  ; cmd_buffer
0000bc  79c0              LDRB     r0,[r0,#7]  ; cmd_buffer
0000be  4a30              LDR      r2,|L16.384|
0000c0  7992              LDRB     r2,[r2,#6]  ; cmd_buffer
0000c2  f8dfc0bc          LDR      r12,|L16.384|
0000c6  e9cd2000          STRD     r2,r0,[sp,#0]
0000ca  9102              STR      r1,[sp,#8]
0000cc  f89c3005          LDRB     r3,[r12,#5]  ; cmd_buffer
0000d0  f89c2004          LDRB     r2,[r12,#4]  ; cmd_buffer
0000d4  f89c1003          LDRB     r1,[r12,#3]  ; cmd_buffer
0000d8  f89c0002          LDRB     r0,[r12,#2]  ; cmd_buffer
0000dc  f7fffffe          BL       NotifyReadRTC
;;;274            break;
0000e0  e04b              B        |L16.378|
                  |L16.226|
;;;275        case NOTIFY_CONTROL:
;;;276            {
;;;277                if(ctrl_msg==MSG_GET_CURRENT_SCREEN)                                    //画面ID变化通知
0000e2  2f01              CMP      r7,#1
0000e4  d103              BNE      |L16.238|
;;;278                {
;;;279                    NotifyScreen(screen_id);                                            //画面切换调动的函数
0000e6  4648              MOV      r0,r9
0000e8  f7fffffe          BL       NotifyScreen
0000ec  e040              B        |L16.368|
                  |L16.238|
;;;280                }
;;;281                else
;;;282                {
;;;283                    switch(control_type)
0000ee  f1a80010          SUB      r0,r8,#0x10
0000f2  280c              CMP      r0,#0xc
0000f4  d23a              BCS      |L16.364|
0000f6  e8dff000          TBB      [pc,r0]
0000fa  060c              DCB      0x06,0x0c
0000fc  131b2139          DCB      0x13,0x1b,0x21,0x39
000100  39343939          DCB      0x39,0x34,0x39,0x39
000104  272e              DCB      0x27,0x2e
;;;284                    {
;;;285                    case kCtrlButton:                                                   //按钮控件
;;;286                        NotifyButton(screen_id,control_id,msg->param[1]);                  
000106  7a62              LDRB     r2,[r4,#9]
000108  4651              MOV      r1,r10
00010a  4648              MOV      r0,r9
00010c  f7fffffe          BL       NotifyButton
;;;287                        break;                                                             
000110  e02d              B        |L16.366|
;;;288                    case kCtrlText:                                                     //文本控件
;;;289                        NotifyText(screen_id,control_id,msg->param);                       
000112  f1040208          ADD      r2,r4,#8
000116  4651              MOV      r1,r10
000118  4648              MOV      r0,r9
00011a  f7fffffe          BL       NotifyText
;;;290                        break;                                                             
00011e  e026              B        |L16.366|
;;;291                    case kCtrlProgress:                                                 //进度条控件
;;;292                        NotifyProgress(screen_id,control_id,value);                        
000120  465a              MOV      r2,r11
000122  4651              MOV      r1,r10
000124  4648              MOV      r0,r9
000126  f7fffffe          BL       NotifyProgress
;;;293                        break;                                                             
00012a  e020              B        |L16.366|
                  |L16.300|
00012c  e024              B        |L16.376|
                  |L16.302|
00012e  e020              B        |L16.370|
;;;294                    case kCtrlSlider:                                                   //滑动条控件
;;;295                        NotifySlider(screen_id,control_id,value);                          
000130  465a              MOV      r2,r11
000132  4651              MOV      r1,r10
000134  4648              MOV      r0,r9
000136  f7fffffe          BL       NotifySlider
;;;296                        break;                                                             
00013a  e018              B        |L16.366|
;;;297                    case kCtrlMeter:                                                    //仪表控件
;;;298                        NotifyMeter(screen_id,control_id,value);                           
00013c  465a              MOV      r2,r11
00013e  4651              MOV      r1,r10
000140  4648              MOV      r0,r9
000142  f7fffffe          BL       NotifyMeter
;;;299                        break;                                                             
000146  e012              B        |L16.366|
;;;300                    case kCtrlMenu:                                                     //菜单控件
;;;301                        NotifyMenu(screen_id,control_id,msg->param[0],msg->param[1]);      
000148  7a63              LDRB     r3,[r4,#9]
00014a  7a22              LDRB     r2,[r4,#8]
00014c  4651              MOV      r1,r10
00014e  4648              MOV      r0,r9
000150  f7fffffe          BL       NotifyMenu
;;;302                        break;                                                              
000154  e00b              B        |L16.366|
;;;303                    case kCtrlSelector:                                                 //选择控件
;;;304                        NotifySelector(screen_id,control_id,msg->param[0]);                
000156  7a22              LDRB     r2,[r4,#8]
000158  4651              MOV      r1,r10
00015a  4648              MOV      r0,r9
00015c  f7fffffe          BL       NotifySelector
;;;305                        break;                                                              
000160  e005              B        |L16.366|
;;;306                    case kCtrlRTC:                                                      //倒计时控件
;;;307                        NotifyTimer(screen_id,control_id);
000162  4651              MOV      r1,r10
000164  4648              MOV      r0,r9
000166  f7fffffe          BL       NotifyTimer
;;;308                        break;
00016a  e000              B        |L16.366|
                  |L16.364|
;;;309                    default:
;;;310                        break;
00016c  bf00              NOP      
                  |L16.366|
00016e  bf00              NOP                            ;287
                  |L16.368|
;;;311                    }
;;;312                } 
;;;313                break;  
000170  e003              B        |L16.378|
                  |L16.370|
;;;314            } 
;;;315        case NOTIFY_HandShake:                                                          //握手通知                                                     
;;;316            NOTIFYHandShake();
000172  f7fffffe          BL       NOTIFYHandShake
;;;317            break;
000176  e000              B        |L16.378|
                  |L16.376|
;;;318        default:
;;;319            break;
000178  bf00              NOP      
                  |L16.378|
00017a  bf00              NOP                            ;259
;;;320        }
;;;321    }
00017c  e8bd8ffe          POP      {r1-r11,pc}
;;;322    
                          ENDP

                  |L16.384|
                          DCD      cmd_buffer

                          AREA ||i.ULCD_Init||, CODE, READONLY, ALIGN=2

                  ULCD_Init PROC
;;;129    
;;;130    void ULCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;131    {
;;;132        ULCD_InitIO();
000002  f7fffffe          BL       ULCD_InitIO
;;;133       // UartInit(115200);//UartInit(19200);                                                               
;;;134    
;;;135        //清空串口接收缓冲区                                                          
;;;136        //queue_reset();                                                                  
;;;137        lcd_prosser = 0; 
000006  2000              MOVS     r0,#0
000008  4905              LDR      r1,|L17.32|
00000a  8008              STRH     r0,[r1,#0]
;;;138        timer_beep = 0;
00000c  4905              LDR      r1,|L17.36|
00000e  6008              STR      r0,[r1,#0]  ; timer_beep
;;;139        lg_lcd_init = 0;
000010  4905              LDR      r1,|L17.40|
000012  7008              STRB     r0,[r1,#0]
;;;140        //延时等待串口屏初始化完毕,必须等待300ms                                      
;;;141        vTaskDelay(pdMS_TO_TICKS(300));//bsp_DelayMS(300);
000014  f44f7096          MOV      r0,#0x12c
000018  f7fffffe          BL       vTaskDelay
;;;142    	
;;;143    }
00001c  bd10              POP      {r4,pc}
;;;144    
                          ENDP

00001e  0000              DCW      0x0000
                  |L17.32|
                          DCD      lcd_prosser
                  |L17.36|
                          DCD      timer_beep
                  |L17.40|
                          DCD      lg_lcd_init

                          AREA ||i.ULCD_InitIO||, CODE, READONLY, ALIGN=2

                  ULCD_InitIO PROC
;;;53     
;;;54     void ULCD_InitIO(void)
000000  b508              PUSH     {r3,lr}
;;;55     {
;;;56         GPIO_InitTypeDef GPIO_InitStructure;
;;;57     
;;;58     	/* 打开GPIO时钟 */
;;;59     	RCC_APB2PeriphClockCmd(RCC_ULCD, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;60     	
;;;61     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;62     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //推挽输出模式
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;63     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_ULCD_POWEN;
000016  2001              MOVS     r0,#1
000018  f8ad0000          STRH     r0,[sp,#0]
;;;64     	GPIO_Init(GPIO_PORT_ULCD, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4809              LDR      r0,|L18.68|
000020  f7fffffe          BL       GPIO_Init
;;;65         
;;;66         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
000024  2048              MOVS     r0,#0x48
000026  f88d0003          STRB     r0,[sp,#3]
;;;67     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_ULCD_BUSY;
00002a  2002              MOVS     r0,#2
00002c  f8ad0000          STRH     r0,[sp,#0]
;;;68     	GPIO_Init(GPIO_PORT_ULCD, &GPIO_InitStructure);
000030  4669              MOV      r1,sp
000032  4804              LDR      r0,|L18.68|
000034  f7fffffe          BL       GPIO_Init
;;;69         
;;;70         ULCD_POW_ON;
000038  2101              MOVS     r1,#1
00003a  4802              LDR      r0,|L18.68|
00003c  f7fffffe          BL       GPIO_SetBits
;;;71     }
000040  bd08              POP      {r3,pc}
;;;72     
                          ENDP

000042  0000              DCW      0x0000
                  |L18.68|
                          DCD      0x40010800

                          AREA ||i.ULCD_Task||, CODE, READONLY, ALIGN=2

                  ULCD_Task PROC
;;;144    
;;;145    void ULCD_Task( void )                                                                          
000000  b538              PUSH     {r3-r5,lr}
;;;146    {       
;;;147    //    uint8_t i; 
;;;148    //    uint16_t n = 0;   
;;;149    //    static int32 test_value = 0;                                                     //测试值
;;;150    //    uint32 timer_tick_last_update = 0;                                               //上一次更新的时间
;;;151        qsize  size = 0;                                                                
000002  2400              MOVS     r4,#0
;;;152    
;;;153        //while(1)                                                                        
;;;154        {                                                                               
;;;155            size = queue_find_cmd(cmd_buffer,CMD_MAX_SIZE);                               //从缓冲区中获取一条指令         
000004  2140              MOVS     r1,#0x40
000006  4836              LDR      r0,|L19.224|
000008  f7fffffe          BL       queue_find_cmd
00000c  4604              MOV      r4,r0
;;;156    
;;;157            if(size>0)                                                              
00000e  2c00              CMP      r4,#0
000010  dd03              BLE      |L19.26|
;;;158            {   
;;;159    //            for( i=0; i<size; i++ )
;;;160    //            {
;;;161    //                printf("%02X ",cmd_buffer[i]);
;;;162    //            }
;;;163                //comSendBuf(COM1, cmd_buffer, size );                                                                       
;;;164                ProcessMessage((PCTRL_MSG)cmd_buffer, size);                             //指令处理  
000012  4621              MOV      r1,r4
000014  4832              LDR      r0,|L19.224|
000016  f7fffffe          BL       ProcessMessage
                  |L19.26|
;;;165            } 
;;;166            //    特别注意
;;;167            //    MCU不要频繁向串口屏发送数据，否则串口屏的内部缓存区会满，从而导致数据丢失(缓冲区大小：标准型8K，基本型4.7K)
;;;168            //    1) 一般情况下，控制MCU向串口屏发送数据的周期大于100ms，就可以避免数据丢失的问题；
;;;169            //    2) 如果仍然有数据丢失的问题，请判断串口屏的BUSY引脚，为高时不能发送数据给串口屏。
;;;170    
;;;171            //    TODO: 添加用户代码
;;;172            //    数据有更新时标志位发生改变，定时100毫秒刷新屏幕
;;;173    //        if(update_en&&timer_tick_count-timer_tick_last_update>=TIME_100MS)
;;;174    //        {
;;;175    //            update_en = 0;
;;;176    //            timer_tick_last_update = timer_tick_count;   
;;;177    //
;;;178    //            UpdateUI();
;;;179    //        }
;;;180    //  
;;;181    
;;;182    /*
;;;183    EE B1 10 00 2B 00 0C 00 00 00 32 FF FC FF FF 
;;;184    EE B1 10 00 2B 00 0C 00 00 00 01 FF FC FF FF 
;;;185    EE B1 10 00 2B 00 10 00 00 00 01 FF FC FF FF 
;;;186    */
;;;187            //这里为了演示方便，每20毫秒自动更新一次
;;;188            //进一次中断10ms，timer_tick_count值+1,100*timer_tick_count = 1s
;;;189            if( !timer_lcd_update )//if(timer_tick_count%2==0)
00001a  4832              LDR      r0,|L19.228|
00001c  6800              LDR      r0,[r0,#0]  ; timer_lcd_update
00001e  bb50              CBNZ     r0,|L19.118|
;;;190            {
;;;191                timer_lcd_update = 100; //1s
000020  2064              MOVS     r0,#0x64
000022  4930              LDR      r1,|L19.228|
000024  6008              STR      r0,[r1,#0]  ; timer_lcd_update
;;;192                
;;;193                
;;;194                //if( Motor.state.bit.move )
;;;195                {
;;;196                    lcd_prosser = 100*Motor.counter_step/Motor.max_step;
000026  4830              LDR      r0,|L19.232|
000028  6840              LDR      r0,[r0,#4]  ; Motor
00002a  2164              MOVS     r1,#0x64
00002c  4348              MULS     r0,r1,r0
00002e  492e              LDR      r1,|L19.232|
000030  6889              LDR      r1,[r1,#8]  ; Motor
000032  fbb0f0f1          UDIV     r0,r0,r1
000036  492d              LDR      r1,|L19.236|
000038  8008              STRH     r0,[r1,#0]
;;;197                    SetProgressValue(0,12,lcd_prosser);
00003a  4608              MOV      r0,r1
00003c  8802              LDRH     r2,[r0,#0]  ; lcd_prosser
00003e  210c              MOVS     r1,#0xc
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       SetProgressValue
;;;198                    SetTextInt32(0, 19, Motor.counter_step, 0, 1);
000046  2001              MOVS     r0,#1
000048  9000              STR      r0,[sp,#0]
00004a  4827              LDR      r0,|L19.232|
00004c  2300              MOVS     r3,#0
00004e  2113              MOVS     r1,#0x13
000050  6842              LDR      r2,[r0,#4]  ; Motor
000052  4618              MOV      r0,r3
000054  f7fffffe          BL       SetTextInt32
;;;199                }
;;;200                //SetBuzzer( 10 ); //蜂鸣器
;;;201                //Tmy.power_percent = 66; //test
;;;202                SetProgressValue(0,15,Tmy.power_percent);
000058  4825              LDR      r0,|L19.240|
00005a  7a02              LDRB     r2,[r0,#8]  ; Tmy
00005c  210f              MOVS     r1,#0xf
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       SetProgressValue
;;;203                SetTextInt32(0, 27, Tmy.pressure, 0, 1); //测试显示压力
000064  2001              MOVS     r0,#1
000066  9000              STR      r0,[sp,#0]
000068  4821              LDR      r0,|L19.240|
00006a  2300              MOVS     r3,#0
00006c  211b              MOVS     r1,#0x1b
00006e  68c2              LDR      r2,[r0,#0xc]  ; Tmy
000070  4618              MOV      r0,r3
000072  f7fffffe          BL       SetTextInt32
                  |L19.118|
;;;204            }
;;;205            
;;;206            if( Motor.state.bit.move )
000076  481c              LDR      r0,|L19.232|
000078  7880              LDRB     r0,[r0,#2]  ; Motor
00007a  f3c000c0          UBFX     r0,r0,#3,#1
00007e  b308              CBZ      r0,|L19.196|
;;;207            {
;;;208                if( !timer_beep )
000080  481c              LDR      r0,|L19.244|
000082  6800              LDR      r0,[r0,#0]  ; timer_beep
000084  b9f0              CBNZ     r0,|L19.196|
;;;209                {
;;;210    //                if( dg_sta == DG_DGJC ) //顶杆检查，无声
;;;211    //                {
;;;212    //                    
;;;213    //                }else
;;;214                    if( dg_sta == DG_UP ) //工作，上升
000086  481c              LDR      r0,|L19.248|
000088  7800              LDRB     r0,[r0,#0]  ; dg_sta
00008a  2806              CMP      r0,#6
00008c  d10b              BNE      |L19.166|
;;;215                    {
;;;216                        timer_beep = BEEP_TIMER[Motor.speed-1];
00008e  4816              LDR      r0,|L19.232|
000090  7800              LDRB     r0,[r0,#0]  ; Motor
000092  1e40              SUBS     r0,r0,#1
000094  4919              LDR      r1,|L19.252|
000096  f8310010          LDRH     r0,[r1,r0,LSL #1]
00009a  4916              LDR      r1,|L19.244|
00009c  6008              STR      r0,[r1,#0]  ; timer_beep
;;;217                        SetBuzzer( 10 ); //蜂鸣器
00009e  200a              MOVS     r0,#0xa
0000a0  f7fffffe          BL       SetBuzzer
0000a4  e01a              B        |L19.220|
                  |L19.166|
;;;218                    }else
;;;219                    if( ( dg_sta == DG_HX_UP ) || ( dg_sta == DG_HX_DOWN ) ) //回吸
0000a6  4814              LDR      r0,|L19.248|
0000a8  7800              LDRB     r0,[r0,#0]  ; dg_sta
0000aa  280a              CMP      r0,#0xa
0000ac  d003              BEQ      |L19.182|
0000ae  4812              LDR      r0,|L19.248|
0000b0  7800              LDRB     r0,[r0,#0]  ; dg_sta
0000b2  280b              CMP      r0,#0xb
0000b4  d107              BNE      |L19.198|
                  |L19.182|
;;;220                    {
;;;221                        timer_beep = BEEP_TIMER[HX];
0000b6  4811              LDR      r0,|L19.252|
0000b8  8980              LDRH     r0,[r0,#0xc]  ; BEEP_TIMER
0000ba  490e              LDR      r1,|L19.244|
0000bc  6008              STR      r0,[r1,#0]  ; timer_beep
;;;222                        SetBuzzer( 10 ); //蜂鸣器
0000be  200a              MOVS     r0,#0xa
0000c0  f7fffffe          BL       SetBuzzer
                  |L19.196|
0000c4  e00a              B        |L19.220|
                  |L19.198|
;;;223                    }else
;;;224                    if( dg_sta == DG_ZDPK_UP ) //自动排空
0000c6  480c              LDR      r0,|L19.248|
0000c8  7800              LDRB     r0,[r0,#0]  ; dg_sta
0000ca  2808              CMP      r0,#8
0000cc  d106              BNE      |L19.220|
;;;225                    {
;;;226                        timer_beep = BEEP_TIMER[ZDPK];
0000ce  480b              LDR      r0,|L19.252|
0000d0  8940              LDRH     r0,[r0,#0xa]  ; BEEP_TIMER
0000d2  4908              LDR      r1,|L19.244|
0000d4  6008              STR      r0,[r1,#0]  ; timer_beep
;;;227                        SetBuzzer( 10 ); //蜂鸣器
0000d6  200a              MOVS     r0,#0xa
0000d8  f7fffffe          BL       SetBuzzer
                  |L19.220|
;;;228                    }
;;;229    //                if( Motor.speed ) //
;;;230    //                {
;;;231    //                    timer_beep = BEEP_TIMER[Motor.speed-1];
;;;232    //                    SetBuzzer( 10 ); //蜂鸣器
;;;233    //                }
;;;234                }
;;;235            }
;;;236        }  
;;;237    }
0000dc  bd38              POP      {r3-r5,pc}
;;;238    
                          ENDP

0000de  0000              DCW      0x0000
                  |L19.224|
                          DCD      cmd_buffer
                  |L19.228|
                          DCD      timer_lcd_update
                  |L19.232|
                          DCD      Motor
                  |L19.236|
                          DCD      lcd_prosser
                  |L19.240|
                          DCD      Tmy
                  |L19.244|
                          DCD      timer_beep
                  |L19.248|
                          DCD      dg_sta
                  |L19.252|
                          DCD      BEEP_TIMER

                          AREA ||i.UpdateUI||, CODE, READONLY, ALIGN=2

                  UpdateUI PROC
;;;460    */ 
;;;461    void UpdateUI()
000000  b510              PUSH     {r4,lr}
;;;462    {
000002  b0c2              SUB      sp,sp,#0x108
;;;463        //文本设置和显示  定时20ms刷新一次
;;;464        if(current_screen_id==4)                                              
000004  48ad              LDR      r0,|L20.700|
000006  8800              LDRH     r0,[r0,#0]  ; current_screen_id
000008  2804              CMP      r0,#4
00000a  d14a              BNE      |L20.162|
;;;465        {
;;;466                   //当前电流、温度从0到1000循环显示，艺术字从0-999循环显示
;;;467            SetTextInt32(4,6,test_value%1000,0,1);                                      //当前电流
00000c  48ac              LDR      r0,|L20.704|
00000e  6800              LDR      r0,[r0,#0]  ; test_value
000010  f44f717a          MOV      r1,#0x3e8
000014  fb90f2f1          SDIV     r2,r0,r1
000018  fb010412          MLS      r4,r1,r2,r0
00001c  2001              MOVS     r0,#1
00001e  2300              MOVS     r3,#0
000020  4622              MOV      r2,r4
000022  2106              MOVS     r1,#6
000024  9000              STR      r0,[sp,#0]
000026  2004              MOVS     r0,#4
000028  f7fffffe          BL       SetTextInt32
;;;468            SetTextInt32(4,7,test_value%1000,0,1);                                      //艺术字
00002c  48a4              LDR      r0,|L20.704|
00002e  6800              LDR      r0,[r0,#0]  ; test_value
000030  f44f717a          MOV      r1,#0x3e8
000034  fb90f2f1          SDIV     r2,r0,r1
000038  fb010412          MLS      r4,r1,r2,r0
00003c  2001              MOVS     r0,#1
00003e  2300              MOVS     r3,#0
000040  4622              MOV      r2,r4
000042  2107              MOVS     r1,#7
000044  9000              STR      r0,[sp,#0]
000046  2004              MOVS     r0,#4
000048  f7fffffe          BL       SetTextInt32
;;;469            SetTextValue(4,1,"机房10");                                                 //设置文本值
00004c  a29d              ADR      r2,|L20.708|
00004e  2101              MOVS     r1,#1
000050  2004              MOVS     r0,#4
000052  f7fffffe          BL       SetTextValue
;;;470            test_value++;                                                                
000056  489a              LDR      r0,|L20.704|
000058  6800              LDR      r0,[r0,#0]  ; test_value
00005a  1c40              ADDS     r0,r0,#1
00005c  4998              LDR      r1,|L20.704|
00005e  6008              STR      r0,[r1,#0]  ; test_value
;;;471            if(test_value >= 1000)                                                       
000060  4608              MOV      r0,r1
000062  6800              LDR      r0,[r0,#0]  ; test_value
000064  f5b07f7a          CMP      r0,#0x3e8
000068  db01              BLT      |L20.110|
;;;472            {                                                                            
;;;473                test_value = 0;                                                            
00006a  2000              MOVS     r0,#0
00006c  6008              STR      r0,[r1,#0]  ; test_value
                  |L20.110|
;;;474            }                                                                            
;;;475            if(test_value>0&&test_value<500)                                             //大于0小于500文本显示红色
00006e  4894              LDR      r0,|L20.704|
000070  6800              LDR      r0,[r0,#0]  ; test_value
000072  2800              CMP      r0,#0
000074  dd0b              BLE      |L20.142|
000076  4892              LDR      r0,|L20.704|
000078  6800              LDR      r0,[r0,#0]  ; test_value
00007a  f5b07ffa          CMP      r0,#0x1f4
00007e  da06              BGE      |L20.142|
;;;476            {                                                                            
;;;477                SetControlBackColor(4,6,0xF800);                                         //设置文本背景色
000080  f44f4278          MOV      r2,#0xf800
000084  2106              MOVS     r1,#6
000086  2004              MOVS     r0,#4
000088  f7fffffe          BL       SetControlBackColor
00008c  e009              B        |L20.162|
                  |L20.142|
;;;478            }                                                                            
;;;479            else if(test_value>=500)                                                     //大于500文本显蓝色
00008e  488c              LDR      r0,|L20.704|
000090  6800              LDR      r0,[r0,#0]  ; test_value
000092  f5b07ffa          CMP      r0,#0x1f4
000096  db04              BLT      |L20.162|
;;;480            {                                                                            
;;;481                SetControlBackColor(4,6,0x001F);                                         //设置文本背景色
000098  221f              MOVS     r2,#0x1f
00009a  2106              MOVS     r1,#6
00009c  2004              MOVS     r0,#4
00009e  f7fffffe          BL       SetControlBackColor
                  |L20.162|
;;;482            }                                                  
;;;483        }                                                                                
;;;484    
;;;485    //    //仪表控件   定时20ms刷新一次                                                   
;;;486    //    if(current_screen_id == 6)                                                                          
;;;487    //    {                                                                               
;;;488    //        if(meter_flag == 0)                                                          //标志位 0顺时针 ，1逆时针
;;;489    //        {   
;;;490    //            //顺时针旋转                    
;;;491    //            Set_picMeterValue(6,2,test_value);                                       //设置图片指针旋转角度
;;;492    //            test_value +=4;                                                          //指针旋转从0度到260度
;;;493    //            if(test_value >= 260)                                                   
;;;494    //            {                                                                        
;;;495    //                test_value = 260;                                                     
;;;496    //                meter_flag = 1;                                                             
;;;497    //            }                                                                        
;;;498    //        }                                                                          
;;;499    //        else if(meter_flag == 1)                                                               
;;;500    //        {    
;;;501    //            //逆时针旋转              
;;;502    //            Set_picMeterValue(6,2,test_value);                                       //设置图片指针旋转角度
;;;503    //            test_value -=4;                                                          //指针旋转从260度到0度
;;;504    //            if(test_value <= 0)
;;;505    //            {
;;;506    //                test_value = 0;
;;;507    //                meter_flag = 0;    
;;;508    //            }
;;;509    //        }
;;;510    //    }
;;;511        //进入时间画面，后定时500ms读取一次RTC时间，每10s响蜂鸣器一次
;;;512    //    if(current_screen_id == 8 && timer_tick_count %50 ==0)
;;;513    //    {
;;;514    //        ReadRTC();
;;;515    //        if(sec%10==9)
;;;516    //        {
;;;517    //            second_flag=1;
;;;518    //        }
;;;519    //        else if((sec%10==0 && second_flag==1))
;;;520    //        {
;;;521    //            SetBuzzer(1);  
;;;522    //            second_flag=0;
;;;523    //        }
;;;524    
;;;525    //    } 
;;;526    
;;;527        //图标1s轮流显示 
;;;528        if(current_screen_id == 10)
0000a2  4886              LDR      r0,|L20.700|
0000a4  8800              LDRH     r0,[r0,#0]  ; current_screen_id
0000a6  280a              CMP      r0,#0xa
0000a8  d179              BNE      |L20.414|
;;;529        {
;;;530            if(timer_tick_count %100 == 0 && icon_flag == 0)       
0000aa  4888              LDR      r0,|L20.716|
0000ac  6800              LDR      r0,[r0,#0]  ; timer_tick_count
0000ae  2164              MOVS     r1,#0x64
0000b0  fbb0f2f1          UDIV     r2,r0,r1
0000b4  fb010012          MLS      r0,r1,r2,r0
0000b8  b9a8              CBNZ     r0,|L20.230|
0000ba  4885              LDR      r0,|L20.720|
0000bc  6800              LDR      r0,[r0,#0]  ; icon_flag
0000be  b990              CBNZ     r0,|L20.230|
;;;531             {        
;;;532                 SetButtonValue(9,5,0); 
0000c0  2200              MOVS     r2,#0
0000c2  2105              MOVS     r1,#5
0000c4  2009              MOVS     r0,#9
0000c6  f7fffffe          BL       SetButtonValue
;;;533                 SetButtonValue(9,2,1);                                                      //工作中图标
0000ca  2201              MOVS     r2,#1
0000cc  2102              MOVS     r1,#2
0000ce  2009              MOVS     r0,#9
0000d0  f7fffffe          BL       SetButtonValue
;;;534                 AnimationPlayFrame(9,1,0);
0000d4  2200              MOVS     r2,#0
0000d6  2101              MOVS     r1,#1
0000d8  2009              MOVS     r0,#9
0000da  f7fffffe          BL       AnimationPlayFrame
;;;535                 icon_flag = 1 ;            
0000de  2001              MOVS     r0,#1
0000e0  497b              LDR      r1,|L20.720|
0000e2  6008              STR      r0,[r1,#0]  ; icon_flag
0000e4  e05b              B        |L20.414|
                  |L20.230|
;;;536             }
;;;537             else if(timer_tick_count %100 == 0 && icon_flag == 1)
0000e6  4879              LDR      r0,|L20.716|
0000e8  6800              LDR      r0,[r0,#0]  ; timer_tick_count
0000ea  2164              MOVS     r1,#0x64
0000ec  fbb0f2f1          UDIV     r2,r0,r1
0000f0  fb010012          MLS      r0,r1,r2,r0
0000f4  b9b0              CBNZ     r0,|L20.292|
0000f6  4876              LDR      r0,|L20.720|
0000f8  6800              LDR      r0,[r0,#0]  ; icon_flag
0000fa  2801              CMP      r0,#1
0000fc  d112              BNE      |L20.292|
;;;538             {
;;;539                 SetButtonValue(9,2,0);                                                      
0000fe  2200              MOVS     r2,#0
000100  2102              MOVS     r1,#2
000102  2009              MOVS     r0,#9
000104  f7fffffe          BL       SetButtonValue
;;;540                 SetButtonValue(9,3,1);                                                      //暂停中图标
000108  2201              MOVS     r2,#1
00010a  2103              MOVS     r1,#3
00010c  2009              MOVS     r0,#9
00010e  f7fffffe          BL       SetButtonValue
;;;541                 AnimationPlayFrame(9,1,1);  
000112  2201              MOVS     r2,#1
000114  4611              MOV      r1,r2
000116  2009              MOVS     r0,#9
000118  f7fffffe          BL       AnimationPlayFrame
;;;542                 icon_flag = 2;             
00011c  2002              MOVS     r0,#2
00011e  496c              LDR      r1,|L20.720|
000120  6008              STR      r0,[r1,#0]  ; icon_flag
000122  e03c              B        |L20.414|
                  |L20.292|
;;;543             }
;;;544             else if(timer_tick_count %100 == 0 && icon_flag == 2)
000124  4869              LDR      r0,|L20.716|
000126  6800              LDR      r0,[r0,#0]  ; timer_tick_count
000128  2164              MOVS     r1,#0x64
00012a  fbb0f2f1          UDIV     r2,r0,r1
00012e  fb010012          MLS      r0,r1,r2,r0
000132  b9b0              CBNZ     r0,|L20.354|
000134  4866              LDR      r0,|L20.720|
000136  6800              LDR      r0,[r0,#0]  ; icon_flag
000138  2802              CMP      r0,#2
00013a  d112              BNE      |L20.354|
;;;545             {
;;;546                 SetButtonValue(9,3,0);                                                      
00013c  2200              MOVS     r2,#0
00013e  2103              MOVS     r1,#3
000140  2009              MOVS     r0,#9
000142  f7fffffe          BL       SetButtonValue
;;;547                 SetButtonValue(9,4,1);                                                      //停止图标
000146  2201              MOVS     r2,#1
000148  2104              MOVS     r1,#4
00014a  2009              MOVS     r0,#9
00014c  f7fffffe          BL       SetButtonValue
;;;548                 AnimationPlayFrame(9,1,2);  
000150  2202              MOVS     r2,#2
000152  2101              MOVS     r1,#1
000154  2009              MOVS     r0,#9
000156  f7fffffe          BL       AnimationPlayFrame
;;;549                 icon_flag = 3 ;            
00015a  2003              MOVS     r0,#3
00015c  495c              LDR      r1,|L20.720|
00015e  6008              STR      r0,[r1,#0]  ; icon_flag
000160  e01d              B        |L20.414|
                  |L20.354|
;;;550             }
;;;551             else if(timer_tick_count %100 == 0 && icon_flag == 3)
000162  485a              LDR      r0,|L20.716|
000164  6800              LDR      r0,[r0,#0]  ; timer_tick_count
000166  2164              MOVS     r1,#0x64
000168  fbb0f2f1          UDIV     r2,r0,r1
00016c  fb010012          MLS      r0,r1,r2,r0
000170  b9a8              CBNZ     r0,|L20.414|
000172  4857              LDR      r0,|L20.720|
000174  6800              LDR      r0,[r0,#0]  ; icon_flag
000176  2803              CMP      r0,#3
000178  d111              BNE      |L20.414|
;;;552             {        
;;;553                 SetButtonValue(9,4,0);                                                                                                                  
00017a  2200              MOVS     r2,#0
00017c  2104              MOVS     r1,#4
00017e  2009              MOVS     r0,#9
000180  f7fffffe          BL       SetButtonValue
;;;554                 SetButtonValue(9,5,1);                                                      //隐藏图标
000184  2201              MOVS     r2,#1
000186  2105              MOVS     r1,#5
000188  2009              MOVS     r0,#9
00018a  f7fffffe          BL       SetButtonValue
;;;555                 AnimationPlayFrame(9,1,3);  
00018e  2203              MOVS     r2,#3
000190  2101              MOVS     r1,#1
000192  2009              MOVS     r0,#9
000194  f7fffffe          BL       AnimationPlayFrame
;;;556                 icon_flag  = 0 ;              
000198  2000              MOVS     r0,#0
00019a  494d              LDR      r1,|L20.720|
00019c  6008              STR      r0,[r1,#0]  ; icon_flag
                  |L20.414|
;;;557             }
;;;558        }
;;;559    
;;;560    
;;;561        //实时曲线，正弦波数组。  定时20ms更新数据
;;;562        if(current_screen_id == 11)      
00019e  4847              LDR      r0,|L20.700|
0001a0  8800              LDRH     r0,[r0,#0]  ; current_screen_id
0001a2  280b              CMP      r0,#0xb
0001a4  d13f              BNE      |L20.550|
;;;563        { 
;;;564            if(curves_type == 0)
0001a6  484b              LDR      r0,|L20.724|
0001a8  6800              LDR      r0,[r0,#0]  ; curves_type
0001aa  b9e0              CBNZ     r0,|L20.486|
;;;565            {
;;;566                //正弦数组
;;;567                uint8 sin[256] = {1,1,1,1,1,2,3,4,6,8,10,13,15,
0001ac  f44f7280          MOV      r2,#0x100
0001b0  4949              LDR      r1,|L20.728|
0001b2  a802              ADD      r0,sp,#8
0001b4  f7fffffe          BL       __aeabi_memcpy4
;;;568                    19,22,25,29,33,38,42,47,52,57,62,68,73,79,85,91,97,103,109,115,121,127,134,
;;;569                    140,146,152,158,164,170,176,182,187,193,198,203,208,213,217,222,226,230,233,
;;;570                    236,240,242,245,247,249,251,252,253,254,254,254,254,254,253,252,251,249,247,
;;;571                    245,242,240,236,233,230,226,222,217,213,208,203,198,193,187,182,176,170,164,
;;;572                    158,152,146,140,134,128,121,115,109,103,97,91,85,79,73,68,62,57,52,47,42,38,
;;;573                    33,29,25,22,19,15,13,10,8,6,4,3,2,1,1,1,1,1,2,3,4,6,8,10,13,15,
;;;574                    19,22,25,29,33,38,42,47,52,57,62,68,73,79,85,91,97,103,109,115,121,127,134,
;;;575                    140,146,152,158,164,170,176,182,187,193,198,203,208,213,217,222,226,230,233,
;;;576                    236,240,242,245,247,249,251,252,253,254,254,254,254,254,253,252,251,249,247,
;;;577                    245,242,240,236,233,230,226,222,217,213,208,203,198,193,187,182,176,170,164,
;;;578                    158,152,146,140,134,128,121,115,109,103,97,91,85,79,73,68,62,57,52,47,42,38,
;;;579                    33,29,25,22,19,15,13,10,8,6,4,3,2};
;;;580    
;;;581                GraphChannelDataAdd(11,1,0,&sin[num],2);                                    //添加数据到曲线  一次两个数据
0001b8  2002              MOVS     r0,#2
0001ba  9000              STR      r0,[sp,#0]
0001bc  a802              ADD      r0,sp,#8
0001be  4947              LDR      r1,|L20.732|
0001c0  6809              LDR      r1,[r1,#0]  ; num
0001c2  1843              ADDS     r3,r0,r1
0001c4  2200              MOVS     r2,#0
0001c6  2101              MOVS     r1,#1
0001c8  200b              MOVS     r0,#0xb
0001ca  f7fffffe          BL       GraphChannelDataAdd
;;;582    
;;;583                num += 2;                                                                        
0001ce  4843              LDR      r0,|L20.732|
0001d0  6800              LDR      r0,[r0,#0]  ; num
0001d2  1c80              ADDS     r0,r0,#2
0001d4  4941              LDR      r1,|L20.732|
0001d6  6008              STR      r0,[r1,#0]  ; num
;;;584                if(num >= 255)                                                                
0001d8  4608              MOV      r0,r1
0001da  6800              LDR      r0,[r0,#0]  ; num
0001dc  28ff              CMP      r0,#0xff
0001de  db01              BLT      |L20.484|
;;;585                {                                                                             
;;;586                    num =0;                                                                  
0001e0  2000              MOVS     r0,#0
0001e2  6008              STR      r0,[r1,#0]  ; num
                  |L20.484|
;;;587                }
;;;588            } 
0001e4  e01f              B        |L20.550|
                  |L20.486|
;;;589            else if(curves_type == 1)
0001e6  483b              LDR      r0,|L20.724|
0001e8  6800              LDR      r0,[r0,#0]  ; curves_type
0001ea  2801              CMP      r0,#1
0001ec  d11b              BNE      |L20.550|
;;;590            {
;;;591                //锯齿波数组
;;;592                uint8 sawtooth[180] = {0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252,
0001ee  22b4              MOVS     r2,#0xb4
0001f0  493b              LDR      r1,|L20.736|
0001f2  a815              ADD      r0,sp,#0x54
0001f4  f7fffffe          BL       __aeabi_memcpy4
;;;593                    0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252,
;;;594                    0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252,
;;;595                    0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252,
;;;596                    0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252,
;;;597                    0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252};
;;;598    
;;;599    
;;;600                GraphChannelDataAdd(11,1,0,&sawtooth[num],2);                              //添加数据到曲线  一次两个数据
0001f8  2002              MOVS     r0,#2
0001fa  9000              STR      r0,[sp,#0]
0001fc  a815              ADD      r0,sp,#0x54
0001fe  4937              LDR      r1,|L20.732|
000200  6809              LDR      r1,[r1,#0]  ; num
000202  1843              ADDS     r3,r0,r1
000204  2200              MOVS     r2,#0
000206  2101              MOVS     r1,#1
000208  200b              MOVS     r0,#0xb
00020a  f7fffffe          BL       GraphChannelDataAdd
;;;601                num +=2 ;                                                                        
00020e  4833              LDR      r0,|L20.732|
000210  6800              LDR      r0,[r0,#0]  ; num
000212  1c80              ADDS     r0,r0,#2
000214  4931              LDR      r1,|L20.732|
000216  6008              STR      r0,[r1,#0]  ; num
;;;602                if(num >= 180)                                                                
000218  4608              MOV      r0,r1
00021a  6800              LDR      r0,[r0,#0]  ; num
00021c  28b4              CMP      r0,#0xb4
00021e  db01              BLT      |L20.548|
;;;603                {                                                                             
;;;604                    num =0;                                                                  
000220  2000              MOVS     r0,#0
000222  6008              STR      r0,[r1,#0]  ; num
                  |L20.548|
;;;605                }
;;;606            }          
000224  bf00              NOP      
                  |L20.550|
;;;607        }                                                                              
;;;608    
;;;609        //历时曲线，正弦波数组                                                         
;;;610        if(current_screen_id == 16 && timer_tick_count %100 == 0)                           //历史曲线控件采样周期1s一个点。//一次添加五个数据                                                    
000226  4825              LDR      r0,|L20.700|
000228  8800              LDRH     r0,[r0,#0]  ; current_screen_id
00022a  2810              CMP      r0,#0x10
00022c  d144              BNE      |L20.696|
00022e  4827              LDR      r0,|L20.716|
000230  6800              LDR      r0,[r0,#0]  ; timer_tick_count
000232  2164              MOVS     r1,#0x64
000234  fbb0f2f1          UDIV     r2,r0,r1
000238  fb010012          MLS      r0,r1,r2,r0
00023c  bbe0              CBNZ     r0,|L20.696|
;;;611        {   
;;;612            if(curves_type == 0)
00023e  4825              LDR      r0,|L20.724|
000240  6800              LDR      r0,[r0,#0]  ; curves_type
000242  b9d0              CBNZ     r0,|L20.634|
;;;613            {        
;;;614                //正弦数组
;;;615                uint8 sin[256] = {1,1,1,1,1,2,3,4,6,8,10,13,15,
000244  f44f7280          MOV      r2,#0x100
000248  4923              LDR      r1,|L20.728|
00024a  a802              ADD      r0,sp,#8
00024c  f7fffffe          BL       __aeabi_memcpy4
;;;616                    19,22,25,29,33,38,42,47,52,57,62,68,73,79,85,91,97,103,109,115,121,127,134,
;;;617                    140,146,152,158,164,170,176,182,187,193,198,203,208,213,217,222,226,230,233,
;;;618                    236,240,242,245,247,249,251,252,253,254,254,254,254,254,253,252,251,249,247,
;;;619                    245,242,240,236,233,230,226,222,217,213,208,203,198,193,187,182,176,170,164,
;;;620                    158,152,146,140,134,128,121,115,109,103,97,91,85,79,73,68,62,57,52,47,42,38,
;;;621                    33,29,25,22,19,15,13,10,8,6,4,3,2,1,1,1,1,1,2,3,4,6,8,10,13,15,
;;;622                    19,22,25,29,33,38,42,47,52,57,62,68,73,79,85,91,97,103,109,115,121,127,134,
;;;623                    140,146,152,158,164,170,176,182,187,193,198,203,208,213,217,222,226,230,233,
;;;624                    236,240,242,245,247,249,251,252,253,254,254,254,254,254,253,252,251,249,247,
;;;625                    245,242,240,236,233,230,226,222,217,213,208,203,198,193,187,182,176,170,164,
;;;626                    158,152,146,140,134,128,121,115,109,103,97,91,85,79,73,68,62,57,52,47,42,38,
;;;627                    33,29,25,22,19,15,13,10,8,6,4,3,2}; 
;;;628    
;;;629                HistoryGraph_SetValueInt8(16,1,&sin[num],1);                               //添加历史曲线数据         
000250  a802              ADD      r0,sp,#8
000252  4922              LDR      r1,|L20.732|
000254  6809              LDR      r1,[r1,#0]  ; num
000256  1842              ADDS     r2,r0,r1
000258  2301              MOVS     r3,#1
00025a  4619              MOV      r1,r3
00025c  2010              MOVS     r0,#0x10
00025e  f7fffffe          BL       HistoryGraph_SetValueInt8
;;;630                num++;
000262  481e              LDR      r0,|L20.732|
000264  6800              LDR      r0,[r0,#0]  ; num
000266  1c40              ADDS     r0,r0,#1
000268  491c              LDR      r1,|L20.732|
00026a  6008              STR      r0,[r1,#0]  ; num
;;;631                if(num >= 255)
00026c  4608              MOV      r0,r1
00026e  6800              LDR      r0,[r0,#0]  ; num
000270  28ff              CMP      r0,#0xff
000272  db01              BLT      |L20.632|
;;;632                {
;;;633                    num =0;
000274  2000              MOVS     r0,#0
000276  6008              STR      r0,[r1,#0]  ; num
                  |L20.632|
;;;634                }
;;;635            } 
000278  e01e              B        |L20.696|
                  |L20.634|
;;;636            else if(curves_type == 1)
00027a  4816              LDR      r0,|L20.724|
00027c  6800              LDR      r0,[r0,#0]  ; curves_type
00027e  2801              CMP      r0,#1
000280  d11a              BNE      |L20.696|
;;;637            {          
;;;638                //锯齿波数组
;;;639                uint8 sawtooth[180] = {0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252,
000282  22b4              MOVS     r2,#0xb4
000284  4916              LDR      r1,|L20.736|
000286  31b4              ADDS     r1,r1,#0xb4
000288  a815              ADD      r0,sp,#0x54
00028a  f7fffffe          BL       __aeabi_memcpy4
;;;640                    0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252,
;;;641                    0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252,
;;;642                    0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252,
;;;643                    0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252,
;;;644                    0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225,234,243,252};
;;;645    
;;;646                HistoryGraph_SetValueInt8(16,1,&sawtooth[num],1);                          //添加历史曲线数据        
00028e  a815              ADD      r0,sp,#0x54
000290  4912              LDR      r1,|L20.732|
000292  6809              LDR      r1,[r1,#0]  ; num
000294  1842              ADDS     r2,r0,r1
000296  2301              MOVS     r3,#1
000298  4619              MOV      r1,r3
00029a  2010              MOVS     r0,#0x10
00029c  f7fffffe          BL       HistoryGraph_SetValueInt8
;;;647                num++;
0002a0  480e              LDR      r0,|L20.732|
0002a2  6800              LDR      r0,[r0,#0]  ; num
0002a4  1c40              ADDS     r0,r0,#1
0002a6  490d              LDR      r1,|L20.732|
0002a8  6008              STR      r0,[r1,#0]  ; num
;;;648                if(num >= 90)
0002aa  4608              MOV      r0,r1
0002ac  6800              LDR      r0,[r0,#0]  ; num
0002ae  285a              CMP      r0,#0x5a
0002b0  db01              BLT      |L20.694|
;;;649                {
;;;650                    num =0;
0002b2  2000              MOVS     r0,#0
0002b4  6008              STR      r0,[r1,#0]  ; num
                  |L20.694|
;;;651                }
;;;652            } 
0002b6  bf00              NOP      
                  |L20.696|
;;;653        }
;;;654    
;;;655    }
0002b8  b042              ADD      sp,sp,#0x108
0002ba  bd10              POP      {r4,pc}
;;;656    
                          ENDP

                  |L20.700|
                          DCD      current_screen_id
                  |L20.704|
                          DCD      test_value
                  |L20.708|
0002c4  bbfab7bf          DCB      187,250,183,191,"10",0
0002c8  313000  
0002cb  00                DCB      0
                  |L20.716|
                          DCD      timer_tick_count
                  |L20.720|
                          DCD      icon_flag
                  |L20.724|
                          DCD      curves_type
                  |L20.728|
                          DCD      ||.conststring||
                  |L20.732|
                          DCD      num
                  |L20.736|
                          DCD      ||.constdata||+0x14

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  cmd_buffer
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  94613a2f          DCB      0x94,0x61,0x3a,0x2f
000004  736f756e          DCB      0x73,0x6f,0x75,0x6e
000008  64732f30          DCB      0x64,0x73,0x2f,0x30
00000c  312e6d70          DCB      0x31,0x2e,0x6d,0x70
000010  33000000          DCB      0x33,0x00,0x00,0x00
000014  0009121b          DCB      0x00,0x09,0x12,0x1b
000018  242d363f          DCB      0x24,0x2d,0x36,0x3f
00001c  48515a63          DCB      0x48,0x51,0x5a,0x63
000020  6c757e87          DCB      0x6c,0x75,0x7e,0x87
000024  9099a2ab          DCB      0x90,0x99,0xa2,0xab
000028  b4bdc6cf          DCB      0xb4,0xbd,0xc6,0xcf
00002c  d8e1eaf3          DCB      0xd8,0xe1,0xea,0xf3
000030  fc000912          DCB      0xfc,0x00,0x09,0x12
000034  1b242d36          DCB      0x1b,0x24,0x2d,0x36
000038  3f48515a          DCB      0x3f,0x48,0x51,0x5a
00003c  636c757e          DCB      0x63,0x6c,0x75,0x7e
000040  879099a2          DCB      0x87,0x90,0x99,0xa2
000044  abb4bdc6          DCB      0xab,0xb4,0xbd,0xc6
000048  cfd8e1ea          DCB      0xcf,0xd8,0xe1,0xea
00004c  f3fc0009          DCB      0xf3,0xfc,0x00,0x09
000050  121b242d          DCB      0x12,0x1b,0x24,0x2d
000054  363f4851          DCB      0x36,0x3f,0x48,0x51
000058  5a636c75          DCB      0x5a,0x63,0x6c,0x75
00005c  7e879099          DCB      0x7e,0x87,0x90,0x99
000060  a2abb4bd          DCB      0xa2,0xab,0xb4,0xbd
000064  c6cfd8e1          DCB      0xc6,0xcf,0xd8,0xe1
000068  eaf3fc00          DCB      0xea,0xf3,0xfc,0x00
00006c  09121b24          DCB      0x09,0x12,0x1b,0x24
000070  2d363f48          DCB      0x2d,0x36,0x3f,0x48
000074  515a636c          DCB      0x51,0x5a,0x63,0x6c
000078  757e8790          DCB      0x75,0x7e,0x87,0x90
00007c  99a2abb4          DCB      0x99,0xa2,0xab,0xb4
000080  bdc6cfd8          DCB      0xbd,0xc6,0xcf,0xd8
000084  e1eaf3fc          DCB      0xe1,0xea,0xf3,0xfc
000088  0009121b          DCB      0x00,0x09,0x12,0x1b
00008c  242d363f          DCB      0x24,0x2d,0x36,0x3f
000090  48515a63          DCB      0x48,0x51,0x5a,0x63
000094  6c757e87          DCB      0x6c,0x75,0x7e,0x87
000098  9099a2ab          DCB      0x90,0x99,0xa2,0xab
00009c  b4bdc6cf          DCB      0xb4,0xbd,0xc6,0xcf
0000a0  d8e1eaf3          DCB      0xd8,0xe1,0xea,0xf3
0000a4  fc000912          DCB      0xfc,0x00,0x09,0x12
0000a8  1b242d36          DCB      0x1b,0x24,0x2d,0x36
0000ac  3f48515a          DCB      0x3f,0x48,0x51,0x5a
0000b0  636c757e          DCB      0x63,0x6c,0x75,0x7e
0000b4  879099a2          DCB      0x87,0x90,0x99,0xa2
0000b8  abb4bdc6          DCB      0xab,0xb4,0xbd,0xc6
0000bc  cfd8e1ea          DCB      0xcf,0xd8,0xe1,0xea
0000c0  f3fc0000          DCB      0xf3,0xfc,0x00,0x00
                          DCD      0x00000000
0000c8  0009121b          DCB      0x00,0x09,0x12,0x1b
0000cc  242d363f          DCB      0x24,0x2d,0x36,0x3f
0000d0  48515a63          DCB      0x48,0x51,0x5a,0x63
0000d4  6c757e87          DCB      0x6c,0x75,0x7e,0x87
0000d8  9099a2ab          DCB      0x90,0x99,0xa2,0xab
0000dc  b4bdc6cf          DCB      0xb4,0xbd,0xc6,0xcf
0000e0  d8e1eaf3          DCB      0xd8,0xe1,0xea,0xf3
0000e4  fc000912          DCB      0xfc,0x00,0x09,0x12
0000e8  1b242d36          DCB      0x1b,0x24,0x2d,0x36
0000ec  3f48515a          DCB      0x3f,0x48,0x51,0x5a
0000f0  636c757e          DCB      0x63,0x6c,0x75,0x7e
0000f4  879099a2          DCB      0x87,0x90,0x99,0xa2
0000f8  abb4bdc6          DCB      0xab,0xb4,0xbd,0xc6
0000fc  cfd8e1ea          DCB      0xcf,0xd8,0xe1,0xea
000100  f3fc0009          DCB      0xf3,0xfc,0x00,0x09
000104  121b242d          DCB      0x12,0x1b,0x24,0x2d
000108  363f4851          DCB      0x36,0x3f,0x48,0x51
00010c  5a636c75          DCB      0x5a,0x63,0x6c,0x75
000110  7e879099          DCB      0x7e,0x87,0x90,0x99
000114  a2abb4bd          DCB      0xa2,0xab,0xb4,0xbd
000118  c6cfd8e1          DCB      0xc6,0xcf,0xd8,0xe1
00011c  eaf3fc00          DCB      0xea,0xf3,0xfc,0x00
000120  09121b24          DCB      0x09,0x12,0x1b,0x24
000124  2d363f48          DCB      0x2d,0x36,0x3f,0x48
000128  515a636c          DCB      0x51,0x5a,0x63,0x6c
00012c  757e8790          DCB      0x75,0x7e,0x87,0x90
000130  99a2abb4          DCB      0x99,0xa2,0xab,0xb4
000134  bdc6cfd8          DCB      0xbd,0xc6,0xcf,0xd8
000138  e1eaf3fc          DCB      0xe1,0xea,0xf3,0xfc
00013c  0009121b          DCB      0x00,0x09,0x12,0x1b
000140  242d363f          DCB      0x24,0x2d,0x36,0x3f
000144  48515a63          DCB      0x48,0x51,0x5a,0x63
000148  6c757e87          DCB      0x6c,0x75,0x7e,0x87
00014c  9099a2ab          DCB      0x90,0x99,0xa2,0xab
000150  b4bdc6cf          DCB      0xb4,0xbd,0xc6,0xcf
000154  d8e1eaf3          DCB      0xd8,0xe1,0xea,0xf3
000158  fc000912          DCB      0xfc,0x00,0x09,0x12
00015c  1b242d36          DCB      0x1b,0x24,0x2d,0x36
000160  3f48515a          DCB      0x3f,0x48,0x51,0x5a
000164  636c757e          DCB      0x63,0x6c,0x75,0x7e
000168  879099a2          DCB      0x87,0x90,0x99,0xa2
00016c  abb4bdc6          DCB      0xab,0xb4,0xbd,0xc6
000170  cfd8e1ea          DCB      0xcf,0xd8,0xe1,0xea
000174  f3fc0000          DCB      0xf3,0xfc,0x00,0x00
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  01010101          DCB      1,1,1,1,1,2,3,4,6,"\b\n\r",15,19,22,25,29,"!&*/49>DIOU[a"
000004  01020304
000008  06080a0d
00000c  0f131619
000010  1d21262a
000014  2f34393e
000018  44494f55
00001c  5b61    
00001e  676d7379          DCB      "gmsy",127,134,140,146,152,158,164,170,176,182,187,193,198
000022  7f868c92
000026  989ea4aa
00002a  b0b6bbc1
00002e  c6      
00002f  cbd0d5d9          DCB      203,208,213,217,222,226,230,233,236,240,242,245,247,249,251
000033  dee2e6e9
000037  ecf0f2f5
00003b  f7f9fb  
00003e  fcfdfefe          DCB      252,253,254,254,254,254,254,253,252,251,249,247,245,242,240
000042  fefefefd
000046  fcfbf9f7
00004a  f5f2f0  
00004d  ece9e6e2          DCB      236,233,230,226,222,217,213,208,203,198,193,187,182,176,170
000051  ded9d5d0
000055  cbc6c1bb
000059  b6b0aa  
00005c  a49e9892          DCB      164,158,152,146,140,134,128,"ysmga[UOID>94/*&!",29,25,22
000060  8c868079
000064  736d6761
000068  5b554f49
00006c  443e3934
000070  2f2a2621
000074  1d1916  
000077  130f0d0a          DCB      19,15,"\r\n\b",6,4,3,2,1,1,1,1,1,2,3,4,6,"\b\n\r",15,19,22
00007b  08060403
00007f  02010101
000083  01010203
000087  0406080a
00008b  0d0f1316
00008f  191d2126          DCB      25,29,"!&*/49>DIOU[agmsy",127,134,140,146,152,158,164,170
000093  2a2f3439
000097  3e44494f
00009b  555b6167
00009f  6d73797f
0000a3  868c9298
0000a7  9ea4aa  
0000aa  b0b6bbc1          DCB      176,182,187,193,198,203,208,213,217,222,226,230,233,236,240
0000ae  c6cbd0d5
0000b2  d9dee2e6
0000b6  e9ecf0  
0000b9  f2f5f7f9          DCB      242,245,247,249,251,252,253,254,254,254,254,254,253,252,251
0000bd  fbfcfdfe
0000c1  fefefefe
0000c5  fdfcfb  
0000c8  f9f7f5f2          DCB      249,247,245,242,240,236,233,230,226,222,217,213,208,203,198
0000cc  f0ece9e6
0000d0  e2ded9d5
0000d4  d0cbc6  
0000d7  c1bbb6b0          DCB      193,187,182,176,170,164,158,152,146,140,134,128,"ysmga[U"
0000db  aaa49e98
0000df  928c8680
0000e3  79736d67
0000e7  615b55  
0000ea  4f49443e          DCB      "OID>94/*&!",29,25,22,19,15,"\r\n\b",6,4,3,2
0000ee  39342f2a
0000f2  26211d19
0000f6  16130f0d
0000fa  0a080604
0000fe  0302    

                          AREA ||.data||, DATA, ALIGN=2

                  lg_lcd_init
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  timer_lcd_update
                          DCD      0x00000000
                  timer_beep
                          DCD      0x00000000
                  lcd_prosser
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  timer_tick_count
                          DCD      0x00000000
                  current_screen_id
000014  0000              DCW      0x0000
000016  0000              DCB      0x00,0x00
                  test_value
                          DCD      0x00000000
                  num
                          DCD      0x00000000
                  curves_type
                          DCD      0x00000000
                  icon_flag
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\bsp_uart_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_uart_lcd_c_bef8e2f6____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_bsp_uart_lcd_c_bef8e2f6____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_uart_lcd_c_bef8e2f6____REVSH|
#line 128
|__asm___14_bsp_uart_lcd_c_bef8e2f6____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
