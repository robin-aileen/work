; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_fifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -I.\RTE\_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_uart_fifo.crf ..\..\User\bsp\src\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;93     */
;;;94     UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;95     {
;;;96     	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;97     	{
;;;98     		#if UART1_FIFO_EN == 1
;;;99     			return &g_tUart1;
000004  4809              LDR      r0,|L1.44|
                  |L1.6|
;;;100    		#else
;;;101    			return 0;
;;;102    		#endif
;;;103    	}
;;;104    	else if (_ucPort == COM2)
;;;105    	{
;;;106    		#if UART2_FIFO_EN == 1
;;;107    			return &g_tUart2;
;;;108    		#else
;;;109    			return 0;
;;;110    		#endif
;;;111    	}
;;;112    	else if (_ucPort == COM3)
;;;113    	{
;;;114    		#if UART3_FIFO_EN == 1
;;;115    			return &g_tUart3;
;;;116    		#else
;;;117    			return 0;
;;;118    		#endif
;;;119    	}
;;;120    	else if (_ucPort == COM4)
;;;121    	{
;;;122    		#if UART4_FIFO_EN == 1
;;;123    			return &g_tUart4;
;;;124    		#else
;;;125    			return 0;
;;;126    		#endif
;;;127    	}
;;;128    	else if (_ucPort == COM5)
;;;129    	{
;;;130    		#if UART5_FIFO_EN == 1
;;;131    			return &g_tUart5;
;;;132    		#else
;;;133    			return 0;
;;;134    		#endif
;;;135    	}
;;;136    	else
;;;137    	{
;;;138    		/* 不做任何处理 */
;;;139    		return 0;
;;;140    	}
;;;141    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;104
00000a  d101              BNE      |L1.16|
00000c  4808              LDR      r0,|L1.48|
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;112
000012  d101              BNE      |L1.24|
000014  2000              MOVS     r0,#0                 ;117
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;120
00001a  d101              BNE      |L1.32|
00001c  2000              MOVS     r0,#0                 ;125
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;128
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;133
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;139
00002a  e7ec              B        |L1.6|
;;;142    
                          ENDP

                  |L1.44|
                          DCD      g_tUart1
                  |L1.48|
                          DCD      g_tUart2

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;783    */
;;;784    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;785    {
;;;786    	NVIC_InitTypeDef NVIC_InitStructure;
;;;787    
;;;788    	/* Configure the NVIC Preemption Priority Bits */
;;;789    	/*	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  --- 在 bsp.c 中 bsp_Init() 中配置中断优先级组 */
;;;790    
;;;791    #if UART1_FIFO_EN == 1
;;;792    	/* 使能串口1中断 */
;;;793    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;794    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000008  2001              MOVS     r0,#1
00000a  f88d0001          STRB     r0,[sp,#1]
;;;795    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00000e  2000              MOVS     r0,#0
000010  f88d0002          STRB     r0,[sp,#2]
;;;796    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;797    	NVIC_Init(&NVIC_InitStructure);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;798    #endif
;;;799    
;;;800    #if UART2_FIFO_EN == 1
;;;801    	/* 使能串口2中断 */
;;;802    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
000020  2026              MOVS     r0,#0x26
000022  f88d0000          STRB     r0,[sp,#0]
;;;803    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000026  2001              MOVS     r0,#1
000028  f88d0001          STRB     r0,[sp,#1]
;;;804    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00002c  2000              MOVS     r0,#0
00002e  f88d0002          STRB     r0,[sp,#2]
;;;805    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000032  2001              MOVS     r0,#1
000034  f88d0003          STRB     r0,[sp,#3]
;;;806    	NVIC_Init(&NVIC_InitStructure);
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       NVIC_Init
;;;807    #endif
;;;808    
;;;809    #if UART3_FIFO_EN == 1
;;;810    	/* 使能串口3中断t */
;;;811    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
;;;812    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;813    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;814    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;815    	NVIC_Init(&NVIC_InitStructure);
;;;816    #endif
;;;817    
;;;818    #if UART4_FIFO_EN == 1
;;;819    	/* 使能串口4中断t */
;;;820    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
;;;821    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;822    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;823    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;824    	NVIC_Init(&NVIC_InitStructure);
;;;825    #endif
;;;826    
;;;827    #if UART5_FIFO_EN == 1
;;;828    	/* 使能串口5中断t */
;;;829    	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;830    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;831    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;832    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;833    	NVIC_Init(&NVIC_InitStructure);
;;;834    #endif
;;;835    
;;;836    #if UART6_FIFO_EN == 1
;;;837    	/* 使能串口6中断t */
;;;838    	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
;;;839    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;840    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;841    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;842    	NVIC_Init(&NVIC_InitStructure);
;;;843    #endif
;;;844    }
00003e  bd08              POP      {r3,pc}
;;;845    
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;543    */
;;;544    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;545    {
000002  b085              SUB      sp,sp,#0x14
;;;546    	GPIO_InitTypeDef GPIO_InitStructure;
;;;547    	USART_InitTypeDef USART_InitStructure;
;;;548    
;;;549    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;550    
;;;551    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;552    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;553    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;554    
;;;555    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;556    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000014  f44f7000          MOV      r0,#0x200
000018  f8ad0010          STRH     r0,[sp,#0x10]
;;;557    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001c  2018              MOVS     r0,#0x18
00001e  f88d0013          STRB     r0,[sp,#0x13]
;;;558    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0012          STRB     r0,[sp,#0x12]
;;;559    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000028  a904              ADD      r1,sp,#0x10
00002a  483a              LDR      r0,|L3.276|
00002c  f7fffffe          BL       GPIO_Init
;;;560    
;;;561    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;562    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;563    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;564    	*/
;;;565    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000030  f44f6080          MOV      r0,#0x400
000034  f8ad0010          STRH     r0,[sp,#0x10]
;;;566    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000038  2004              MOVS     r0,#4
00003a  f88d0013          STRB     r0,[sp,#0x13]
;;;567    	GPIO_Init(GPIOA, &GPIO_InitStructure);
00003e  a904              ADD      r1,sp,#0x10
000040  4834              LDR      r0,|L3.276|
000042  f7fffffe          BL       GPIO_Init
;;;568    	
;;;569    	/* 第4步： 配置串口硬件参数 */
;;;570    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
000046  f44f30e1          MOV      r0,#0x1c200
00004a  9000              STR      r0,[sp,#0]
;;;571    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00004c  2000              MOVS     r0,#0
00004e  f8ad0004          STRH     r0,[sp,#4]
;;;572    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000052  f8ad0006          STRH     r0,[sp,#6]
;;;573    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000056  f8ad0008          STRH     r0,[sp,#8]
;;;574    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00005a  f8ad000c          STRH     r0,[sp,#0xc]
;;;575    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00005e  200c              MOVS     r0,#0xc
000060  f8ad000a          STRH     r0,[sp,#0xa]
;;;576    	USART_Init(USART1, &USART_InitStructure);
000064  4669              MOV      r1,sp
000066  482c              LDR      r0,|L3.280|
000068  f7fffffe          BL       USART_Init
;;;577    
;;;578    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
00006c  2201              MOVS     r2,#1
00006e  f2405125          MOV      r1,#0x525
000072  4829              LDR      r0,|L3.280|
000074  f7fffffe          BL       USART_ITConfig
;;;579    	/*
;;;580    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;581    		注意: 不要在此处打开发送中断
;;;582    		发送中断使能在SendUart()函数打开
;;;583    	*/
;;;584    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000078  2101              MOVS     r1,#1
00007a  4827              LDR      r0,|L3.280|
00007c  f7fffffe          BL       USART_Cmd
;;;585    
;;;586    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;587    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;588    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000080  2140              MOVS     r1,#0x40
000082  4825              LDR      r0,|L3.280|
000084  f7fffffe          BL       USART_ClearFlag
;;;589    #endif
;;;590    
;;;591    #if UART2_FIFO_EN == 1		/* 串口2 TX = PA2， RX = PA3  */
;;;592    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;593    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000088  2101              MOVS     r1,#1
00008a  2005              MOVS     r0,#5
00008c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;594    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000090  2101              MOVS     r1,#1
000092  0448              LSLS     r0,r1,#17
000094  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;595    
;;;596    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;597    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000098  2004              MOVS     r0,#4
00009a  f8ad0010          STRH     r0,[sp,#0x10]
;;;598    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00009e  2018              MOVS     r0,#0x18
0000a0  f88d0013          STRB     r0,[sp,#0x13]
;;;599    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000a4  2003              MOVS     r0,#3
0000a6  f88d0012          STRB     r0,[sp,#0x12]
;;;600    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000aa  a904              ADD      r1,sp,#0x10
0000ac  4819              LDR      r0,|L3.276|
0000ae  f7fffffe          BL       GPIO_Init
;;;601    
;;;602    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;603    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;604    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;605    	*/
;;;606    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
0000b2  2008              MOVS     r0,#8
0000b4  f8ad0010          STRH     r0,[sp,#0x10]
;;;607    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
0000b8  2004              MOVS     r0,#4
0000ba  f88d0013          STRB     r0,[sp,#0x13]
;;;608    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000be  a904              ADD      r1,sp,#0x10
0000c0  4814              LDR      r0,|L3.276|
0000c2  f7fffffe          BL       GPIO_Init
;;;609    	/*  第3步已经做了，因此这步可以不做
;;;610    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;611    	*/
;;;612    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000c6  a904              ADD      r1,sp,#0x10
0000c8  4812              LDR      r0,|L3.276|
0000ca  f7fffffe          BL       GPIO_Init
;;;613    
;;;614    	/* 第4步： 配置串口硬件参数 */
;;;615    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
0000ce  f44f4096          MOV      r0,#0x4b00
0000d2  9000              STR      r0,[sp,#0]
;;;616    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0000d4  2000              MOVS     r0,#0
0000d6  f8ad0004          STRH     r0,[sp,#4]
;;;617    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0000da  f8ad0006          STRH     r0,[sp,#6]
;;;618    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0000de  f8ad0008          STRH     r0,[sp,#8]
;;;619    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000e2  f8ad000c          STRH     r0,[sp,#0xc]
;;;620    	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;		/* 仅选择接收模式 */
0000e6  200c              MOVS     r0,#0xc
0000e8  f8ad000a          STRH     r0,[sp,#0xa]
;;;621    	USART_Init(USART2, &USART_InitStructure);
0000ec  4669              MOV      r1,sp
0000ee  480b              LDR      r0,|L3.284|
0000f0  f7fffffe          BL       USART_Init
;;;622    
;;;623    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0000f4  2201              MOVS     r2,#1
0000f6  f2405125          MOV      r1,#0x525
0000fa  4808              LDR      r0,|L3.284|
0000fc  f7fffffe          BL       USART_ITConfig
;;;624    	/*
;;;625    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;626    		注意: 不要在此处打开发送中断
;;;627    		发送中断使能在SendUart()函数打开
;;;628    	*/
;;;629    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
000100  2101              MOVS     r1,#1
000102  4806              LDR      r0,|L3.284|
000104  f7fffffe          BL       USART_Cmd
;;;630    
;;;631    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;632    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;633    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000108  2140              MOVS     r1,#0x40
00010a  4804              LDR      r0,|L3.284|
00010c  f7fffffe          BL       USART_ClearFlag
;;;634    #endif
;;;635    
;;;636    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;637    
;;;638    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;639    	{
;;;640    		RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
;;;641    
;;;642    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;643    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;644    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
;;;645    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
;;;646    	}
;;;647    
;;;648    	/* 第1步： 开启GPIO和UART时钟 */
;;;649    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
;;;650    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
;;;651    
;;;652    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;653    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;654    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;655    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;656    	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;657    
;;;658    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;659    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;660    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;661    	*/
;;;662    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;663    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;664    	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;665    	/*  第3步已经做了，因此这步可以不做
;;;666    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;667    	*/
;;;668    	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;669    
;;;670    	/* 第4步： 配置串口硬件参数 */
;;;671    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
;;;672    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;673    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;674    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;675    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;676    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;677    	USART_Init(USART3, &USART_InitStructure);
;;;678    
;;;679    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;680    	/*
;;;681    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;682    		注意: 不要在此处打开发送中断
;;;683    		发送中断使能在SendUart()函数打开
;;;684    	*/
;;;685    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
;;;686    
;;;687    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;688    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;689    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;690    #endif
;;;691    
;;;692    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;693    	/* 第1步： 开启GPIO和UART时钟 */
;;;694    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
;;;695    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
;;;696    
;;;697    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;698    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;699    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;700    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;701    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;702    
;;;703    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;704    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;705    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;706    	*/
;;;707    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;708    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;709    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;710    
;;;711    	/* 第4步： 配置串口硬件参数 */
;;;712    	USART_InitStructure.USART_BaudRate = UART4_BAUD;	/* 波特率 */
;;;713    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;714    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;715    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;716    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;717    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;718    	USART_Init(UART4, &USART_InitStructure);
;;;719    
;;;720    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;721    	/*
;;;722    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;723    		注意: 不要在此处打开发送中断
;;;724    		发送中断使能在SendUart()函数打开
;;;725    	*/
;;;726    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
;;;727    
;;;728    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;729    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;730    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;731    #endif
;;;732    
;;;733    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;734    	/* 第1步： 开启GPIO和UART时钟 */
;;;735    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);
;;;736    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;737    
;;;738    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;739    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;740    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;741    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;742    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;743    
;;;744    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;745    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;746    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;747    	*/
;;;748    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;749    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;750    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;751    
;;;752    
;;;753    	/* 第4步： 配置串口硬件参数 */
;;;754    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;755    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;756    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;757    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;758    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;759    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;760    	USART_Init(UART5, &USART_InitStructure);
;;;761    
;;;762    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;763    	/*
;;;764    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;765    		注意: 不要在此处打开发送中断
;;;766    		发送中断使能在SendUart()函数打开
;;;767    	*/
;;;768    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;769    
;;;770    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;771    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;772    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;773    #endif
;;;774    }
000110  b005              ADD      sp,sp,#0x14
000112  bd00              POP      {pc}
;;;775    
                          ENDP

                  |L3.276|
                          DCD      0x40010800
                  |L3.280|
                          DCD      0x40013800
                  |L3.284|
                          DCD      0x40004400

                          AREA ||i.RS485_InitTXE||, CODE, READONLY, ALIGN=2

                  RS485_InitTXE PROC
;;;316    */
;;;317    void RS485_InitTXE(void)
000000  b508              PUSH     {r3,lr}
;;;318    {
;;;319    	GPIO_InitTypeDef GPIO_InitStructure;
;;;320    
;;;321    	RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;322    
;;;323    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;324    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;325    	GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000016  2004              MOVS     r0,#4
000018  f8ad0000          STRH     r0,[sp,#0]
;;;326    	GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L4.40|
000020  f7fffffe          BL       GPIO_Init
;;;327    }
000024  bd08              POP      {r3,pc}
;;;328    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x40010c00

                          AREA ||i.RS485_ReciveNew||, CODE, READONLY, ALIGN=1

                  RS485_ReciveNew PROC
;;;416    //extern void MODBUS_ReciveNew(uint8_t _byte);
;;;417    void RS485_ReciveNew(uint8_t _byte)
000000  4770              BX       lr
;;;418    {
;;;419    //	MODBUS_ReciveNew(_byte);
;;;420    }
;;;421    
                          ENDP


                          AREA ||i.RS485_SendBefor||, CODE, READONLY, ALIGN=2

                  RS485_SendBefor PROC
;;;359    */
;;;360    void RS485_SendBefor(void)
000000  2004              MOVS     r0,#4
;;;361    {
;;;362    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000002  4901              LDR      r1,|L6.8|
000004  6008              STR      r0,[r1,#0]
;;;363    }
000006  4770              BX       lr
;;;364    
                          ENDP

                  |L6.8|
                          DCD      0x40010c10

                          AREA ||i.RS485_SendBuf||, CODE, READONLY, ALIGN=1

                  RS485_SendBuf PROC
;;;387    */
;;;388    void RS485_SendBuf(uint8_t *_ucaBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;389    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;390    	comSendBuf(COM3, _ucaBuf, _usLen);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       comSendBuf
;;;391    }
000010  bd70              POP      {r4-r6,pc}
;;;392    
                          ENDP


                          AREA ||i.RS485_SendOver||, CODE, READONLY, ALIGN=2

                  RS485_SendOver PROC
;;;373    */
;;;374    void RS485_SendOver(void)
000000  2004              MOVS     r0,#4
;;;375    {
;;;376    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000002  4901              LDR      r1,|L8.8|
000004  6008              STR      r0,[r1,#0]
;;;377    }
000006  4770              BX       lr
;;;378    
                          ENDP

                  |L8.8|
                          DCD      0x40010c14

                          AREA ||i.RS485_SendStr||, CODE, READONLY, ALIGN=1

                  RS485_SendStr PROC
;;;402    */
;;;403    void RS485_SendStr(char *_pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;404    {
000002  4604              MOV      r4,r0
;;;405    	RS485_SendBuf((uint8_t *)_pBuf, strlen(_pBuf));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  b285              UXTH     r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RS485_SendBuf
;;;406    }
000014  bd70              POP      {r4-r6,pc}
;;;407    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1057   #if UART1_FIFO_EN == 1
;;;1058   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1059   {
;;;1060   	UartIRQ(&g_tUart1);
000002  4802              LDR      r0,|L10.12|
000004  f7fffffe          BL       UartIRQ
;;;1061   }
000008  bd10              POP      {r4,pc}
;;;1062   
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      g_tUart1

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;1075   #if UART2_FIFO_EN == 1
;;;1076   void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1077   {
;;;1078   	UartIRQ(&g_tUart2);
000002  4802              LDR      r0,|L11.12|
000004  f7fffffe          BL       UartIRQ
;;;1079   }
000008  bd10              POP      {r4,pc}
;;;1080   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      g_tUart2

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;925    */
;;;926    static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;927    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;928    	uint16_t usCount;
;;;929    
;;;930    	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;931    	DISABLE_INT();
000006  f7fffffe          BL       vPortEnterCritical
;;;932    	usCount = _pUart->usRxCount;
00000a  8b66              LDRH     r6,[r4,#0x1a]
;;;933    	ENABLE_INT();
00000c  f7fffffe          BL       vPortExitCritical
;;;934    
;;;935    	/* 如果读和写索引相同，则返回0 */
;;;936    	//if (_pUart->usRxRead == usRxWrite)
;;;937    	if (usCount == 0)	/* 已经没有数据 */
000010  b90e              CBNZ     r6,|L12.22|
;;;938    	{
;;;939    		return 0;
000012  2000              MOVS     r0,#0
                  |L12.20|
;;;940    	}
;;;941    	else
;;;942    	{
;;;943    		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;944    
;;;945    		/* 改写FIFO读索引 */
;;;946    		DISABLE_INT();
;;;947    		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;948    		{
;;;949    			_pUart->usRxRead = 0;
;;;950    		}
;;;951    		_pUart->usRxCount--;
;;;952    		ENABLE_INT();
;;;953    		return 1;
;;;954    	}
;;;955    }
000014  bd70              POP      {r4-r6,pc}
                  |L12.22|
000016  8b21              LDRH     r1,[r4,#0x18]         ;943
000018  68a0              LDR      r0,[r4,#8]            ;943
00001a  5c40              LDRB     r0,[r0,r1]            ;943
00001c  7028              STRB     r0,[r5,#0]            ;943
00001e  f7fffffe          BL       vPortEnterCritical
000022  8b20              LDRH     r0,[r4,#0x18]         ;947
000024  1c40              ADDS     r0,r0,#1              ;947
000026  b280              UXTH     r0,r0                 ;947
000028  8320              STRH     r0,[r4,#0x18]         ;947
00002a  89e1              LDRH     r1,[r4,#0xe]          ;947
00002c  4288              CMP      r0,r1                 ;947
00002e  db01              BLT      |L12.52|
000030  2000              MOVS     r0,#0                 ;949
000032  8320              STRH     r0,[r4,#0x18]         ;949
                  |L12.52|
000034  8b60              LDRH     r0,[r4,#0x1a]         ;951
000036  1e40              SUBS     r0,r0,#1              ;951
000038  8360              STRH     r0,[r4,#0x1a]         ;951
00003a  f7fffffe          BL       vPortExitCritical
00003e  2001              MOVS     r0,#1                 ;953
000040  e7e8              B        |L12.20|
;;;956    
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;964    */
;;;965    static void UartIRQ(UART_T *_pUart)
000000  b570              PUSH     {r4-r6,lr}
;;;966    {
000002  4604              MOV      r4,r0
;;;967    	/* 处理接收中断  */
;;;968    	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L13.74|
;;;969    	{
;;;970    		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;971    		uint8_t ch;
;;;972    
;;;973    		ch = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c5              UXTB     r5,r0
;;;974    		_pUart->pRxBuf[_pUart->usRxWrite] = ch;
000018  8ae1              LDRH     r1,[r4,#0x16]
00001a  68a0              LDR      r0,[r4,#8]
00001c  5445              STRB     r5,[r0,r1]
;;;975    		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001e  8ae0              LDRH     r0,[r4,#0x16]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  82e0              STRH     r0,[r4,#0x16]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  db01              BLT      |L13.48|
;;;976    		{
;;;977    			_pUart->usRxWrite = 0;
00002c  2000              MOVS     r0,#0
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L13.48|
;;;978    		}
;;;979    		if (_pUart->usRxCount < _pUart->usRxBufSize)
000030  8b60              LDRH     r0,[r4,#0x1a]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  da02              BGE      |L13.62|
;;;980    		{
;;;981    			_pUart->usRxCount++;
000038  8b60              LDRH     r0,[r4,#0x1a]
00003a  1c40              ADDS     r0,r0,#1
00003c  8360              STRH     r0,[r4,#0x1a]
                  |L13.62|
;;;982    		}
;;;983    
;;;984    		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;985    		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;986    		//if (_pUart->usRxCount == 1)
;;;987    		{
;;;988    			if (_pUart->ReciveNew)
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b110              CBZ      r0,|L13.72|
;;;989    			{
;;;990    				_pUart->ReciveNew(ch);
000042  4628              MOV      r0,r5
000044  6a61              LDR      r1,[r4,#0x24]
000046  4788              BLX      r1
                  |L13.72|
;;;991    			}
;;;992    		}
;;;993    	}
000048  bf00              NOP      
                  |L13.74|
;;;994    
;;;995    	/* 处理发送缓冲区空中断 */
;;;996    	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L13.154|
;;;997    	{
;;;998    		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;999    		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L13.116|
;;;1000   		{
;;;1001   			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;1002   			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;1003   
;;;1004   			/* 使能数据发送完毕中断 */
;;;1005   			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L13.228|
                  |L13.116|
;;;1006   		}
;;;1007   		else
;;;1008   		{
;;;1009   			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;1010   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;1011   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L13.146|
;;;1012   			{
;;;1013   				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L13.146|
;;;1014   			}
;;;1015   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L13.228|
                  |L13.154|
;;;1016   		}
;;;1017   
;;;1018   	}
;;;1019   	/* 数据bit位全部发送完毕的中断 */
;;;1020   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L13.228|
;;;1021   	{
;;;1022   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1023   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L13.192|
;;;1024   		{
;;;1025   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1026   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1027   
;;;1028   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1029   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L13.228|
;;;1030   			{
;;;1031   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L13.228|
                  |L13.192|
;;;1032   			}
;;;1033   		}
;;;1034   		else
;;;1035   		{
;;;1036   			/* 正常情况下，不会进入此分支 */
;;;1037   
;;;1038   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1039   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1040   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L13.222|
;;;1041   			{
;;;1042   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L13.222|
;;;1043   			}
;;;1044   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L13.228|
;;;1045   		}
;;;1046   	}
;;;1047   }
0000e4  bd70              POP      {r4-r6,pc}
;;;1048   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;853    */
;;;854    static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  b5f8              PUSH     {r3-r7,lr}
;;;855    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;856    	uint16_t i;
;;;857    
;;;858    	for (i = 0; i < _usLen; i++)
000008  2500              MOVS     r5,#0
00000a  e025              B        |L14.88|
                  |L14.12|
;;;859    	{
;;;860    		/* 如果发送缓冲区已经满了，则等待缓冲区空 */
;;;861    	#if 0
;;;862    		/*
;;;863    			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;864    			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;865    			将导致while(1) 无法退出
;;;866    		*/
;;;867    		while (1)
;;;868    		{
;;;869    			uint16_t usRead;
;;;870    
;;;871    			DISABLE_INT();
;;;872    			usRead = _pUart->usTxRead;
;;;873    			ENABLE_INT();
;;;874    
;;;875    			if (++usRead >= _pUart->usTxBufSize)
;;;876    			{
;;;877    				usRead = 0;
;;;878    			}
;;;879    
;;;880    			if (usRead != _pUart->usTxWrite)
;;;881    			{
;;;882    				break;
;;;883    			}
;;;884    		}
;;;885    	#else
;;;886    		/* 当 _pUart->usTxBufSize == 1 时, 下面的函数会死掉(待完善) */
;;;887    		while (1)
00000c  e00c              B        |L14.40|
                  |L14.14|
;;;888    		{
;;;889    			__IO uint16_t usCount;
;;;890    
;;;891    			DISABLE_INT();
00000e  f7fffffe          BL       vPortEnterCritical
;;;892    			usCount = _pUart->usTxCount;
000012  8aa0              LDRH     r0,[r4,#0x14]
000014  9000              STR      r0,[sp,#0]
;;;893    			ENABLE_INT();
000016  f7fffffe          BL       vPortExitCritical
;;;894    
;;;895    			if (usCount < _pUart->usTxBufSize)
00001a  89a0              LDRH     r0,[r4,#0xc]
00001c  f8bd1000          LDRH     r1,[sp,#0]
000020  4288              CMP      r0,r1
000022  dd00              BLE      |L14.38|
;;;896    			{
;;;897    				break;
000024  e001              B        |L14.42|
                  |L14.38|
;;;898    			}
;;;899    		}
000026  bf00              NOP      
                  |L14.40|
000028  e7f1              B        |L14.14|
                  |L14.42|
00002a  bf00              NOP                            ;897
;;;900    	#endif
;;;901    
;;;902    		/* 将新数据填入发送缓冲区 */
;;;903    		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
00002c  5d70              LDRB     r0,[r6,r5]
00002e  8a22              LDRH     r2,[r4,#0x10]
000030  6861              LDR      r1,[r4,#4]
000032  5488              STRB     r0,[r1,r2]
;;;904    
;;;905    		DISABLE_INT();
000034  f7fffffe          BL       vPortEnterCritical
;;;906    		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
000038  8a20              LDRH     r0,[r4,#0x10]
00003a  1c40              ADDS     r0,r0,#1
00003c  b280              UXTH     r0,r0
00003e  8220              STRH     r0,[r4,#0x10]
000040  89a1              LDRH     r1,[r4,#0xc]
000042  4288              CMP      r0,r1
000044  db01              BLT      |L14.74|
;;;907    		{
;;;908    			_pUart->usTxWrite = 0;
000046  2000              MOVS     r0,#0
000048  8220              STRH     r0,[r4,#0x10]
                  |L14.74|
;;;909    		}
;;;910    		_pUart->usTxCount++;
00004a  8aa0              LDRH     r0,[r4,#0x14]
00004c  1c40              ADDS     r0,r0,#1
00004e  82a0              STRH     r0,[r4,#0x14]
;;;911    		ENABLE_INT();
000050  f7fffffe          BL       vPortExitCritical
000054  1c68              ADDS     r0,r5,#1              ;858
000056  b285              UXTH     r5,r0                 ;858
                  |L14.88|
000058  42bd              CMP      r5,r7                 ;858
00005a  dbd7              BLT      |L14.12|
;;;912    	}
;;;913    
;;;914    	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
00005c  2201              MOVS     r2,#1
00005e  f2407127          MOV      r1,#0x727
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       USART_ITConfig
;;;915    }
000068  bdf8              POP      {r3-r7,pc}
;;;916    
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;429    */
;;;430    static void UartVarInit(void)
000000  4815              LDR      r0,|L15.88|
;;;431    {
;;;432    #if UART1_FIFO_EN == 1
;;;433    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  4916              LDR      r1,|L15.92|
000004  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;434    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000006  4816              LDR      r0,|L15.96|
000008  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;435    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000a  4816              LDR      r0,|L15.100|
00000c  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;436    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00000e  f44f7080          MOV      r0,#0x100
000012  8188              STRH     r0,[r1,#0xc]
;;;437    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000014  81c8              STRH     r0,[r1,#0xe]
;;;438    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
000016  2000              MOVS     r0,#0
000018  8208              STRH     r0,[r1,#0x10]
;;;439    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001a  8248              STRH     r0,[r1,#0x12]
;;;440    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
00001c  82c8              STRH     r0,[r1,#0x16]
;;;441    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
00001e  8308              STRH     r0,[r1,#0x18]
;;;442    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000020  8348              STRH     r0,[r1,#0x1a]
;;;443    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000022  8288              STRH     r0,[r1,#0x14]
;;;444    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000024  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;445    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
000026  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;446    	g_tUart1.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000028  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;447    #endif
;;;448    
;;;449    #if UART2_FIFO_EN == 1
;;;450    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
00002a  480f              LDR      r0,|L15.104|
00002c  490f              LDR      r1,|L15.108|
00002e  6008              STR      r0,[r1,#0]  ; g_tUart2
;;;451    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
000030  480f              LDR      r0,|L15.112|
000032  6048              STR      r0,[r1,#4]  ; g_tUart2
;;;452    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
000034  480f              LDR      r0,|L15.116|
000036  6088              STR      r0,[r1,#8]  ; g_tUart2
;;;453    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000038  f44f7080          MOV      r0,#0x100
00003c  8188              STRH     r0,[r1,#0xc]
;;;454    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
00003e  81c8              STRH     r0,[r1,#0xe]
;;;455    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
000040  2000              MOVS     r0,#0
000042  8208              STRH     r0,[r1,#0x10]
;;;456    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
000044  8248              STRH     r0,[r1,#0x12]
;;;457    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
000046  82c8              STRH     r0,[r1,#0x16]
;;;458    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
000048  8308              STRH     r0,[r1,#0x18]
;;;459    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
00004a  8348              STRH     r0,[r1,#0x1a]
;;;460    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */
00004c  8288              STRH     r0,[r1,#0x14]
;;;461    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
00004e  61c8              STR      r0,[r1,#0x1c]  ; g_tUart2
;;;462    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
000050  6208              STR      r0,[r1,#0x20]  ; g_tUart2
;;;463    	g_tUart2.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000052  6248              STR      r0,[r1,#0x24]  ; g_tUart2
;;;464    #endif
;;;465    
;;;466    #if UART3_FIFO_EN == 1
;;;467    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
;;;468    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
;;;469    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
;;;470    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;471    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;472    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;473    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
;;;474    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;475    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
;;;476    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
;;;477    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */
;;;478    	g_tUart3.SendBefor = RS485_SendBefor;		/* 发送数据前的回调函数 */
;;;479    	g_tUart3.SendOver = RS485_SendOver;			/* 发送完毕后的回调函数 */
;;;480    	g_tUart3.ReciveNew = RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
;;;481    #endif
;;;482    
;;;483    #if UART4_FIFO_EN == 1
;;;484    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
;;;485    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
;;;486    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
;;;487    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;488    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;489    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;490    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
;;;491    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;492    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
;;;493    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
;;;494    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */
;;;495    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;496    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;497    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;498    #endif
;;;499    
;;;500    #if UART5_FIFO_EN == 1
;;;501    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;502    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;503    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;504    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;505    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;506    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;507    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;508    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;509    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;510    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;511    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */
;;;512    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;513    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;514    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;515    #endif
;;;516    
;;;517    
;;;518    #if UART6_FIFO_EN == 1
;;;519    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
;;;520    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
;;;521    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
;;;522    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;523    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;524    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;525    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
;;;526    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;527    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
;;;528    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
;;;529    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */
;;;530    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;531    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;532    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;533    #endif
;;;534    }
000054  4770              BX       lr
;;;535    
                          ENDP

000056  0000              DCW      0x0000
                  |L15.88|
                          DCD      0x40013800
                  |L15.92|
                          DCD      g_tUart1
                  |L15.96|
                          DCD      g_TxBuf1
                  |L15.100|
                          DCD      g_RxBuf1
                  |L15.104|
                          DCD      0x40004400
                  |L15.108|
                          DCD      g_tUart2
                  |L15.112|
                          DCD      g_TxBuf2
                  |L15.116|
                          DCD      g_RxBuf2

                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;74     */
;;;75     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;78     
;;;79     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;80     
;;;81     	RS485_InitTXE();	/* 配置RS485芯片的发送使能硬件，配置为推挽输出 */
00000a  f7fffffe          BL       RS485_InitTXE
;;;82     
;;;83     	ConfigUartNVIC();	/* 配置串口中断 */
00000e  f7fffffe          BL       ConfigUartNVIC
;;;84     }
000012  bd10              POP      {r4,pc}
;;;85     
                          ENDP


                          AREA ||i.bsp_Set485Baud||, CODE, READONLY, ALIGN=2

                  bsp_Set485Baud PROC
;;;336    */
;;;337    void bsp_Set485Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;338    {
000002  4604              MOV      r4,r0
;;;339    	USART_InitTypeDef USART_InitStructure;
;;;340    
;;;341    	/* 第2步： 配置串口硬件参数 */
;;;342    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;343    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;344    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;345    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;346    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;347    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;348    	USART_Init(USART3, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L17.40|
000022  f7fffffe          BL       USART_Init
;;;349    }
000026  bd1f              POP      {r0-r4,pc}
;;;350    
                          ENDP

                  |L17.40|
                          DCD      0x40004800

                          AREA ||i.bsp_SetUart1Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart1Baud PROC
;;;269    */
;;;270    void bsp_SetUart1Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;271    {
000002  4604              MOV      r4,r0
;;;272    	USART_InitTypeDef USART_InitStructure;
;;;273    
;;;274    	/* 第2步： 配置串口硬件参数 */
;;;275    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;276    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;277    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;278    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;279    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;280    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;281    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L18.40|
000022  f7fffffe          BL       USART_Init
;;;282    }
000026  bd1f              POP      {r0-r4,pc}
;;;283    
                          ENDP

                  |L18.40|
                          DCD      0x40004400

                          AREA ||i.bsp_SetUart2Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart2Baud PROC
;;;291    */
;;;292    void bsp_SetUart2Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;293    {
000002  4604              MOV      r4,r0
;;;294    	USART_InitTypeDef USART_InitStructure;
;;;295    
;;;296    	/* 第2步： 配置串口硬件参数 */
;;;297    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;298    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;299    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;300    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;301    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;302    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;303    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L19.40|
000022  f7fffffe          BL       USART_Init
;;;304    }
000026  bd1f              POP      {r0-r4,pc}
;;;305    
                          ENDP

                  |L19.40|
                          DCD      0x40004400

                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;246    */
;;;247    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;248    {
000002  4603              MOV      r3,r0
;;;249    	UART_T *pUart;
;;;250    
;;;251    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;252    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L20.16|
                  |L20.14|
;;;253    	{
;;;254    		return;
;;;255    	}
;;;256    
;;;257    	pUart->usRxWrite = 0;
;;;258    	pUart->usRxRead = 0;
;;;259    	pUart->usRxCount = 0;
;;;260    }
00000e  bd00              POP      {pc}
                  |L20.16|
000010  2000              MOVS     r0,#0                 ;257
000012  82d0              STRH     r0,[r2,#0x16]         ;257
000014  8310              STRH     r0,[r2,#0x18]         ;258
000016  8350              STRH     r0,[r2,#0x1a]         ;259
000018  bf00              NOP      
00001a  e7f8              B        |L20.14|
;;;261    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=1

                  comClearTxFifo PROC
;;;223    */
;;;224    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;225    {
000002  4603              MOV      r3,r0
;;;226    	UART_T *pUart;
;;;227    
;;;228    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;229    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L21.16|
                  |L21.14|
;;;230    	{
;;;231    		return;
;;;232    	}
;;;233    
;;;234    	pUart->usTxWrite = 0;
;;;235    	pUart->usTxRead = 0;
;;;236    	pUart->usTxCount = 0;
;;;237    }
00000e  bd00              POP      {pc}
                  |L21.16|
000010  2000              MOVS     r0,#0                 ;234
000012  8210              STRH     r0,[r2,#0x10]         ;234
000014  8250              STRH     r0,[r2,#0x12]         ;235
000016  8290              STRH     r0,[r2,#0x14]         ;236
000018  bf00              NOP      
00001a  e7f8              B        |L21.14|
;;;238    
                          ENDP


                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;193    */
;;;194    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;195    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;196    	UART_T *pUart;
;;;197    
;;;198    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;199    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L22.20|
;;;200    	{
;;;201    		return 0;
000010  2000              MOVS     r0,#0
                  |L22.18|
;;;202    	}
;;;203    
;;;204    	return UartGetChar(pUart, _pByte);
;;;205    }
000012  bd70              POP      {r4-r6,pc}
                  |L22.20|
000014  4631              MOV      r1,r6                 ;204
000016  4620              MOV      r0,r4                 ;204
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L22.18|
;;;206    
                          ENDP


                          AREA ||i.comGetLen||, CODE, READONLY, ALIGN=1

                  comGetLen PROC
;;;206    
;;;207    uint16_t comGetLen(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;208    {
000002  4602              MOV      r2,r0
;;;209    	UART_T *pUart;
;;;210    
;;;211    	pUart = ComToUart(_ucPort);
000004  4610              MOV      r0,r2
000006  f7fffffe          BL       ComToUart
00000a  4603              MOV      r3,r0
;;;212    	
;;;213    	return pUart->usRxCount;
00000c  8b58              LDRH     r0,[r3,#0x1a]
;;;214    }
00000e  bd00              POP      {pc}
;;;215    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;152    */
;;;153    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;154    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;155    	UART_T *pUart;
;;;156    
;;;157    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;158    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L24.24|
                  |L24.20|
;;;159    	{
;;;160    		return;
;;;161    	}
;;;162    
;;;163    	if (pUart->SendBefor != 0)
;;;164    	{
;;;165    		pUart->SendBefor();		/* 如果是RS485通信，可以在这个函数中将RS485设置为发送模式 */
;;;166    	}
;;;167    
;;;168    	UartSend(pUart, _ucaBuf, _usLen);
;;;169    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L24.24|
000018  69e0              LDR      r0,[r4,#0x1c]         ;163
00001a  b108              CBZ      r0,|L24.32|
00001c  69e0              LDR      r0,[r4,#0x1c]         ;165
00001e  4780              BLX      r0                    ;165
                  |L24.32|
000020  463a              MOV      r2,r7                 ;168
000022  4631              MOV      r1,r6                 ;168
000024  4620              MOV      r0,r4                 ;168
000026  f7fffffe          BL       UartSend
00002a  bf00              NOP      
00002c  e7f2              B        |L24.20|
;;;170    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;179    */
;;;180    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;181    {
000002  4604              MOV      r4,r0
;;;182    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;183    }
00000e  bd1c              POP      {r2-r4,pc}
;;;184    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;1143   */
;;;1144   int fgetc(FILE *f)
000000  b510              PUSH     {r4,lr}
;;;1145   {
000002  4604              MOV      r4,r0
;;;1146   
;;;1147   #if 0	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;1148   	uint8_t ucData;
;;;1149   
;;;1150   	while(comGetChar(COM1, &ucData) == 0);
;;;1151   
;;;1152   	return ucData;
;;;1153   #else
;;;1154   	/* 等待串口1输入数据 */
;;;1155   	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
000004  bf00              NOP      
                  |L26.6|
000006  2120              MOVS     r1,#0x20
000008  4804              LDR      r0,|L26.28|
00000a  f7fffffe          BL       USART_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L26.6|
;;;1156   
;;;1157   	return (int)USART_ReceiveData(USART1);
000012  4802              LDR      r0,|L26.28|
000014  f7fffffe          BL       USART_ReceiveData
;;;1158   #endif
;;;1159   }
000018  bd10              POP      {r4,pc}
;;;1160   
                          ENDP

00001a  0000              DCW      0x0000
                  |L26.28|
                          DCD      0x40013800

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;1117   */
;;;1118   int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;1119   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1120   #if 0	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;1121   	comSendChar(COM1, ch);
;;;1122   
;;;1123   	return ch;
;;;1124   #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;1125   	/* 写一个字节到USART1 */
;;;1126   	USART_SendData(USART1, (uint8_t) ch);
000006  b2e1              UXTB     r1,r4
000008  4805              LDR      r0,|L27.32|
00000a  f7fffffe          BL       USART_SendData
;;;1127   
;;;1128   	/* 等待发送结束 */
;;;1129   	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
00000e  bf00              NOP      
                  |L27.16|
000010  2140              MOVS     r1,#0x40
000012  4803              LDR      r0,|L27.32|
000014  f7fffffe          BL       USART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L27.16|
;;;1130   	{}
;;;1131   
;;;1132   	return ch;
00001c  4620              MOV      r0,r4
;;;1133   #endif
;;;1134   }
00001e  bd70              POP      {r4-r6,pc}
;;;1135   
                          ENDP

                  |L27.32|
                          DCD      0x40013800

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        256
                  g_RxBuf1
                          %        256
                  g_tUart2
                          %        40
                  g_TxBuf2
                          %        256
                  g_RxBuf2
                          %        256

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_uart_fifo_c_b28b0d00____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH|
#line 128
|__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
