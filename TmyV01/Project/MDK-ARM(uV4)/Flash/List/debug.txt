; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\debug.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\debug.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -ID:\MyDoc\MyPrj\MyGitPrj\TmyV01\Project\MDK-ARM(uV4)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\debug.crf ..\..\User\app\debug.c]
                          THUMB

                          AREA ||i.debug_at||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                  debug_at PROC
;;;44     
;;;45     void debug_at( const char * _Format, ...)
000000  b510              PUSH     {r4,lr}
;;;46     {
000002  4604              MOV      r4,r0
;;;47         #if DEBUG_AT == 1
;;;48         
;;;49         if( lg_debug_en & 0x02 ) printf( _Format );
000004  4804              LDR      r0,|L1.24|
000006  7800              LDRB     r0,[r0,#0]  ; lg_debug_en
000008  f0000002          AND      r0,r0,#2
00000c  b110              CBZ      r0,|L1.20|
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       __2printf
                  |L1.20|
;;;50             
;;;51         #endif
;;;52        ;
;;;53     }
000014  bd10              POP      {r4,pc}
;;;54     
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      lg_debug_en

                          AREA ||i.debug_ble||, CODE, READONLY, ALIGN=1

                  debug_ble PROC
;;;54     
;;;55     void debug_ble( const char * _Format, ...)
000000  4770              BX       lr
;;;56     {
;;;57         #if DEBUG_BLE == 1
;;;58         
;;;59         if( lg_debug_en & 0x04 ) printf( _Format );
;;;60             
;;;61         #endif
;;;62        ;
;;;63     }
;;;64     
                          ENDP


                          AREA ||i.debug_en||, CODE, READONLY, ALIGN=2

                  debug_en PROC
;;;26     
;;;27     void debug_en( uint8_t en )
000000  4901              LDR      r1,|L3.8|
;;;28     {
;;;29         lg_debug_en = en;
000002  7008              STRB     r0,[r1,#0]
;;;30     }
000004  4770              BX       lr
;;;31     
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      lg_debug_en

                          AREA ||i.debug_usr||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                  debug_usr PROC
;;;64     
;;;65     void debug_usr( const char * _Format, ...)
000000  b510              PUSH     {r4,lr}
;;;66     {
000002  4604              MOV      r4,r0
;;;67         #if DEBUG_USR == 1
;;;68         
;;;69         if( lg_debug_en & 0x08 ) printf( _Format );
000004  4804              LDR      r0,|L4.24|
000006  7800              LDRB     r0,[r0,#0]  ; lg_debug_en
000008  f0000008          AND      r0,r0,#8
00000c  b110              CBZ      r0,|L4.20|
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       __2printf
                  |L4.20|
;;;70             
;;;71         #endif
;;;72        ;
;;;73     }
000014  bd10              POP      {r4,pc}
;;;74     
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      lg_debug_en

                          AREA ||i.debug_usr_hex||, CODE, READONLY, ALIGN=2

                  debug_usr_hex PROC
;;;31     
;;;32     void debug_usr_hex( uint8_t *hexbuf, uint16_t len )
000000  b570              PUSH     {r4-r6,lr}
;;;33     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;34         if( lg_debug_en ) 
000006  4807              LDR      r0,|L5.36|
000008  7800              LDRB     r0,[r0,#0]  ; lg_debug_en
00000a  b150              CBZ      r0,|L5.34|
;;;35         {
;;;36             uint16_t i;
;;;37             
;;;38             for( i=0; i<len; i++ )
00000c  2400              MOVS     r4,#0
00000e  e005              B        |L5.28|
                  |L5.16|
;;;39             {
;;;40                 comSendCharHex( COM1, hexbuf[i] );
000010  5d29              LDRB     r1,[r5,r4]
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       comSendCharHex
000018  1c60              ADDS     r0,r4,#1              ;38
00001a  b284              UXTH     r4,r0                 ;38
                  |L5.28|
00001c  42b4              CMP      r4,r6                 ;38
00001e  dbf7              BLT      |L5.16|
;;;41             }
;;;42         }
000020  bf00              NOP      
                  |L5.34|
;;;43     }
000022  bd70              POP      {r4-r6,pc}
;;;44     
                          ENDP

                  |L5.36|
                          DCD      lg_debug_en

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  BLE_TxBuf
                          %        100
                  BLE_RxBuf
                          %        100

                          AREA ||.data||, DATA, ALIGN=0

                  lg_debug_en
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\debug.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_debug_c_debug_en____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_debug_c_debug_en____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_debug_c_debug_en____REVSH|
#line 128
|__asm___7_debug_c_debug_en____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
