; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\save2flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\save2flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -ID:\MyDoc\MyPrj\MyGitPrj\TmyV01\Project\MDK-ARM(uV4)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\save2flash.crf ..\..\User\app\save2flash.c]
                          THUMB

                          AREA ||i.MemReadByte||, CODE, READONLY, ALIGN=2

                  MemReadByte PROC
;;;42     ***************************************************************************************************/
;;;43     uint8_t MemReadByte(uint16_t *data,uint16_t num)                               
000000  b510              PUSH     {r4,lr}
;;;44     {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;45             uint16_t *temp_addr = (uint16_t *)PAGE_ADDR;
000006  4906              LDR      r1,|L1.32|
;;;46            
;;;47             while(num --)
000008  e003              B        |L1.18|
                  |L1.10|
;;;48             {
;;;49                     *data ++ = *temp_addr ++;
00000a  f8310b02          LDRH     r0,[r1],#2
00000e  f8220b02          STRH     r0,[r2],#2
                  |L1.18|
000012  0018              MOVS     r0,r3                 ;47
000014  f1a30401          SUB      r4,r3,#1              ;47
000018  b2a3              UXTH     r3,r4                 ;47
00001a  d1f6              BNE      |L1.10|
;;;50             }
;;;51                                                                                                            
;;;52             return 1;                                                                                                       
00001c  2001              MOVS     r0,#1
;;;53     }
00001e  bd10              POP      {r4,pc}
;;;54     
                          ENDP

                  |L1.32|
                          DCD      0x0800fc00

                          AREA ||i.MemWriteByte||, CODE, READONLY, ALIGN=2

                  MemWriteByte PROC
;;;63     ***************************************************************************************************/
;;;64     uint8_t MemWriteByte(uint16_t *data,uint16_t num)                               
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;65     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;66             FLASH_Status temp_stat;
;;;67             uint32_t temp_addr = PAGE_ADDR;
000008  4f12              LDR      r7,|L2.84|
;;;68                    
;;;69             FLASH_Unlock();     // Flash解锁，允许操作相关的寄存器
00000a  f7fffffe          BL       FLASH_Unlock
;;;70             temp_stat = FLASH_ErasePage(PAGE_ADDR); // 擦出制定的页
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       FLASH_ErasePage
000014  4606              MOV      r6,r0
;;;71            
;;;72             if(temp_stat != FLASH_COMPLETE)
000016  2e04              CMP      r6,#4
000018  d004              BEQ      |L2.36|
;;;73             {
;;;74                     FLASH_Lock();
00001a  f7fffffe          BL       FLASH_Lock
;;;75                     return 0;
00001e  2000              MOVS     r0,#0
                  |L2.32|
;;;76             }
;;;77            
;;;78             while(num --)
;;;79             {
;;;80                     temp_stat = FLASH_ProgramHalfWord(temp_addr,*data);
;;;81                     if(temp_stat != FLASH_COMPLETE)
;;;82                     {
;;;83                             FLASH_Lock();
;;;84                             return 0;
;;;85                     }
;;;86            
;;;87                     temp_addr += 2;
;;;88                     data++;
;;;89             }
;;;90            
;;;91             FLASH_Lock();       
;;;92             return 1;
;;;93     }
000020  e8bd81f0          POP      {r4-r8,pc}
                  |L2.36|
000024  e00c              B        |L2.64|
                  |L2.38|
000026  8821              LDRH     r1,[r4,#0]            ;80
000028  4638              MOV      r0,r7                 ;80
00002a  f7fffffe          BL       FLASH_ProgramHalfWord
00002e  4606              MOV      r6,r0                 ;80
000030  2e04              CMP      r6,#4                 ;81
000032  d003              BEQ      |L2.60|
000034  f7fffffe          BL       FLASH_Lock
000038  2000              MOVS     r0,#0                 ;84
00003a  e7f1              B        |L2.32|
                  |L2.60|
00003c  1cbf              ADDS     r7,r7,#2              ;87
00003e  1ca4              ADDS     r4,r4,#2              ;88
                  |L2.64|
000040  0028              MOVS     r0,r5                 ;78
000042  f1a50101          SUB      r1,r5,#1              ;78
000046  b28d              UXTH     r5,r1                 ;78
000048  d1ed              BNE      |L2.38|
00004a  f7fffffe          BL       FLASH_Lock
00004e  2001              MOVS     r0,#1                 ;92
000050  e7e6              B        |L2.32|
;;;94     
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      0x0800fc00

                          AREA ||i.ReadFromFlash||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  ReadFromFlash PROC
;;;106    
;;;107    uint8_t ReadFromFlash( void )
000000  b510              PUSH     {r4,lr}
;;;108    {
;;;109    //	uint16_t i, n;
;;;110    	
;;;111        MemReadByte( data_saved.buf, FLASH_DATA_SIZE );
000002  212c              MOVS     r1,#0x2c
000004  484b              LDR      r0,|L3.308|
000006  f7fffffe          BL       MemReadByte
;;;112        
;;;113        //if( data_saved.data.lg.buf & SAVE_LG_MASK ) //初始化默认参数
;;;114        if( data_saved.data.lg.buf ) //初始化默认参数
00000a  484a              LDR      r0,|L3.308|
00000c  f8b0004c          LDRH     r0,[r0,#0x4c]  ; data_saved
000010  2800              CMP      r0,#0
000012  d07c              BEQ      |L3.270|
;;;115        {
;;;116            //sprintf( data_saved.data.PWD,"%s","111111" ); //密码 
;;;117            sprintf( (char*)data_saved.data.PWD,"%s","000000" ); //密码
000014  a248              ADR      r2,|L3.312|
000016  a14a              ADR      r1,|L3.320|
000018  4846              LDR      r0,|L3.308|
00001a  1c40              ADDS     r0,r0,#1
00001c  f7fffffe          BL       __2sprintf
;;;118            sprintf( (char*)data_saved.data.TOKEN,"%s","0000" ); //令牌
000020  a248              ADR      r2,|L3.324|
000022  a147              ADR      r1,|L3.320|
000024  4843              LDR      r0,|L3.308|
000026  3008              ADDS     r0,r0,#8
000028  f7fffffe          BL       __2sprintf
;;;119            sprintf( (char*)data_saved.data.KEY,"%s","8888888888888888" ); //秘钥
00002c  a247              ADR      r2,|L3.332|
00002e  a144              ADR      r1,|L3.320|
000030  4840              LDR      r0,|L3.308|
000032  300d              ADDS     r0,r0,#0xd
000034  f7fffffe          BL       __2sprintf
;;;120            sprintf( (char*)data_saved.data.NAME,"%s","JC-G6201" ); //sprintf( data_saved.data.NAME,"%s","JC-G6201" ); //广播名称 
000038  a249              ADR      r2,|L3.352|
00003a  a141              ADR      r1,|L3.320|
00003c  483d              LDR      r0,|L3.308|
00003e  301e              ADDS     r0,r0,#0x1e
000040  f7fffffe          BL       __2sprintf
;;;121             
;;;122            if( data_saved.data.lg.bit.ip == 1 )
000044  483b              LDR      r0,|L3.308|
000046  f890004c          LDRB     r0,[r0,#0x4c]  ; data_saved
00004a  f0000001          AND      r0,r0,#1
00004e  b198              CBZ      r0,|L3.120|
;;;123            { //"180.101.147.115", "5683"
;;;124                
;;;125                //sprintf( Nb.IP,"%s","180.101.147.115" );
;;;126                //sprintf( Nb.PORT,"%s", "5683" ); 
;;;127                
;;;128                sprintf( data_saved.data.IP,"%s","180.101.147.115" );
000050  a246              ADR      r2,|L3.364|
000052  a13b              ADR      r1,|L3.320|
000054  4837              LDR      r0,|L3.308|
000056  302e              ADDS     r0,r0,#0x2e
000058  f7fffffe          BL       __2sprintf
;;;129                sprintf( data_saved.data.PORT,"%s", "5683" ); 
00005c  a247              ADR      r2,|L3.380|
00005e  a138              ADR      r1,|L3.320|
000060  4834              LDR      r0,|L3.308|
000062  303e              ADDS     r0,r0,#0x3e
000064  f7fffffe          BL       __2sprintf
;;;130                
;;;131                data_saved.data.lg.bit.ip = 0;
000068  4832              LDR      r0,|L3.308|
00006a  f8b0004c          LDRH     r0,[r0,#0x4c]  ; data_saved
00006e  f0200001          BIC      r0,r0,#1
000072  4930              LDR      r1,|L3.308|
000074  f8a1004c          STRH     r0,[r1,#0x4c]
                  |L3.120|
;;;132            }
;;;133            
;;;134            if( data_saved.data.lg.bit.EnKey == 1 )
000078  482e              LDR      r0,|L3.308|
00007a  f890004c          LDRB     r0,[r0,#0x4c]  ; data_saved
00007e  f3c00040          UBFX     r0,r0,#1,#1
000082  b168              CBZ      r0,|L3.160|
;;;135            {
;;;136                sprintf( (char*)data_saved.data.EncKey,"%s","JCKJ" );
000084  a23f              ADR      r2,|L3.388|
000086  a12e              ADR      r1,|L3.320|
000088  482a              LDR      r0,|L3.308|
00008a  3046              ADDS     r0,r0,#0x46
00008c  f7fffffe          BL       __2sprintf
;;;137                data_saved.data.lg.bit.EnKey = 0;
000090  4828              LDR      r0,|L3.308|
000092  f8b0004c          LDRH     r0,[r0,#0x4c]  ; data_saved
000096  f0200002          BIC      r0,r0,#2
00009a  4926              LDR      r1,|L3.308|
00009c  f8a1004c          STRH     r0,[r1,#0x4c]
                  |L3.160|
;;;138            }
;;;139            
;;;140            if( data_saved.data.lg.bit.time_wake == 1 )
0000a0  4824              LDR      r0,|L3.308|
0000a2  f890004c          LDRB     r0,[r0,#0x4c]  ; data_saved
0000a6  f3c000c0          UBFX     r0,r0,#3,#1
0000aa  b150              CBZ      r0,|L3.194|
;;;141            {
;;;142                data_saved.data.time_wake = TIME_LOCK_WAKE;
0000ac  f44f60b4          MOV      r0,#0x5a0
0000b0  4920              LDR      r1,|L3.308|
0000b2  6548              STR      r0,[r1,#0x54]  ; data_saved
;;;143                data_saved.data.lg.bit.time_wake = 0;
0000b4  4608              MOV      r0,r1
0000b6  f8b0004c          LDRH     r0,[r0,#0x4c]  ; data_saved
0000ba  f0200008          BIC      r0,r0,#8
0000be  f8a1004c          STRH     r0,[r1,#0x4c]
                  |L3.194|
;;;144            }
;;;145            
;;;146            if( data_saved.data.lg.bit.time_sleep == 1 )
0000c2  481c              LDR      r0,|L3.308|
0000c4  f890004c          LDRB     r0,[r0,#0x4c]  ; data_saved
0000c8  f3c00080          UBFX     r0,r0,#2,#1
0000cc  b148              CBZ      r0,|L3.226|
;;;147            {
;;;148                data_saved.data.time_sleep = TIME_LOCK_SLEEP;
0000ce  2014              MOVS     r0,#0x14
0000d0  4918              LDR      r1,|L3.308|
0000d2  6508              STR      r0,[r1,#0x50]  ; data_saved
;;;149                data_saved.data.lg.bit.time_sleep = 0;
0000d4  4608              MOV      r0,r1
0000d6  f8b0004c          LDRH     r0,[r0,#0x4c]  ; data_saved
0000da  f0200004          BIC      r0,r0,#4
0000de  f8a1004c          STRH     r0,[r1,#0x4c]
                  |L3.226|
;;;150            }
;;;151            
;;;152            if( data_saved.data.lg.bit.threshold_lowpower == 1 )
0000e2  4814              LDR      r0,|L3.308|
0000e4  f890004c          LDRB     r0,[r0,#0x4c]  ; data_saved
0000e8  f3c01000          UBFX     r0,r0,#4,#1
0000ec  b148              CBZ      r0,|L3.258|
;;;153            {
;;;154                data_saved.data.threshold_lowpower = THR_LOWPOWER;
0000ee  200a              MOVS     r0,#0xa
0000f0  4910              LDR      r1,|L3.308|
0000f2  7008              STRB     r0,[r1,#0]
;;;155                data_saved.data.lg.bit.threshold_lowpower = 0;
0000f4  4608              MOV      r0,r1
0000f6  f8b0004c          LDRH     r0,[r0,#0x4c]  ; data_saved
0000fa  f0200010          BIC      r0,r0,#0x10
0000fe  f8a1004c          STRH     r0,[r1,#0x4c]
                  |L3.258|
;;;156            }
;;;157            
;;;158            data_saved.data.lg.buf = 0;
000102  2000              MOVS     r0,#0
000104  490b              LDR      r1,|L3.308|
000106  f8a1004c          STRH     r0,[r1,#0x4c]
;;;159            SaveToFlash( );
00010a  f7fffffe          BL       SaveToFlash
                  |L3.270|
;;;160        }
;;;161    //    sprintf( Nb.IP,"%s", data_saved.data.IP );
;;;162    //    sprintf( Nb.PORT,"%s", data_saved.data.PORT );
;;;163        
;;;164        sprintf( Ble.Name,"%s", data_saved.data.NAME ); //
00010e  4a09              LDR      r2,|L3.308|
000110  321e              ADDS     r2,r2,#0x1e
000112  a10b              ADR      r1,|L3.320|
000114  481d              LDR      r0,|L3.396|
000116  f7fffffe          BL       __2sprintf
;;;165        sprintf( (char*)Ble.Token,"%s", data_saved.data.TOKEN ); //
00011a  4a06              LDR      r2,|L3.308|
00011c  3208              ADDS     r2,r2,#8
00011e  a108              ADR      r1,|L3.320|
000120  481a              LDR      r0,|L3.396|
000122  3812              SUBS     r0,r0,#0x12
000124  f7fffffe          BL       __2sprintf
;;;166        
;;;167        data_saved.data.time_sleep = 12;
000128  200c              MOVS     r0,#0xc
00012a  4902              LDR      r1,|L3.308|
00012c  6508              STR      r0,[r1,#0x50]  ; data_saved
;;;168        //data_saved.data.time_heart = 10;
;;;169        
;;;170    //    timer_wake = data_saved.data.time_wake;
;;;171    //    timer_sleep = data_saved.data.time_sleep;
;;;172        //timer_heart = data_saved.data.time_heart;
;;;173        //nb_usr_set_sleep_time( TIME_NB_SLEEP );
;;;174            
;;;175               
;;;176        return 1;
00012e  2001              MOVS     r0,#1
;;;177    }
000130  bd10              POP      {r4,pc}
;;;178    
                          ENDP

000132  0000              DCW      0x0000
                  |L3.308|
                          DCD      data_saved
                  |L3.312|
000138  30303030          DCB      "000000",0
00013c  303000  
00013f  00                DCB      0
                  |L3.320|
000140  257300            DCB      "%s",0
000143  00                DCB      0
                  |L3.324|
000144  30303030          DCB      "0000",0
000148  00      
000149  00                DCB      0
00014a  00                DCB      0
00014b  00                DCB      0
                  |L3.332|
00014c  38383838          DCB      "8888888888888888",0
000150  38383838
000154  38383838
000158  38383838
00015c  00      
00015d  00                DCB      0
00015e  00                DCB      0
00015f  00                DCB      0
                  |L3.352|
000160  4a432d47          DCB      "JC-G6201",0
000164  36323031
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L3.364|
00016c  3138302e          DCB      "180.101.147.115",0
000170  3130312e
000174  3134372e
000178  31313500
                  |L3.380|
00017c  35363833          DCB      "5683",0
000180  00      
000181  00                DCB      0
000182  00                DCB      0
000183  00                DCB      0
                  |L3.388|
000184  4a434b4a          DCB      "JCKJ",0
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
                  |L3.396|
                          DCD      Ble+0x14

                          AREA ||i.SaveToFlash||, CODE, READONLY, ALIGN=2

                  SaveToFlash PROC
;;;94     
;;;95     void SaveToFlash( void )
000000  b510              PUSH     {r4,lr}
;;;96     {
;;;97         //DISABLE_INT();
;;;98     			
;;;99         MemWriteByte( data_saved.buf, FLASH_DATA_SIZE );
000002  212c              MOVS     r1,#0x2c
000004  4801              LDR      r0,|L4.12|
000006  f7fffffe          BL       MemWriteByte
;;;100        
;;;101        //delay_ms(10);
;;;102        
;;;103        //ENABLE_INT();
;;;104    }
00000a  bd10              POP      {r4,pc}
;;;105    
                          ENDP

                  |L4.12|
                          DCD      data_saved

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BLE_TxBuf
                          %        100
                  BLE_RxBuf
                          %        100
                  data_saved
                          %        88

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\save2flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_save2flash_c_91983c04____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_save2flash_c_91983c04____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_save2flash_c_91983c04____REVSH|
#line 128
|__asm___12_save2flash_c_91983c04____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
