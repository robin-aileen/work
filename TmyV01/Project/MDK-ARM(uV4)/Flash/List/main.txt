; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -I.\RTE\_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;1075   */
;;;1076   static void AppTaskCreate (void)
000000  b51f              PUSH     {r0-r4,lr}
;;;1077   {
;;;1078   //    xTaskCreate( vTaskTaskUserIF,   	/* 任务函数  */
;;;1079   //                 "vTaskUserIF",     	/* 任务名    */
;;;1080   //                 512,               	/* 任务栈大小，单位word，也就是4字节 */
;;;1081   //                 NULL,              	/* 任务参数  */
;;;1082   //                 1,                 	/* 任务优先级*/
;;;1083   //                 &xHandleTaskUserIF );  /* 任务句柄  */
;;;1084   //	
;;;1085   //	
;;;1086   
;;;1087   
;;;1088   	xTaskCreate( vTaskLCD,    		/* 任务函数  */
000002  2000              MOVS     r0,#0
000004  4a14              LDR      r2,|L1.88|
000006  2304              MOVS     r3,#4
000008  e9cd2001          STRD     r2,r0,[sp,#4]
00000c  9300              STR      r3,[sp,#0]
00000e  9003              STR      r0,[sp,#0xc]
000010  4603              MOV      r3,r0
000012  f44f7200          MOV      r2,#0x200
000016  a111              ADR      r1,|L1.92|
000018  4813              LDR      r0,|L1.104|
00001a  f7fffffe          BL       xTaskGenericCreate
;;;1089                    "vTaskLCD",  		/* 任务名    */
;;;1090                    STKSIZE_TaskLCD,         		/* 任务栈大小，单位word，也就是4字节 */
;;;1091                    NULL,        		/* 任务参数  */
;;;1092                    PRIO_TaskLCD,      /* 任务优先级*/
;;;1093                    &xHandleTaskLCD ); /* 任务句柄  */
;;;1094   	
;;;1095   	xTaskCreate( vTaskMotorCtrl,     		/* 任务函数  */
00001e  2000              MOVS     r0,#0
000020  4a12              LDR      r2,|L1.108|
000022  2303              MOVS     r3,#3
000024  e9cd2001          STRD     r2,r0,[sp,#4]
000028  9300              STR      r3,[sp,#0]
00002a  9003              STR      r0,[sp,#0xc]
00002c  4603              MOV      r3,r0
00002e  f44f7200          MOV      r2,#0x200
000032  a10f              ADR      r1,|L1.112|
000034  4812              LDR      r0,|L1.128|
000036  f7fffffe          BL       xTaskGenericCreate
;;;1096                    "vTaskMotorCtrl",   		/* 任务名    */
;;;1097                    STKSIZE_TaskMotorCtrl,     /* 任务栈大小，单位word，也就是4字节 */
;;;1098                    NULL,           		    /* 任务参数  */
;;;1099                    PRIO_TaskMotorCtrl,        /* 任务优先级*/
;;;1100                    &xHandleTaskMotorCtrl );  /* 任务句柄  */
;;;1101   	
;;;1102       xTaskCreate( vTaskSensor,     		    /* 任务函数  */
00003a  2000              MOVS     r0,#0
00003c  4a11              LDR      r2,|L1.132|
00003e  2301              MOVS     r3,#1
000040  e9cd2001          STRD     r2,r0,[sp,#4]
000044  9300              STR      r3,[sp,#0]
000046  9003              STR      r0,[sp,#0xc]
000048  4603              MOV      r3,r0
00004a  2280              MOVS     r2,#0x80
00004c  a10e              ADR      r1,|L1.136|
00004e  4811              LDR      r0,|L1.148|
000050  f7fffffe          BL       xTaskGenericCreate
;;;1103                    "vTaskSensor",   		    /* 任务名    */
;;;1104                    STKSIZE_TaskSensor,        /* 任务栈大小，单位word，也就是4字节 */
;;;1105                    NULL,           		    /* 任务参数  */
;;;1106                    PRIO_TaskSensor,           /* 任务优先级*/
;;;1107                    &xHandleTaskSensor );      /* 任务句柄  */
;;;1108   }
000054  bd1f              POP      {r0-r4,pc}
;;;1109   
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      xHandleTaskLCD
                  |L1.92|
00005c  76546173          DCB      "vTaskLCD",0
000060  6b4c4344
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L1.104|
                          DCD      vTaskLCD
                  |L1.108|
                          DCD      xHandleTaskMotorCtrl
                  |L1.112|
000070  76546173          DCB      "vTaskMotorCtrl",0
000074  6b4d6f74
000078  6f724374
00007c  726c00  
00007f  00                DCB      0
                  |L1.128|
                          DCD      vTaskMotorCtrl
                  |L1.132|
                          DCD      xHandleTaskSensor
                  |L1.136|
000088  76546173          DCB      "vTaskSensor",0
00008c  6b53656e
000090  736f7200
                  |L1.148|
                          DCD      vTaskSensor

                          AREA ||i.P_GetMsgFromUart||, CODE, READONLY, ALIGN=1

                  P_GetMsgFromUart PROC
;;;63     
;;;64     uint16_t P_GetMsgFromUart(COM_PORT_E _ucPort, uint8_t *msg)
000000  b5f8              PUSH     {r3-r7,lr}
;;;65     {
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
;;;66     	uint16_t i=0;
000006  2400              MOVS     r4,#0
;;;67         uint8_t tem8=0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;68         uint32_t tem32 = 0;
00000c  2600              MOVS     r6,#0
;;;69         
;;;70         if( comGetLen(_ucPort) > 3 ) //收接收数据
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       comGetLen
000014  2803              CMP      r0,#3
000016  dd28              BLE      |L2.106|
;;;71         {
;;;72             while( comGetLen(_ucPort) )
000018  e022              B        |L2.96|
                  |L2.26|
;;;73             {
;;;74                 comGetChar(_ucPort, &tem8);
00001a  4669              MOV      r1,sp
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       comGetChar
;;;75                 if( i == 0 )
000022  b954              CBNZ     r4,|L2.58|
;;;76                 {
;;;77                     if( tem8 == 0xEE ) 
000024  f89d0000          LDRB     r0,[sp,#0]
000028  28ee              CMP      r0,#0xee
00002a  d116              BNE      |L2.90|
;;;78                     {
;;;79                         *( msg + i++ ) = tem8;
00002c  f89d2000          LDRB     r2,[sp,#0]
000030  4620              MOV      r0,r4
000032  1c61              ADDS     r1,r4,#1
000034  b28c              UXTH     r4,r1
000036  542a              STRB     r2,[r5,r0]
000038  e00f              B        |L2.90|
                  |L2.58|
;;;80                     }
;;;81                 }else
;;;82                 {
;;;83                     *( msg + i++ ) = tem8;
00003a  f89d2000          LDRB     r2,[sp,#0]
00003e  4620              MOV      r0,r4
000040  1c61              ADDS     r1,r4,#1
000042  b28c              UXTH     r4,r1
000044  542a              STRB     r2,[r5,r0]
;;;84                     
;;;85                     tem32 = ((tem32<<8)|tem8);                           //拼接最后4个字节，组成一个32位整数
000046  f89d0000          LDRB     r0,[sp,#0]
00004a  ea402606          ORR      r6,r0,r6,LSL #8
;;;86                     if( tem32 == 0xFFFCFFFF )
00004e  f46f3040          MVN      r0,#0x30000
000052  4286              CMP      r6,r0
000054  d101              BNE      |L2.90|
;;;87                     {
;;;88                         return i;
000056  4620              MOV      r0,r4
                  |L2.88|
;;;89                     }
;;;90     //                if( i > 13 )
;;;91     //                {
;;;92     //                    if( tem8 == 0xFF ) 
;;;93     //                    {
;;;94     //                        return i;
;;;95     //                    }else
;;;96     //                    {
;;;97     //                        return 0;
;;;98     //                    }
;;;99     //                }
;;;100                }
;;;101                vTaskDelay(pdMS_TO_TICKS(1));
;;;102            }
;;;103        }
;;;104        return 0;
;;;105    }
000058  bdf8              POP      {r3-r7,pc}
                  |L2.90|
00005a  2001              MOVS     r0,#1                 ;101
00005c  f7fffffe          BL       vTaskDelay
                  |L2.96|
000060  4638              MOV      r0,r7                 ;72
000062  f7fffffe          BL       comGetLen
000066  2800              CMP      r0,#0                 ;72
000068  d1d7              BNE      |L2.26|
                  |L2.106|
00006a  2000              MOVS     r0,#0                 ;104
00006c  e7f4              B        |L2.88|
;;;106    
                          ENDP


                          AREA ||i.TMY_ParaInit||, CODE, READONLY, ALIGN=2

                  TMY_ParaInit PROC
;;;107    //默认参数
;;;108    void TMY_ParaInit( void )
000000  4811              LDR      r0,|L3.72|
;;;109    {
;;;110    	//步进电机初始化
;;;111        //方向
;;;112    	Motor.state.bit.dir = UP;
000002  7880              LDRB     r0,[r0,#2]  ; Motor
000004  f0200001          BIC      r0,r0,#1
000008  490f              LDR      r1,|L3.72|
00000a  7088              STRB     r0,[r1,#2]
;;;113        //速度
;;;114    	Motor.speed = SLOW;
00000c  2001              MOVS     r0,#1
00000e  7008              STRB     r0,[r1,#0]
;;;115    	Motor.gear = GEAR_SLOW_NORMAL_FAST; //慢中快速，默认有效
000010  2002              MOVS     r0,#2
000012  7048              STRB     r0,[r1,#1]
;;;116        //SetTextValue(0, 16,"停止\x00");
;;;117        
;;;118        //频率
;;;119        //SetTextValue(0, 17,"0");
;;;120        
;;;121    	Motor.max_step = MAX_STEP_18ML; //最大步数
000014  480d              LDR      r0,|L3.76|
000016  6088              STR      r0,[r1,#8]  ; Motor
;;;122    	Motor.counter_step = 0; //步数
000018  2000              MOVS     r0,#0
00001a  6048              STR      r0,[r1,#4]  ; Motor
;;;123    	
;;;124    	//其它初始化
;;;125    	Tmy.pressure = 0; //压力
00001c  490c              LDR      r1,|L3.80|
00001e  60c8              STR      r0,[r1,#0xc]  ; Tmy
;;;126    	Tmy.power_percent = 100; //电量
000020  2064              MOVS     r0,#0x64
000022  7208              STRB     r0,[r1,#8]
;;;127    	
;;;128        Tmy.Key.zdpk = 1; //自动排空，默认有效
000024  4608              MOV      r0,r1
000026  7940              LDRB     r0,[r0,#5]  ; Tmy
000028  f0200002          BIC      r0,r0,#2
00002c  1c80              ADDS     r0,r0,#2
00002e  7148              STRB     r0,[r1,#5]
;;;129        Tmy.Key.hx = 1; //回吸，默认有效
000030  4608              MOV      r0,r1
000032  7940              LDRB     r0,[r0,#5]  ; Tmy
000034  f0200001          BIC      r0,r0,#1
000038  1c40              ADDS     r0,r0,#1
00003a  7148              STRB     r0,[r1,#5]
;;;130        Tmy.Key.zh = 0; //1.8ml，默认有效
00003c  4608              MOV      r0,r1
00003e  7940              LDRB     r0,[r0,#5]  ; Tmy
000040  f0200008          BIC      r0,r0,#8
000044  7148              STRB     r0,[r1,#5]
;;;131    }
000046  4770              BX       lr
;;;132    
                          ENDP

                  |L3.72|
                          DCD      Motor
                  |L3.76|
                          DCD      0x0003b97e
                  |L3.80|
                          DCD      Tmy

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;167    */
;;;168    int main(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;169    {
;;;170    	/* 
;;;171    	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;172    	  这样做的好处是：
;;;173    	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;174    	  2. 保证系统正常启动，不受别的中断影响。
;;;175    	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;176    	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;177    	  和cpsie i是等效的。
;;;178         */
;;;179    	__set_PRIMASK(1);  
;;;180    	
;;;181    	/* 硬件初始化 */
;;;182    	bsp_Init(); 
000008  f7fffffe          BL       bsp_Init
;;;183    	debug_en( 1 );
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       debug_en
;;;184    	
;;;185    	TMY_ParaInit();
000012  f7fffffe          BL       TMY_ParaInit
;;;186    	start_set();
000016  f7fffffe          BL       start_set
;;;187    	
;;;188    	/* 创建任务 */
;;;189    	AppTaskCreate();
00001a  f7fffffe          BL       AppTaskCreate
;;;190    	
;;;191        /* 启动调度，开始执行任务 */
;;;192        vTaskStartScheduler();
00001e  f7fffffe          BL       vTaskStartScheduler
;;;193    
;;;194    	/* 
;;;195    	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;196    	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;197    	  #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 17 * 1024 ) )
;;;198    	*/
;;;199    	while(1);
000022  bf00              NOP      
                  |L4.36|
000024  e7fe              B        |L4.36|
;;;200    }
;;;201    
                          ENDP


                          AREA ||i.start_set||, CODE, READONLY, ALIGN=2

                  start_set PROC
;;;133    
;;;134    void start_set( void )
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136        if(RCC_GetFlagStatus(RCC_FLAG_PORRST))
000002  207b              MOVS     r0,#0x7b
000004  f7fffffe          BL       RCC_GetFlagStatus
000008  b118              CBZ      r0,|L5.18|
;;;137        {
;;;138            debug_usr("power reset:");//上电重启
00000a  a00d              ADR      r0,|L5.64|
00000c  f7fffffe          BL       debug_usr
000010  e002              B        |L5.24|
                  |L5.18|
;;;139        }else
;;;140        {
;;;141            debug_usr("other reset:");//软重启
000012  a00f              ADR      r0,|L5.80|
000014  f7fffffe          BL       debug_usr
                  |L5.24|
;;;142        }
;;;143        
;;;144        //debug_usr("%d %d\r\n", data_saved.data.n_reset, data_saved.data.n_error);//
;;;145        
;;;146        RCC->CSR|=0X1000000    ; //清除中断标示
000018  4811              LDR      r0,|L5.96|
00001a  6a40              LDR      r0,[r0,#0x24]
00001c  f0407080          ORR      r0,r0,#0x1000000
000020  490f              LDR      r1,|L5.96|
000022  6248              STR      r0,[r1,#0x24]
;;;147        
;;;148        //debug_usr("Train num : %02x%02x max_room_n:%d\r\n", Train.TrainNum[0], Train.TrainNum[1], Train.max_room_n );
;;;149        //printf("Train num : %02x%02x max_room_n:%d\r\n", Train.TrainNum[0], Train.TrainNum[1], Train.max_room_n );
;;;150        
;;;151        debug_usr("************************************\r\n");
000024  a00f              ADR      r0,|L5.100|
000026  f7fffffe          BL       debug_usr
;;;152        debug_usr("          推麻仪 IV型\r\n\r\n");
00002a  a018              ADR      r0,|L5.140|
00002c  f7fffffe          BL       debug_usr
;;;153        debug_usr("Version : %s\r\n", HW_VER);
000030  a11d              ADR      r1,|L5.168|
000032  a01f              ADR      r0,|L5.176|
000034  f7fffffe          BL       debug_usr
;;;154        //printf("ID : %c%d - %02d\r\n", Train.TrainType, ( ( ( (uint16_t)Train.TrainNum[0]) << 8 ) + Train.TrainNum[1]), Train.max_room_n );
;;;155        //printf("ID : %02x%02x - %d\r\n", Train.TrainNum[0], Train.TrainNum[1], Train.max_room_n );
;;;156        
;;;157        printf("************************************\r\n");
000038  a00a              ADR      r0,|L5.100|
00003a  f7fffffe          BL       __2printf
;;;158    }
00003e  bd10              POP      {r4,pc}
;;;159    
                          ENDP

                  |L5.64|
000040  706f7765          DCB      "power reset:",0
000044  72207265
000048  7365743a
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L5.80|
000050  6f746865          DCB      "other reset:",0
000054  72207265
000058  7365743a
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
                  |L5.96|
                          DCD      0x40021000
                  |L5.100|
000064  2a2a2a2a          DCB      "************************************\r\n",0
000068  2a2a2a2a
00006c  2a2a2a2a
000070  2a2a2a2a
000074  2a2a2a2a
000078  2a2a2a2a
00007c  2a2a2a2a
000080  2a2a2a2a
000084  2a2a2a2a
000088  0d0a00  
00008b  00                DCB      0
                  |L5.140|
00008c  20202020          DCB      "          ",205,198,194,233,210,199," IV",208,205,"\r\n"
000090  20202020
000094  2020cdc6
000098  c2e9d2c7
00009c  204956d0
0000a0  cd0d0a  
0000a3  0d0a00            DCB      "\r\n",0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L5.168|
0000a8  56312e30          DCB      "V1.0.0",0
0000ac  2e3000  
0000af  00                DCB      0
                  |L5.176|
0000b0  56657273          DCB      "Version : %s\r\n",0
0000b4  696f6e20
0000b8  3a202573
0000bc  0d0a00  
0000bf  00                DCB      0

                          AREA ||i.vTaskLCD||, CODE, READONLY, ALIGN=2

                  vTaskLCD PROC
;;;340    */
;;;341    static void vTaskLCD(void *pvParameters)
000000  f7fffffe          BL       ULCD_Init
;;;342    {      
;;;343    //    uint8_t err, tem8;
;;;344        
;;;345        ULCD_Init();
;;;346        printf( "vTaskLCD\r\n" );
000004  a006              ADR      r0,|L6.32|
000006  f7fffffe          BL       __2printf
;;;347        bsp_LedOff(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_LedOff
;;;348        
;;;349        //vTaskDelay(pdMS_TO_TICKS(10000));
;;;350        
;;;351        //LCD_ParaInit( );
;;;352        
;;;353        while(1)
000010  e004              B        |L6.28|
                  |L6.18|
;;;354        {
;;;355            vTaskDelay(1);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       vTaskDelay
;;;356            ULCD_Task();
000018  f7fffffe          BL       ULCD_Task
                  |L6.28|
00001c  e7f9              B        |L6.18|
;;;357            
;;;358    //        if( lg_lcd_init == 1 )
;;;359    //        {
;;;360    //            //SetBuzzer(100);
;;;361    //            lg_lcd_init = 2;
;;;362    //            LCD_ParaInit();
;;;363    //            Tmy.State.bit.InitPara = 1;
;;;364    //        }
;;;365            
;;;366        }
;;;367    }
;;;368    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
000020  76546173          DCB      "vTaskLCD\r\n",0
000024  6b4c4344
000028  0d0a00  
00002b  00                DCB      0

                          AREA ||i.vTaskMotorCtrl||, CODE, READONLY, ALIGN=2

                  vTaskMotorCtrl PROC
;;;378    
;;;379    static void vTaskMotorCtrl(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;380    {
;;;381        uint8_t key_v, tem8;
;;;382        //uint8_t  key_state, key_state_c;
;;;383        uint8_t count_init_down;
;;;384        
;;;385        uint8_t dg_sta_c;
;;;386        
;;;387        MOTOR_Init( 1000 );
000002  f44f707a          MOV      r0,#0x3e8
000006  f7fffffe          BL       MOTOR_Init
;;;388        key_v = 0;
00000a  2600              MOVS     r6,#0
;;;389        MOTOR_SetDir( UP );
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       MOTOR_SetDir
;;;390        
;;;391        Motor.max_hx_step = 31495;
000012  f6473007          MOV      r0,#0x7b07
000016  49fe              LDR      r1,|L7.1040|
000018  6108              STR      r0,[r1,#0x10]  ; Motor
;;;392        
;;;393        count_init_down = 0;
00001a  2700              MOVS     r7,#0
;;;394        dev_sta = DEV_INIT;
00001c  2000              MOVS     r0,#0
00001e  49fd              LDR      r1,|L7.1044|
000020  7008              STRB     r0,[r1,#0]
;;;395        dg_sta = DG_INIT;
000022  2001              MOVS     r0,#1
000024  49fc              LDR      r1,|L7.1048|
000026  7008              STRB     r0,[r1,#0]
;;;396        
;;;397        while(1)
000028  e397              B        |L7.1882|
                  |L7.42|
;;;398        {
;;;399            vTaskDelay(2);
00002a  2002              MOVS     r0,#2
00002c  f7fffffe          BL       vTaskDelay
;;;400    		
;;;401            bsp_KeyScan();
000030  f7fffffe          BL       bsp_KeyScan
;;;402            
;;;403    		//key_state = bsp_GetKeyState( KID_SYRINGE );
;;;404    		//key_state_c = key_state;
;;;405    			
;;;406    		key_v = bsp_GetKey();
000034  f7fffffe          BL       bsp_GetKey
000038  4606              MOV      r6,r0
;;;407            
;;;408            switch( key_v ) //
00003a  2e19              CMP      r6,#0x19
00003c  d002              BEQ      |L7.68|
00003e  2e1a              CMP      r6,#0x1a
000040  d164              BNE      |L7.268|
000042  e044              B        |L7.206|
                  |L7.68|
;;;409    		{
;;;410    		    case PEDAL_DOWN : //按下脚踏，电机运行
;;;411    			
;;;412    				timer_pedal_up = 0;
000044  2000              MOVS     r0,#0
000046  49f5              LDR      r1,|L7.1052|
000048  7008              STRB     r0,[r1,#0]
;;;413    		        
;;;414    				if( dg_sta == DG_UP ) //顶杆上升期间
00004a  48f3              LDR      r0,|L7.1048|
00004c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00004e  2806              CMP      r0,#6
000050  d13c              BNE      |L7.204|
;;;415    		        {   
;;;416    					//自动给药情况下，按下脚踏，停机?
;;;417    					if( Tmy.State.bit.zdgy )
000052  48f3              LDR      r0,|L7.1056|
000054  7980              LDRB     r0,[r0,#6]  ; Tmy
000056  f3c01080          UBFX     r0,r0,#6,#1
00005a  b170              CBZ      r0,|L7.122|
;;;418    					{
;;;419    					    timer_pedal_down = 1;
00005c  2001              MOVS     r0,#1
00005e  49f1              LDR      r1,|L7.1060|
000060  7008              STRB     r0,[r1,#0]
;;;420    					    Tmy.State.bit.zdgy = 0; //取消自动给药
000062  48ef              LDR      r0,|L7.1056|
000064  7980              LDRB     r0,[r0,#6]  ; Tmy
000066  f0200040          BIC      r0,r0,#0x40
00006a  49ed              LDR      r1,|L7.1056|
00006c  7188              STRB     r0,[r1,#6]
;;;421    					    //播放语音:自动给药取消？
;;;422    					    SetTextValue(0,26,"自动给药取消");
00006e  a2ee              ADR      r2,|L7.1064|
000070  211a              MOVS     r1,#0x1a
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       SetTextValue
000078  e028              B        |L7.204|
                  |L7.122|
;;;423    					    
;;;424    					}else //非自动给药
;;;425    					{
;;;426        					timer_pedal_down = 1;
00007a  2001              MOVS     r0,#1
00007c  49e9              LDR      r1,|L7.1060|
00007e  7008              STRB     r0,[r1,#0]
;;;427        					//Tmy.State.bit.zdgy = 0;//取消自动给药
;;;428        					
;;;429            	            Motor.speed++;
000080  48e3              LDR      r0,|L7.1040|
000082  7800              LDRB     r0,[r0,#0]  ; Motor
000084  1c40              ADDS     r0,r0,#1
000086  49e2              LDR      r1,|L7.1040|
000088  7008              STRB     r0,[r1,#0]
;;;430            	            if( Motor.speed > 3 ) 
00008a  4608              MOV      r0,r1
00008c  7800              LDRB     r0,[r0,#0]  ; Motor
00008e  2803              CMP      r0,#3
000090  dd01              BLE      |L7.150|
;;;431            	            {
;;;432            	                Motor.speed = 1;
000092  2001              MOVS     r0,#1
000094  7008              STRB     r0,[r1,#0]
                  |L7.150|
;;;433            	            }
;;;434            	            
;;;435            	            tem8 = MOTOR_SPEED_INDEX[Motor.gear][Motor.speed-1];
000096  48de              LDR      r0,|L7.1040|
000098  7840              LDRB     r0,[r0,#1]  ; Motor
00009a  eb000040          ADD      r0,r0,r0,LSL #1
00009e  49e6              LDR      r1,|L7.1080|
0000a0  eb010140          ADD      r1,r1,r0,LSL #1
0000a4  48da              LDR      r0,|L7.1040|
0000a6  7800              LDRB     r0,[r0,#0]  ; Motor
0000a8  1e40              SUBS     r0,r0,#1
0000aa  f8115010          LDRB     r5,[r1,r0,LSL #1]
;;;436            	            Tmy.speed = tem8;
0000ae  48dc              LDR      r0,|L7.1056|
0000b0  7105              STRB     r5,[r0,#4]
;;;437            	             
;;;438            	            MOTOR_SetSpeed( MOTOR_SPEED_CYCLE[tem8] ); //设置电机速度
0000b2  49e2              LDR      r1,|L7.1084|
0000b4  f8310015          LDRH     r0,[r1,r5,LSL #1]
0000b8  f7fffffe          BL       MOTOR_SetSpeed
;;;439            	            SetTextValue(0, 16, &MOTOR_SPEED_DISPLAY[tem8][0]); 
0000bc  eb0500c5          ADD      r0,r5,r5,LSL #3
0000c0  49df              LDR      r1,|L7.1088|
0000c2  1842              ADDS     r2,r0,r1
0000c4  2110              MOVS     r1,#0x10
0000c6  2000              MOVS     r0,#0
0000c8  f7fffffe          BL       SetTextValue
                  |L7.204|
;;;440            	            //SetTextInt32(0, 17, MOTOR_SPEED_CYCLE[tem8], 0, 1);
;;;441            	            //Tmy.work_state = STA_MOVE;
;;;442    					}
;;;443    		        }
;;;444    		        
;;;445    		        break;
0000cc  e01f              B        |L7.270|
                  |L7.206|
;;;446    		    case PEDAL_UP : //抬起脚踏
;;;447    			
;;;448    				timer_pedal_down = 0;
0000ce  2000              MOVS     r0,#0
0000d0  49d4              LDR      r1,|L7.1060|
0000d2  7008              STRB     r0,[r1,#0]
;;;449    				
;;;450    		        if( dg_sta == DG_UP ) //顶杆上升期间
0000d4  48d0              LDR      r0,|L7.1048|
0000d6  7800              LDRB     r0,[r0,#0]  ; dg_sta
0000d8  2806              CMP      r0,#6
0000da  d116              BNE      |L7.266|
;;;451    		        {
;;;452    					if( Tmy.State.bit.zdgy ) //自动给药
0000dc  48d0              LDR      r0,|L7.1056|
0000de  7980              LDRB     r0,[r0,#6]  ; Tmy
0000e0  f3c01080          UBFX     r0,r0,#6,#1
0000e4  b988              CBNZ     r0,|L7.266|
;;;453        		        {
;;;454    						;//自动给药
;;;455    					}else //非自动给药
;;;456    					{
;;;457    						//Motor.speed = 0;
;;;458    						MOTOR_Stop(); //电机停止
0000e6  f7fffffe          BL       MOTOR_Stop
;;;459    						timer_pedal_up = 1;//启动脚踏抬起计时
0000ea  2001              MOVS     r0,#1
0000ec  49cb              LDR      r1,|L7.1052|
0000ee  7008              STRB     r0,[r1,#0]
;;;460    						
;;;461    						SetTextValue(0, 16,"停止\x00");
0000f0  a2d4              ADR      r2,|L7.1092|
0000f2  2110              MOVS     r1,#0x10
0000f4  2000              MOVS     r0,#0
0000f6  f7fffffe          BL       SetTextValue
;;;462    						SetTextInt32(0, 17, 0, 0, 1);
0000fa  2001              MOVS     r0,#1
0000fc  2300              MOVS     r3,#0
0000fe  461a              MOV      r2,r3
000100  2111              MOVS     r1,#0x11
000102  9000              STR      r0,[sp,#0]
000104  4618              MOV      r0,r3
000106  f7fffffe          BL       SetTextInt32
                  |L7.266|
;;;463    						//Tmy.work_state = STA_IDLE;
;;;464    					}
;;;465        	        }
;;;466    	            break;
00010a  e000              B        |L7.270|
                  |L7.268|
;;;467    //		    case ZERO_UNDETECT : //
;;;468    //		        Motor.state.bit.zero = 0;
;;;469    //		        SetTextValue(0,18,"未触底");
;;;470    //		        break;
;;;471    //	        case ZERO_DETECT : //
;;;472    //	            Motor.state.bit.zero = 1;
;;;473    //		        MOTOR_Stop();
;;;474    //		        Motor.counter_step = 0;
;;;475    //		        SetTextValue(0,18,"已触底");
;;;476    //		    case SYRINGE_UNDETECT : //
;;;477    ////		        Motor.state.bit.zero = 0;
;;;478    //		        //SetTextValue(0,18,"1.8ml");
;;;479    //		        break;
;;;480    //	        case SYRINGE_DETECT : //
;;;481    ////	            Motor.state.bit.zero = 1;
;;;482    ////		        MOTOR_Stop();
;;;483    ////		        Motor.counter_step = 0;
;;;484    //		        //SetTextValue(0,18,"2.2ml");
;;;485    //		        break;
;;;486    //	             
;;;487    		    default : break;
00010c  bf00              NOP      
                  |L7.270|
00010e  bf00              NOP                            ;445
;;;488    		}
;;;489            
;;;490    		if( dg_sta == DG_UP ) //顶杆上升期间
000110  48c1              LDR      r0,|L7.1048|
000112  7800              LDRB     r0,[r0,#0]  ; dg_sta
000114  2806              CMP      r0,#6
000116  d151              BNE      |L7.444|
;;;491    		{
;;;492    			if( timer_pedal_up > DLY_PEDAL_UP_MOTOR_STOP ) //抬起脚踏时间大于 DLY_PEDAL_UP_MOTOR_STOP 秒
000118  48c0              LDR      r0,|L7.1052|
00011a  7800              LDRB     r0,[r0,#0]  ; timer_pedal_up
00011c  2802              CMP      r0,#2
00011e  dd1f              BLE      |L7.352|
;;;493    			{
;;;494    				timer_pedal_up = 0;
000120  2000              MOVS     r0,#0
000122  49be              LDR      r1,|L7.1052|
000124  7008              STRB     r0,[r1,#0]
;;;495    				Motor.speed = 0; //恢复速度
000126  49ba              LDR      r1,|L7.1040|
000128  7008              STRB     r0,[r1,#0]
;;;496    				   if( Tmy.Key.hx )//&& (!Motor.state.bit.dir) )//回吸模式有效 Motor.state.bit.dir
00012a  48bd              LDR      r0,|L7.1056|
00012c  7940              LDRB     r0,[r0,#5]  ; Tmy
00012e  f0000001          AND      r0,r0,#1
000132  b1a8              CBZ      r0,|L7.352|
;;;497    				   {
;;;498    						if( ( Tmy.speed == SLOW )   //常慢速
000134  48ba              LDR      r0,|L7.1056|
000136  7900              LDRB     r0,[r0,#4]  ; Tmy
000138  2801              CMP      r0,#1
00013a  d007              BEQ      |L7.332|
;;;499    						 || ( Tmy.speed == NORMAL ) //中速
00013c  48b8              LDR      r0,|L7.1056|
00013e  7900              LDRB     r0,[r0,#4]  ; Tmy
000140  2802              CMP      r0,#2
000142  d003              BEQ      |L7.332|
;;;500    						 || ( Tmy.speed == FAST ) ) //快速 
000144  48b6              LDR      r0,|L7.1056|
000146  7900              LDRB     r0,[r0,#4]  ; Tmy
000148  2803              CMP      r0,#3
00014a  d109              BNE      |L7.352|
                  |L7.332|
;;;501    						{
;;;502    							Motor.counter_hx_step = Motor.counter_step - Motor.max_hx_step;
00014c  48b0              LDR      r0,|L7.1040|
00014e  6840              LDR      r0,[r0,#4]  ; Motor
000150  49af              LDR      r1,|L7.1040|
000152  6909              LDR      r1,[r1,#0x10]  ; Motor
000154  1a40              SUBS     r0,r0,r1
000156  49ae              LDR      r1,|L7.1040|
000158  60c8              STR      r0,[r1,#0xc]  ; Motor
;;;503    							//Tmy.state.bit.hx = 1;
;;;504    							dg_sta = DG_HX_DOWN;//Tmy.work_state = STA_HX_DOWN;
00015a  200b              MOVS     r0,#0xb
00015c  49ae              LDR      r1,|L7.1048|
00015e  7008              STRB     r0,[r1,#0]
                  |L7.352|
;;;505    							//MOTOR_SetDir( DOWN );
;;;506    							//MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度
;;;507    							//SetTextValue(0,18,"回吸下降");
;;;508    						}
;;;509    				   }
;;;510    			}
;;;511    			
;;;512    			//自动给药判断
;;;513    			if(1)//在xxx速度下
;;;514    			{
;;;515    				if( ( !Tmy.State.bit.zdgy ) && ( timer_pedal_down > TIME_ZDGY_ENABLE ) ) //按下脚踏时间大于TIME_CRUISE_START秒
000160  48af              LDR      r0,|L7.1056|
000162  7980              LDRB     r0,[r0,#6]  ; Tmy
000164  f3c01080          UBFX     r0,r0,#6,#1
000168  b990              CBNZ     r0,|L7.400|
00016a  48ae              LDR      r0,|L7.1060|
00016c  7800              LDRB     r0,[r0,#0]  ; timer_pedal_down
00016e  2805              CMP      r0,#5
000170  dd0e              BLE      |L7.400|
;;;516    				{
;;;517    					Tmy.State.bit.zdgy = 1; //进入自动给药
000172  48ab              LDR      r0,|L7.1056|
000174  7980              LDRB     r0,[r0,#6]  ; Tmy
000176  f0200040          BIC      r0,r0,#0x40
00017a  3040              ADDS     r0,r0,#0x40
00017c  49a8              LDR      r1,|L7.1056|
00017e  7188              STRB     r0,[r1,#6]
;;;518    					SetTextValue(0,26,"自动给药...");
000180  a2b2              ADR      r2,|L7.1100|
000182  211a              MOVS     r1,#0x1a
000184  2000              MOVS     r0,#0
000186  f7fffffe          BL       SetTextValue
;;;519    					//play_sound('a:/sounds/zdgy.mp3');
;;;520    					PlayMusic("a:/sounds/zdgy.mp3"); //EE 94 41 3A 2F 53 6F 75 6E 64 73 2F 7A 64 67 79 2E 6D 70 33 FF FC FF FF 
00018a  a0b3              ADR      r0,|L7.1112|
00018c  f7fffffe          BL       PlayMusic
                  |L7.400|
;;;521    					//播放语音:即将进入巡航模式
;;;522    					//如果2秒内，抬脚，进入巡航模式
;;;523    					//如果2秒内，没有抬脚，不进入巡航模式
;;;524    				}
;;;525    				
;;;526    				if( ( Tmy.State.bit.zdgy ) && ( timer_pedal_down > TIME_ZDGY_CANCLE ) ) //按下脚踏时间大于5秒
000190  48a3              LDR      r0,|L7.1056|
000192  7980              LDRB     r0,[r0,#6]  ; Tmy
000194  f3c01080          UBFX     r0,r0,#6,#1
000198  b180              CBZ      r0,|L7.444|
00019a  48a2              LDR      r0,|L7.1060|
00019c  7800              LDRB     r0,[r0,#0]  ; timer_pedal_down
00019e  2807              CMP      r0,#7
0001a0  dd0c              BLE      |L7.444|
;;;527    				{
;;;528    					Tmy.State.bit.zdgy = 0;//取消自动给药
0001a2  489f              LDR      r0,|L7.1056|
0001a4  7980              LDRB     r0,[r0,#6]  ; Tmy
0001a6  f0200040          BIC      r0,r0,#0x40
0001aa  499d              LDR      r1,|L7.1056|
0001ac  7188              STRB     r0,[r1,#6]
;;;529    					timer_pedal_down = 0;
0001ae  2000              MOVS     r0,#0
0001b0  499c              LDR      r1,|L7.1060|
0001b2  7008              STRB     r0,[r1,#0]
;;;530    					//播放语音:巡航模式取消？
;;;531    					SetTextValue(0,26,"自动给药取消");
0001b4  a29c              ADR      r2,|L7.1064|
0001b6  211a              MOVS     r1,#0x1a
0001b8  f7fffffe          BL       SetTextValue
                  |L7.444|
;;;532    					//如果2秒内，抬脚，进入巡航模式
;;;533    					//如果2秒内，没有抬脚，不进入巡航模式
;;;534    				}
;;;535    			}
;;;536    		}
;;;537    
;;;538            switch( dg_sta )
0001bc  4896              LDR      r0,|L7.1048|
0001be  7800              LDRB     r0,[r0,#0]  ; dg_sta
0001c0  2810              CMP      r0,#0x10
0001c2  d27c              BCS      |L7.702|
0001c4  e8dff000          TBB      [pc,r0]
0001c8  c8082a4d          DCB      0xc8,0x08,0x2a,0x4d
0001cc  fd9ffcfb          DCB      0xfd,0x9f,0xfc,0xfb
0001d0  e4faf9f8          DCB      0xe4,0xfa,0xf9,0xf8
0001d4  7b7bf7f6          DCB      0x7b,0x7b,0xf7,0xf6
;;;539            {
;;;540                case DG_INIT : //上电，参数初始化
;;;541                    if( dg_sta_c != dg_sta )
0001d8  488f              LDR      r0,|L7.1048|
0001da  7800              LDRB     r0,[r0,#0]  ; dg_sta
0001dc  4284              CMP      r4,r0
0001de  d001              BEQ      |L7.484|
;;;542                    {
;;;543                        dg_sta_c = dg_sta;
0001e0  488d              LDR      r0,|L7.1048|
0001e2  7804              LDRB     r4,[r0,#0]  ; dg_sta
                  |L7.484|
;;;544                        //SetTextValue(0,26,"初始化...");
;;;545                    }
;;;546                    
;;;547                    if( !Tmy.State.bit.InitPara ) //参数尚未初始化
0001e4  488e              LDR      r0,|L7.1056|
0001e6  7980              LDRB     r0,[r0,#6]  ; Tmy
0001e8  f0000001          AND      r0,r0,#1
0001ec  b968              CBNZ     r0,|L7.522|
;;;548                    {
;;;549                        if( lg_lcd_init == 1 )
0001ee  489f              LDR      r0,|L7.1132|
0001f0  7800              LDRB     r0,[r0,#0]  ; lg_lcd_init
0001f2  2801              CMP      r0,#1
0001f4  d111              BNE      |L7.538|
;;;550                        {
;;;551                            //lg_lcd_init = 2;
;;;552                            LCD_ParaInit();
0001f6  f7fffffe          BL       LCD_ParaInit
;;;553                            Tmy.State.bit.InitPara = 1;
0001fa  4889              LDR      r0,|L7.1056|
0001fc  7980              LDRB     r0,[r0,#6]  ; Tmy
0001fe  f0200001          BIC      r0,r0,#1
000202  1c40              ADDS     r0,r0,#1
000204  4986              LDR      r1,|L7.1056|
000206  7188              STRB     r0,[r1,#6]
000208  e007              B        |L7.538|
                  |L7.522|
;;;554                        }
;;;555                        //Tmy.State.bit.InitPara = 1;
;;;556                    }else //参数初始化完成
;;;557                    {
;;;558                        SetTextValue(0,26,"LCD初始化完成。");
00020a  a299              ADR      r2,|L7.1136|
00020c  211a              MOVS     r1,#0x1a
00020e  2000              MOVS     r0,#0
000210  f7fffffe          BL       SetTextValue
;;;559                        dg_sta = DG_INIT_DOWN;//顶杆归零
000214  2003              MOVS     r0,#3
000216  4980              LDR      r1,|L7.1048|
000218  7008              STRB     r0,[r1,#0]
                  |L7.538|
;;;560                    }
;;;561                    
;;;562                    break;
00021a  e29d              B        |L7.1880|
;;;563                
;;;564                case DG_INIT_UP : //上电初始化过程，顶杆不在零位，先归零，然后再先上升一小段再归零
;;;565                    
;;;566                    if( dg_sta_c != dg_sta )
00021c  487e              LDR      r0,|L7.1048|
00021e  7800              LDRB     r0,[r0,#0]  ; dg_sta
000220  4284              CMP      r4,r0
000222  d006              BEQ      |L7.562|
;;;567                    {
;;;568                        dg_sta_c = dg_sta;
000224  487c              LDR      r0,|L7.1048|
000226  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;569                        SetTextValue(0,26,"检测归零传感器,上升...");
000228  a295              ADR      r2,|L7.1152|
00022a  211a              MOVS     r1,#0x1a
00022c  2000              MOVS     r0,#0
00022e  f7fffffe          BL       SetTextValue
                  |L7.562|
;;;570                    }
;;;571                    
;;;572                    if( !Tmy.Sensor.bit.bottom )//检测离开底部
000232  487b              LDR      r0,|L7.1056|
000234  79c0              LDRB     r0,[r0,#7]  ; Tmy
000236  f0000001          AND      r0,r0,#1
00023a  b910              CBNZ     r0,|L7.578|
;;;573                    {
;;;574                        dg_sta = DG_INIT_DOWN;//再次复位
00023c  2003              MOVS     r0,#3
00023e  4976              LDR      r1,|L7.1048|
000240  7008              STRB     r0,[r1,#0]
                  |L7.578|
;;;575                    }
;;;576                    
;;;577                    if( Tmy.Motor.state != MOTOR_UP ) //步进电机不是在上升
000242  4877              LDR      r0,|L7.1056|
000244  7800              LDRB     r0,[r0,#0]  ; Tmy
000246  2801              CMP      r0,#1
000248  d00a              BEQ      |L7.608|
;;;578                    {
;;;579                        MOTOR_Stop();//步进电机停止
00024a  f7fffffe          BL       MOTOR_Stop
;;;580                        MOTOR_SetDir( UP );//方向上升
00024e  2000              MOVS     r0,#0
000250  f7fffffe          BL       MOTOR_SetDir
;;;581                        MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度 XXX
000254  2086              MOVS     r0,#0x86
000256  f7fffffe          BL       MOTOR_SetSpeed
;;;582                        Tmy.Motor.state = MOTOR_UP;//更改步进电机状态
00025a  2001              MOVS     r0,#1
00025c  4970              LDR      r1,|L7.1056|
00025e  7008              STRB     r0,[r1,#0]
                  |L7.608|
;;;583                    }else //步进电机在上升
;;;584                    {
;;;585    //                    if( key_v == PEDAL_UP )//检测到脚踏抬起
;;;586    //                    {
;;;587    //                        dg_sta = DG_STOP;//停止
;;;588    //                    }
;;;589                    }
;;;590                    
;;;591                    break;
000260  e27a              B        |L7.1880|
;;;592                case DG_INIT_DOWN : //上电初始化过程，顶杆不在零位，先归零，然后再先上升一小段再归零
;;;593                    
;;;594                    if( dg_sta_c != dg_sta )
000262  486d              LDR      r0,|L7.1048|
000264  7800              LDRB     r0,[r0,#0]  ; dg_sta
000266  4284              CMP      r4,r0
000268  d006              BEQ      |L7.632|
;;;595                    {
;;;596                        dg_sta_c = dg_sta;
00026a  486b              LDR      r0,|L7.1048|
00026c  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;597                        SetTextValue(0,26,"顶杆归零...");
00026e  a28a              ADR      r2,|L7.1176|
000270  211a              MOVS     r1,#0x1a
000272  2000              MOVS     r0,#0
000274  f7fffffe          BL       SetTextValue
                  |L7.632|
;;;598                    }
;;;599                    
;;;600                    if( key_v == ZERO_DETECT )//检测到触底
000278  2e1d              CMP      r6,#0x1d
00027a  d10f              BNE      |L7.668|
;;;601                    {
;;;602                        Tmy.Sensor.bit.bottom = 1;
00027c  4868              LDR      r0,|L7.1056|
00027e  79c0              LDRB     r0,[r0,#7]  ; Tmy
000280  f0200001          BIC      r0,r0,#1
000284  1c40              ADDS     r0,r0,#1
000286  4966              LDR      r1,|L7.1056|
000288  71c8              STRB     r0,[r1,#7]
;;;603        		        MOTOR_Stop();
00028a  f7fffffe          BL       MOTOR_Stop
;;;604        		        Motor.counter_step = 0;
00028e  2000              MOVS     r0,#0
000290  495f              LDR      r1,|L7.1040|
000292  6048              STR      r0,[r1,#4]  ; Motor
;;;605        		        SetTextValue(0,18,"已触底");
000294  a283              ADR      r2,|L7.1188|
000296  2112              MOVS     r1,#0x12
000298  f7fffffe          BL       SetTextValue
                  |L7.668|
;;;606                    }
;;;607                    
;;;608                    if( Tmy.Sensor.bit.bottom )//到达底部
00029c  4860              LDR      r0,|L7.1056|
00029e  79c0              LDRB     r0,[r0,#7]  ; Tmy
0002a0  f0000001          AND      r0,r0,#1
0002a4  b1f8              CBZ      r0,|L7.742|
;;;609                    {
;;;610                        if( !count_init_down ) //第一次触底
0002a6  b95f              CBNZ     r7,|L7.704|
;;;611                        {
;;;612                            SetTextValue(0,26,"已触底");
0002a8  a27e              ADR      r2,|L7.1188|
0002aa  211a              MOVS     r1,#0x1a
0002ac  2000              MOVS     r0,#0
0002ae  f7fffffe          BL       SetTextValue
;;;613                            count_init_down++;
0002b2  1c78              ADDS     r0,r7,#1
0002b4  b2c7              UXTB     r7,r0
;;;614                            dg_sta = DG_INIT_UP;//上升一段
0002b6  2002              MOVS     r0,#2
0002b8  4957              LDR      r1,|L7.1048|
0002ba  7008              STRB     r0,[r1,#0]
0002bc  e022              B        |L7.772|
                  |L7.702|
0002be  e24a              B        |L7.1878|
                  |L7.704|
;;;615                        }else //第二次触底
;;;616                        {
;;;617                            SetBuzzer(100);
0002c0  2064              MOVS     r0,#0x64
0002c2  f7fffffe          BL       SetBuzzer
;;;618                            SetTextValue(0,26,"顶杆归零完成");
0002c6  a279              ADR      r2,|L7.1196|
0002c8  211a              MOVS     r1,#0x1a
0002ca  2000              MOVS     r0,#0
0002cc  f7fffffe          BL       SetTextValue
;;;619                            Tmy.State.bit.init = 1; //初始化完成
0002d0  4853              LDR      r0,|L7.1056|
0002d2  7980              LDRB     r0,[r0,#6]  ; Tmy
0002d4  f0200002          BIC      r0,r0,#2
0002d8  1c80              ADDS     r0,r0,#2
0002da  4951              LDR      r1,|L7.1056|
0002dc  7188              STRB     r0,[r1,#6]
;;;620                            dg_sta = DG_STOP_BOT;//停在底部
0002de  2005              MOVS     r0,#5
0002e0  494d              LDR      r1,|L7.1048|
0002e2  7008              STRB     r0,[r1,#0]
0002e4  e00e              B        |L7.772|
                  |L7.742|
;;;621                            //dev_sta = DEV_STANDBY;//设备待机  
;;;622                        }
;;;623                        
;;;624                    }else //未到达底部
;;;625                    {
;;;626                        if( Tmy.Motor.state != MOTOR_DOWN ) //步进电机不是在下降
0002e6  484e              LDR      r0,|L7.1056|
0002e8  7800              LDRB     r0,[r0,#0]  ; Tmy
0002ea  2802              CMP      r0,#2
0002ec  d00a              BEQ      |L7.772|
;;;627                        {
;;;628                            MOTOR_Stop();//步进电机停止
0002ee  f7fffffe          BL       MOTOR_Stop
;;;629                            MOTOR_SetDir( DOWN );//方向下降
0002f2  2001              MOVS     r0,#1
0002f4  f7fffffe          BL       MOTOR_SetDir
;;;630                            MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度 XXX
0002f8  2086              MOVS     r0,#0x86
0002fa  f7fffffe          BL       MOTOR_SetSpeed
;;;631                            Tmy.Motor.state = MOTOR_DOWN;//更改步进电机状态
0002fe  2002              MOVS     r0,#2
000300  4947              LDR      r1,|L7.1056|
000302  7008              STRB     r0,[r1,#0]
                  |L7.772|
;;;632                        }else //步进电机在下降
;;;633                        {
;;;634        //                    if( key_v == PEDAL_UP )//检测到脚踏抬起
;;;635        //                    {
;;;636        //                        dg_sta = DG_STOP;//停止
;;;637        //                    }
;;;638                        }
;;;639                    }
;;;640                    break;
000304  e228              B        |L7.1880|
;;;641                
;;;642                case DG_STOP_BOT : //停留在底部
;;;643                    //触底步数归零
;;;644                    MOTOR_ClrStep( );
000306  f7fffffe          BL       MOTOR_ClrStep
;;;645                    
;;;646                    if( dg_sta_c != dg_sta )
00030a  4843              LDR      r0,|L7.1048|
00030c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00030e  4284              CMP      r4,r0
000310  d006              BEQ      |L7.800|
;;;647                    {
;;;648                        dg_sta_c = dg_sta;
000312  4841              LDR      r0,|L7.1048|
000314  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;649                        SetTextValue(0,26,"触底待机");
000316  a269              ADR      r2,|L7.1212|
000318  211a              MOVS     r1,#0x1a
00031a  2000              MOVS     r0,#0
00031c  f7fffffe          BL       SetTextValue
                  |L7.800|
;;;650                    }
;;;651                    
;;;652                    if( Tmy.Motor.state != MOTOR_STOP ) //步进电机在运行
000320  483f              LDR      r0,|L7.1056|
000322  7800              LDRB     r0,[r0,#0]  ; Tmy
000324  b148              CBZ      r0,|L7.826|
;;;653                    {
;;;654                        MOTOR_Stop();//步进电机停止
000326  f7fffffe          BL       MOTOR_Stop
;;;655                        MOTOR_SetDir( UP );//方向上升
00032a  2000              MOVS     r0,#0
00032c  f7fffffe          BL       MOTOR_SetDir
;;;656                        Tmy.Motor.state = MOTOR_STOP;//更改步进电机状态
000330  2000              MOVS     r0,#0
000332  493b              LDR      r1,|L7.1056|
000334  7008              STRB     r0,[r1,#0]
;;;657                        MOTOR_ClrStep( ); //步数清零
000336  f7fffffe          BL       MOTOR_ClrStep
                  |L7.826|
;;;658                    }
;;;659                    
;;;660                    if( key_v == PEDAL_DOWN ) //检测到踩脚踏
00033a  2e19              CMP      r6,#0x19
00033c  d10b              BNE      |L7.854|
;;;661                    {
;;;662                        if( Tmy.Key.zdpk ) //自动排空
00033e  4838              LDR      r0,|L7.1056|
000340  7940              LDRB     r0,[r0,#5]  ; Tmy
000342  f3c00040          UBFX     r0,r0,#1,#1
000346  b118              CBZ      r0,|L7.848|
;;;663                        {
;;;664                           // SetTextValue(0,26,"自动排空...");
;;;665                            dg_sta = DG_ZDPK_UP;//顶杆上升
000348  2008              MOVS     r0,#8
00034a  4933              LDR      r1,|L7.1048|
00034c  7008              STRB     r0,[r1,#0]
00034e  e002              B        |L7.854|
                  |L7.848|
;;;666                        }else
;;;667                        //if( dev_sta == DEV_RUN )//设备运行状态
;;;668                        {
;;;669                            //SetTextValue(0,26,"顶杆上升...");
;;;670                            dg_sta = DG_UP;//顶杆上升
000350  2006              MOVS     r0,#6
000352  4931              LDR      r1,|L7.1048|
000354  7008              STRB     r0,[r1,#0]
                  |L7.854|
;;;671                        }
;;;672                    }
;;;673    //                if(  )//顶杆检查按键按下
;;;674    //                {
;;;675    //                    if( dev_sta == DEV_FIX )//顶杆检查
;;;676    //                    {
;;;677    //                        dg_sta = DG_FIX_UP;//顶杆检查上升
;;;678    //                    }
;;;679    //                }
;;;680                    
;;;681    //                if( key_v == PEDAL_DOWN )//检测到脚踏按下
;;;682    //                {
;;;683    //                    if( dev_sta == DEV_RUN )//设备运行状态
;;;684    //                    {
;;;685    //                        dg_sta = DG_UP;//顶杆上升
;;;686    //                    }else
;;;687    //                    if( dev_sta == DEV_FIX )//顶杆检查
;;;688    //                    {
;;;689    //                        dg_sta = DG_FIX_UP;//顶杆检查上升
;;;690    //                    }
;;;691    //                }
;;;692    
;;;693                    break;
000356  e1ff              B        |L7.1880|
;;;694                        
;;;695                case DG_STOP : //停止
;;;696                    
;;;697                    if( dg_sta_c != dg_sta )
000358  482f              LDR      r0,|L7.1048|
00035a  7800              LDRB     r0,[r0,#0]  ; dg_sta
00035c  4284              CMP      r4,r0
00035e  d006              BEQ      |L7.878|
;;;698                    {
;;;699                        dg_sta_c = dg_sta;
000360  482d              LDR      r0,|L7.1048|
000362  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;700                        SetTextValue(0,26,"待机");
000364  a256              ADR      r2,|L7.1216|
000366  211a              MOVS     r1,#0x1a
000368  2000              MOVS     r0,#0
00036a  f7fffffe          BL       SetTextValue
                  |L7.878|
;;;701                    }
;;;702                    
;;;703                    if( Tmy.Motor.state != MOTOR_STOP ) //步进电机在运行
00036e  482c              LDR      r0,|L7.1056|
000370  7800              LDRB     r0,[r0,#0]  ; Tmy
000372  b120              CBZ      r0,|L7.894|
;;;704                    {
;;;705                        MOTOR_Stop();//步进电机停止
000374  f7fffffe          BL       MOTOR_Stop
;;;706                        //MOTOR_SetDir( UP );//方向上升
;;;707                        Tmy.Motor.state = MOTOR_STOP;//更改步进电机状态
000378  2000              MOVS     r0,#0
00037a  4929              LDR      r1,|L7.1056|
00037c  7008              STRB     r0,[r1,#0]
                  |L7.894|
;;;708                        //MOTOR_ClrStep( ); //步数清零
;;;709                    }
;;;710                    
;;;711                    if( key_v == PEDAL_DOWN )//检测到脚踏按下
00037e  2e19              CMP      r6,#0x19
000380  d105              BNE      |L7.910|
;;;712                    {
;;;713                        //if( dev_sta == DEV_RUN )//设备运行状态
;;;714                        {
;;;715                            timer_pedal_down = 1; //开始脚踏按下计时
000382  2001              MOVS     r0,#1
000384  4927              LDR      r1,|L7.1060|
000386  7008              STRB     r0,[r1,#0]
;;;716                            dg_sta = DG_UP;//顶杆上升
000388  2006              MOVS     r0,#6
00038a  4923              LDR      r1,|L7.1048|
00038c  7008              STRB     r0,[r1,#0]
                  |L7.910|
;;;717                        }
;;;718                    }//else
;;;719    //                if( key_v == PEDAL_DOWN )//检测复位键按下
;;;720    //                {
;;;721    //                    if( )//设备运行状态
;;;722    //                    {
;;;723    //                        dg_sta = DG_RESET_DOWN;//复位下降
;;;724    //                    }
;;;725    //                    ;
;;;726    //                }
;;;727                    break;
00038e  e1e3              B        |L7.1880|
;;;728                    
;;;729                case DG_ZDPK_UP : //自动排空
;;;730                    
;;;731                    if( dg_sta_c != dg_sta )
000390  4821              LDR      r0,|L7.1048|
000392  7800              LDRB     r0,[r0,#0]  ; dg_sta
000394  4284              CMP      r4,r0
000396  d006              BEQ      |L7.934|
;;;732                    {
;;;733                        dg_sta_c = dg_sta;
000398  481f              LDR      r0,|L7.1048|
00039a  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;734                        SetTextValue(0,26,"自动排空...");
00039c  a24a              ADR      r2,|L7.1224|
00039e  211a              MOVS     r1,#0x1a
0003a0  2000              MOVS     r0,#0
0003a2  f7fffffe          BL       SetTextValue
                  |L7.934|
;;;735                    }
;;;736                    
;;;737                    if( Motor.counter_step > STEP_MAX_ZDPK ) //到达自动排空步数
0003a6  481a              LDR      r0,|L7.1040|
0003a8  6840              LDR      r0,[r0,#4]  ; Motor
0003aa  f6487189          MOV      r1,#0x8f89
0003ae  4288              CMP      r0,r1
0003b0  d90b              BLS      |L7.970|
;;;738                    {
;;;739                        dg_sta = DG_STOP;//电机停止
0003b2  e007              B        |L7.964|
0003b4  e1b4              B        |L7.1824|
0003b6  e192              B        |L7.1758|
0003b8  e12a              B        |L7.1552|
0003ba  e164              B        |L7.1670|
0003bc  e015              B        |L7.1002|
0003be  e0fe              B        |L7.1470|
0003c0  e08f              B        |L7.1250|
0003c2  e0da              B        |L7.1402|
                  |L7.964|
0003c4  2000              MOVS     r0,#0
0003c6  4914              LDR      r1,|L7.1048|
0003c8  7008              STRB     r0,[r1,#0]
                  |L7.970|
;;;740                    }
;;;741                    
;;;742                    if( Tmy.Motor.state != MOTOR_UP ) //步进电机不是在上升
0003ca  4815              LDR      r0,|L7.1056|
0003cc  7800              LDRB     r0,[r0,#0]  ; Tmy
0003ce  2801              CMP      r0,#1
0003d0  d00a              BEQ      |L7.1000|
;;;743                    {
;;;744                        MOTOR_Stop();//步进电机停止
0003d2  f7fffffe          BL       MOTOR_Stop
;;;745                        MOTOR_SetDir( UP );//方向上升
0003d6  2000              MOVS     r0,#0
0003d8  f7fffffe          BL       MOTOR_SetDir
;;;746                        MOTOR_SetSpeed( CYCLE_ZDPK ); //设置电机速
0003dc  2086              MOVS     r0,#0x86
0003de  f7fffffe          BL       MOTOR_SetSpeed
;;;747                        Tmy.Motor.state = MOTOR_UP;//更改步进电机状态
0003e2  2001              MOVS     r0,#1
0003e4  490e              LDR      r1,|L7.1056|
0003e6  7008              STRB     r0,[r1,#0]
                  |L7.1000|
;;;748                    }else //步进电机在上升
;;;749                    {
;;;750                        ;
;;;751                    }
;;;752                    
;;;753                    break;
0003e8  e1b6              B        |L7.1880|
                  |L7.1002|
;;;754                
;;;755                case DG_ECPK_UP : //二次排空
;;;756                    
;;;757                    if( Motor.counter_step > STEP_MAX_ECPK ) //到达自动排空步数
0003ea  4809              LDR      r0,|L7.1040|
0003ec  6840              LDR      r0,[r0,#4]  ; Motor
0003ee  f5b05f4d          CMP      r0,#0x3340
0003f2  d902              BLS      |L7.1018|
;;;758                    {
;;;759                        dg_sta = DG_STOP;//电机停止
0003f4  2000              MOVS     r0,#0
0003f6  4908              LDR      r1,|L7.1048|
0003f8  7008              STRB     r0,[r1,#0]
                  |L7.1018|
;;;760                    }
;;;761                    
;;;762                    if( Tmy.Motor.state != MOTOR_UP ) //步进电机不是在上升
0003fa  4809              LDR      r0,|L7.1056|
0003fc  7800              LDRB     r0,[r0,#0]  ; Tmy
0003fe  2801              CMP      r0,#1
000400  d06e              BEQ      |L7.1248|
;;;763                    {
;;;764                        MOTOR_Stop();//步进电机停止
000402  f7fffffe          BL       MOTOR_Stop
;;;765                        MOTOR_SetDir( UP );//方向上升
000406  2000              MOVS     r0,#0
000408  f7fffffe          BL       MOTOR_SetDir
;;;766                        MOTOR_SetSpeed( CYCLE_ZDPK ); //设置电机速度 XXX
00040c  2086              MOVS     r0,#0x86
00040e  e062              B        |L7.1238|
                  |L7.1040|
                          DCD      Motor
                  |L7.1044|
                          DCD      dev_sta
                  |L7.1048|
                          DCD      dg_sta
                  |L7.1052|
                          DCD      timer_pedal_up
                  |L7.1056|
                          DCD      Tmy
                  |L7.1060|
                          DCD      timer_pedal_down
                  |L7.1064|
000428  d7d4b6af          DCB      215,212,182,175,184,248,210,169,200,161,207,251,0
00042c  b8f8d2a9
000430  c8a1cffb
000434  00      
000435  00                DCB      0
000436  00                DCB      0
000437  00                DCB      0
                  |L7.1080|
                          DCD      MOTOR_SPEED_INDEX
                  |L7.1084|
                          DCD      MOTOR_SPEED_CYCLE
                  |L7.1088|
                          DCD      MOTOR_SPEED_DISPLAY
                  |L7.1092|
000444  cda3d6b9          DCB      205,163,214,185,0
000448  00      
000449  00                DCB      0
00044a  00                DCB      0
00044b  00                DCB      0
                  |L7.1100|
00044c  d7d4b6af          DCB      215,212,182,175,184,248,210,169,"...",0
000450  b8f8d2a9
000454  2e2e2e00
                  |L7.1112|
000458  613a2f73          DCB      "a:/sounds/zdgy.mp3",0
00045c  6f756e64
000460  732f7a64
000464  67792e6d
000468  703300  
00046b  00                DCB      0
                  |L7.1132|
                          DCD      lg_lcd_init
                  |L7.1136|
000470  4c4344b3          DCB      "LCD",179,245,202,188,187,175,205,234,179,201,161,163,0
000474  f5cabcbb
000478  afcdeab3
00047c  c9a1a300
                  |L7.1152|
000480  bcecb2e2          DCB      188,236,178,226,185,233,193,227,180,171,184,208,198,247,","
000484  b9e9c1e3
000488  b4abb8d0
00048c  c6f72c  
00048f  c9cfc9fd          DCB      201,207,201,253,"...",0
000493  2e2e2e00
000497  00                DCB      0
                  |L7.1176|
000498  b6a5b8cb          DCB      182,165,184,203,185,233,193,227,"...",0
00049c  b9e9c1e3
0004a0  2e2e2e00
                  |L7.1188|
0004a4  d2d1b4a5          DCB      210,209,180,165,181,215,0
0004a8  b5d700  
0004ab  00                DCB      0
                  |L7.1196|
0004ac  b6a5b8cb          DCB      182,165,184,203,185,233,193,227,205,234,179,201,0
0004b0  b9e9c1e3
0004b4  cdeab3c9
0004b8  00      
0004b9  00                DCB      0
0004ba  00                DCB      0
0004bb  00                DCB      0
                  |L7.1212|
0004bc  b4a5b5d7          DCB      180,165,181,215
                  |L7.1216|
0004c0  b4fdbbfa          DCB      180,253,187,250,0
0004c4  00      
0004c5  00                DCB      0
0004c6  00                DCB      0
0004c7  00                DCB      0
                  |L7.1224|
0004c8  d7d4b6af          DCB      215,212,182,175,197,197,191,213,"...",0
0004cc  c5c5bfd5
0004d0  2e2e2e00
0004d4  e004              B        |L7.1248|
                  |L7.1238|
0004d6  f7fffffe          BL       MOTOR_SetSpeed
;;;767                        Tmy.Motor.state = MOTOR_UP;//更改步进电机状态
0004da  2001              MOVS     r0,#1
0004dc  499f              LDR      r1,|L7.1884|
0004de  7008              STRB     r0,[r1,#0]
                  |L7.1248|
;;;768                    }else //步进电机在上升
;;;769                    {
;;;770                        ;
;;;771                    }
;;;772                    
;;;773                    break;
0004e0  e13a              B        |L7.1880|
                  |L7.1250|
;;;774                    
;;;775                case DG_UP : //顶杆上升
;;;776                    
;;;777                    if( dg_sta_c != dg_sta )
0004e2  489f              LDR      r0,|L7.1888|
0004e4  7800              LDRB     r0,[r0,#0]  ; dg_sta
0004e6  4284              CMP      r4,r0
0004e8  d006              BEQ      |L7.1272|
;;;778                    {
;;;779                        dg_sta_c = dg_sta;
0004ea  489d              LDR      r0,|L7.1888|
0004ec  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;780                        SetTextValue(0,26,"顶杆上升...");
0004ee  a29d              ADR      r2,|L7.1892|
0004f0  211a              MOVS     r1,#0x1a
0004f2  2000              MOVS     r0,#0
0004f4  f7fffffe          BL       SetTextValue
                  |L7.1272|
;;;781                    }
;;;782                    
;;;783                    if( ( Motor.counter_step >= Motor.max_step ) //到达顶部
0004f8  489d              LDR      r0,|L7.1904|
0004fa  6840              LDR      r0,[r0,#4]  ; Motor
0004fc  499c              LDR      r1,|L7.1904|
0004fe  6889              LDR      r1,[r1,#8]  ; Motor
000500  4288              CMP      r0,r1
000502  d204              BCS      |L7.1294|
;;;784                     || ( Tmy.Sensor.bit.top ) )
000504  4895              LDR      r0,|L7.1884|
000506  79c0              LDRB     r0,[r0,#7]  ; Tmy
000508  f3c00040          UBFX     r0,r0,#1,#1
00050c  b128              CBZ      r0,|L7.1306|
                  |L7.1294|
;;;785                    {
;;;786                        MOTOR_Stop();//这个是冗余操作，多一次保护
00050e  f7fffffe          BL       MOTOR_Stop
;;;787                        dg_sta = DG_STOP_TOP;//停留在顶部
000512  2004              MOVS     r0,#4
000514  4992              LDR      r1,|L7.1888|
000516  7008              STRB     r0,[r1,#0]
000518  e02e              B        |L7.1400|
                  |L7.1306|
;;;788                    }else
;;;789                    {
;;;790                        if( Tmy.Motor.state != MOTOR_UP ) //步进电机未上升
00051a  4890              LDR      r0,|L7.1884|
00051c  7800              LDRB     r0,[r0,#0]  ; Tmy
00051e  2801              CMP      r0,#1
000520  d02a              BEQ      |L7.1400|
;;;791                        {
;;;792                            Motor.speed = 1;
000522  2001              MOVS     r0,#1
000524  4992              LDR      r1,|L7.1904|
000526  7008              STRB     r0,[r1,#0]
;;;793                            tem8 = MOTOR_SPEED_INDEX[Motor.gear][Motor.speed-1];
000528  4608              MOV      r0,r1
00052a  7840              LDRB     r0,[r0,#1]  ; Motor
00052c  eb000040          ADD      r0,r0,r0,LSL #1
000530  4990              LDR      r1,|L7.1908|
000532  eb010140          ADD      r1,r1,r0,LSL #1
000536  488e              LDR      r0,|L7.1904|
000538  7800              LDRB     r0,[r0,#0]  ; Motor
00053a  1e40              SUBS     r0,r0,#1
00053c  f8115010          LDRB     r5,[r1,r0,LSL #1]
;;;794            	            Tmy.speed = tem8;
000540  4886              LDR      r0,|L7.1884|
000542  7105              STRB     r5,[r0,#4]
;;;795            	             
;;;796            	            MOTOR_SetSpeed( MOTOR_SPEED_CYCLE[tem8] ); //设置电机速度
000544  498c              LDR      r1,|L7.1912|
000546  f8310015          LDRH     r0,[r1,r5,LSL #1]
00054a  f7fffffe          BL       MOTOR_SetSpeed
;;;797            	            SetTextValue(0, 16, &MOTOR_SPEED_DISPLAY[tem8][0]); 
00054e  eb0500c5          ADD      r0,r5,r5,LSL #3
000552  498a              LDR      r1,|L7.1916|
000554  1842              ADDS     r2,r0,r1
000556  2110              MOVS     r1,#0x10
000558  2000              MOVS     r0,#0
00055a  f7fffffe          BL       SetTextValue
;;;798        	            
;;;799                            MOTOR_Stop(); //电机暂停
00055e  f7fffffe          BL       MOTOR_Stop
;;;800                            MOTOR_SetDir( UP ); //设置电机方向
000562  2000              MOVS     r0,#0
000564  f7fffffe          BL       MOTOR_SetDir
;;;801                            MOTOR_SetSpeed( MOTOR_SPEED_CYCLE[tem8] ); //设置电机速度，运行
000568  4983              LDR      r1,|L7.1912|
00056a  f8310015          LDRH     r0,[r1,r5,LSL #1]
00056e  f7fffffe          BL       MOTOR_SetSpeed
;;;802                            
;;;803                            //SetTextValue(0,18,"顶杆检查上升"); //更新提示
;;;804                        
;;;805                            Tmy.Motor.state = MOTOR_UP;//
000572  2001              MOVS     r0,#1
000574  4979              LDR      r1,|L7.1884|
000576  7008              STRB     r0,[r1,#0]
                  |L7.1400|
;;;806                        }
;;;807                    }
;;;808                    
;;;809    //                if( Tmy.Motor.state != MOTOR_UP ) //步进电机不是在上升
;;;810    //                {
;;;811    //                    MOTOR_Stop();//步进电机停止
;;;812    //                    MOTOR_SetDir( UP );//方向上升
;;;813    //                    MOTOR_SetSpeed( CYCLE_KSJ ); //设置电机速度 XXX
;;;814    //                    Tmy.Motor.state = MOTOR_UP;//更改步进电机状态
;;;815    //                }else //步进电机在上升
;;;816    //                {
;;;817    //                    if( key_v == PEDAL_UP )//检测到脚踏抬起
;;;818    //                    {
;;;819    //                        dg_sta = DG_STOP;//停止
;;;820    //                    }
;;;821    //                }
;;;822                    
;;;823                    break;
000578  e0ee              B        |L7.1880|
                  |L7.1402|
;;;824                
;;;825                case DG_STOP_TOP : //停留在顶部
;;;826                    
;;;827                    if( dg_sta_c != dg_sta )
00057a  4879              LDR      r0,|L7.1888|
00057c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00057e  4284              CMP      r4,r0
000580  d006              BEQ      |L7.1424|
;;;828                    {
;;;829                        dg_sta_c = dg_sta;
000582  4877              LDR      r0,|L7.1888|
000584  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;830                        SetTextValue(0,26,"到顶停机待机");
000586  a27e              ADR      r2,|L7.1920|
000588  211a              MOVS     r1,#0x1a
00058a  2000              MOVS     r0,#0
00058c  f7fffffe          BL       SetTextValue
                  |L7.1424|
;;;831                    }
;;;832                    
;;;833                    if( Tmy.Motor.state != MOTOR_STOP ) //步进电机在运行
000590  4872              LDR      r0,|L7.1884|
000592  7800              LDRB     r0,[r0,#0]  ; Tmy
000594  b138              CBZ      r0,|L7.1446|
;;;834                    {
;;;835                        MOTOR_Stop();//电机暂停
000596  f7fffffe          BL       MOTOR_Stop
;;;836                        MOTOR_SetDir( DOWN ); //方向下降
00059a  2001              MOVS     r0,#1
00059c  f7fffffe          BL       MOTOR_SetDir
;;;837                        Tmy.Motor.state = MOTOR_STOP;//更改电机状态
0005a0  2000              MOVS     r0,#0
0005a2  496e              LDR      r1,|L7.1884|
0005a4  7008              STRB     r0,[r1,#0]
                  |L7.1446|
;;;838                    }
;;;839                    
;;;840                    if( key_v == PEDAL_DOWN ) //检测到踩脚踏 // || ( key_v == PEDAL_DOWN ) ) //或 按复位键
0005a6  2e19              CMP      r6,#0x19
0005a8  d108              BNE      |L7.1468|
;;;841                    {
;;;842                        //if( dev_sta == DEV_RUN )//设备运行状态
;;;843                        {
;;;844                            SetTextValue(0,26,"顶杆归零...");
0005aa  f2af1214          ADR      r2,|L7.1176|
0005ae  211a              MOVS     r1,#0x1a
0005b0  2000              MOVS     r0,#0
0005b2  f7fffffe          BL       SetTextValue
;;;845                            dg_sta = DG_FIX_DOWN;//顶杆归零
0005b6  200f              MOVS     r0,#0xf
0005b8  4969              LDR      r1,|L7.1888|
0005ba  7008              STRB     r0,[r1,#0]
                  |L7.1468|
;;;846                        }
;;;847                    }
;;;848                    
;;;849    				if( 1 )//在xxx速度下，到顶后自动归零
;;;850    				{
;;;851    					;
;;;852    				}
;;;853    				
;;;854                    break;
0005bc  e0cc              B        |L7.1880|
                  |L7.1470|
;;;855                    
;;;856                case DG_DOWN : //顶杆下降 可能没有此状态！！！
;;;857                    
;;;858                    if( dg_sta_c != dg_sta )
0005be  4868              LDR      r0,|L7.1888|
0005c0  7800              LDRB     r0,[r0,#0]  ; dg_sta
0005c2  4284              CMP      r4,r0
0005c4  d006              BEQ      |L7.1492|
;;;859                    {
;;;860                        dg_sta_c = dg_sta;
0005c6  4866              LDR      r0,|L7.1888|
0005c8  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;861                        SetTextValue(0,26,"顶杆下降...");
0005ca  a271              ADR      r2,|L7.1936|
0005cc  211a              MOVS     r1,#0x1a
0005ce  2000              MOVS     r0,#0
0005d0  f7fffffe          BL       SetTextValue
                  |L7.1492|
;;;862                    }
;;;863                    
;;;864                    if(Tmy.Sensor.bit.bottom) //到达底部
0005d4  4861              LDR      r0,|L7.1884|
0005d6  79c0              LDRB     r0,[r0,#7]  ; Tmy
0005d8  f0000001          AND      r0,r0,#1
0005dc  b110              CBZ      r0,|L7.1508|
;;;865                    {
;;;866                        dg_sta = DG_STOP_TOP;//停留在底部
0005de  2004              MOVS     r0,#4
0005e0  495f              LDR      r1,|L7.1888|
0005e2  7008              STRB     r0,[r1,#0]
                  |L7.1508|
;;;867                    }
;;;868                    
;;;869                    if( Tmy.Motor.state != MOTOR_DOWN ) //步进电机不是在下降
0005e4  485d              LDR      r0,|L7.1884|
0005e6  7800              LDRB     r0,[r0,#0]  ; Tmy
0005e8  2802              CMP      r0,#2
0005ea  d00b              BEQ      |L7.1540|
;;;870                    {
;;;871                        MOTOR_Stop();//步进电机停止
0005ec  f7fffffe          BL       MOTOR_Stop
;;;872                        MOTOR_SetDir( DOWN );//方向上升
0005f0  2001              MOVS     r0,#1
0005f2  f7fffffe          BL       MOTOR_SetDir
;;;873                        MOTOR_SetSpeed( CYCLE_DGJC ); //设置电机速度 XXX
0005f6  2026              MOVS     r0,#0x26
0005f8  f7fffffe          BL       MOTOR_SetSpeed
;;;874                        Tmy.Motor.state = MOTOR_DOWN;//更改步进电机状态
0005fc  2002              MOVS     r0,#2
0005fe  4957              LDR      r1,|L7.1884|
000600  7008              STRB     r0,[r1,#0]
000602  e004              B        |L7.1550|
                  |L7.1540|
;;;875                    }else //步进电机在下降
;;;876                    {
;;;877                        if( key_v == PEDAL_UP )//检测到脚踏抬起
000604  2e1a              CMP      r6,#0x1a
000606  d102              BNE      |L7.1550|
;;;878                        {
;;;879                            dg_sta = DG_STOP;//停止
000608  2000              MOVS     r0,#0
00060a  4955              LDR      r1,|L7.1888|
00060c  7008              STRB     r0,[r1,#0]
                  |L7.1550|
;;;880                        }
;;;881                    }
;;;882                    break;
00060e  e0a3              B        |L7.1880|
                  |L7.1552|
;;;883                    
;;;884                case DG_HX_DOWN : //回吸下降
;;;885    			
;;;886                    if( dg_sta_c != dg_sta )
000610  4853              LDR      r0,|L7.1888|
000612  7800              LDRB     r0,[r0,#0]  ; dg_sta
000614  4284              CMP      r4,r0
000616  d006              BEQ      |L7.1574|
;;;887                    {
;;;888                        dg_sta_c = dg_sta;
000618  4851              LDR      r0,|L7.1888|
00061a  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;889                        SetTextValue(0,26,"回吸下降...");
00061c  a25f              ADR      r2,|L7.1948|
00061e  211a              MOVS     r1,#0x1a
000620  2000              MOVS     r0,#0
000622  f7fffffe          BL       SetTextValue
                  |L7.1574|
;;;890                    }
;;;891                    
;;;892                    if( Motor.counter_step < Motor.counter_hx_step-1 )//到达回吸底部
000626  4852              LDR      r0,|L7.1904|
000628  6841              LDR      r1,[r0,#4]  ; Motor
00062a  68c0              LDR      r0,[r0,#0xc]  ; Motor
00062c  1e40              SUBS     r0,r0,#1
00062e  4281              CMP      r1,r0
000630  d214              BCS      |L7.1628|
;;;893                    {
;;;894                        MOTOR_Stop();//电机停止
000632  f7fffffe          BL       MOTOR_Stop
;;;895                        Motor.counter_hx_step = Motor.counter_step + Motor.max_hx_step;
000636  484e              LDR      r0,|L7.1904|
000638  6840              LDR      r0,[r0,#4]  ; Motor
00063a  494d              LDR      r1,|L7.1904|
00063c  6909              LDR      r1,[r1,#0x10]  ; Motor
00063e  4408              ADD      r0,r0,r1
000640  494b              LDR      r1,|L7.1904|
000642  60c8              STR      r0,[r1,#0xc]  ; Motor
;;;896                        
;;;897                        if( Tmy.speed == SLOW )   //常慢速
000644  4845              LDR      r0,|L7.1884|
000646  7900              LDRB     r0,[r0,#4]  ; Tmy
000648  2801              CMP      r0,#1
00064a  d103              BNE      |L7.1620|
;;;898                        {
;;;899                            vTaskDelay(pdMS_TO_TICKS(1000));//延时1秒
00064c  f44f707a          MOV      r0,#0x3e8
000650  f7fffffe          BL       vTaskDelay
                  |L7.1620|
;;;900                        }
;;;901                        dg_sta = DG_HX_UP;//
000654  200a              MOVS     r0,#0xa
000656  4942              LDR      r1,|L7.1888|
000658  7008              STRB     r0,[r1,#0]
00065a  e013              B        |L7.1668|
                  |L7.1628|
;;;902                    }else
;;;903                    {
;;;904                        if( Tmy.Motor.state != MOTOR_DOWN ) //步进电机未下降
00065c  483f              LDR      r0,|L7.1884|
00065e  7800              LDRB     r0,[r0,#0]  ; Tmy
000660  2802              CMP      r0,#2
000662  d00f              BEQ      |L7.1668|
;;;905                        {
;;;906                            MOTOR_Stop(); //电机暂停
000664  f7fffffe          BL       MOTOR_Stop
;;;907                            MOTOR_SetDir( DOWN ); //设置电机方向
000668  2001              MOVS     r0,#1
00066a  f7fffffe          BL       MOTOR_SetDir
;;;908                            MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度，运行
00066e  2086              MOVS     r0,#0x86
000670  f7fffffe          BL       MOTOR_SetSpeed
;;;909                            SetTextValue(0,18,"回吸下降"); //更新提示
000674  a24c              ADR      r2,|L7.1960|
000676  2112              MOVS     r1,#0x12
000678  2000              MOVS     r0,#0
00067a  f7fffffe          BL       SetTextValue
;;;910                            Tmy.Motor.state = MOTOR_DOWN;//
00067e  2002              MOVS     r0,#2
000680  4936              LDR      r1,|L7.1884|
000682  7008              STRB     r0,[r1,#0]
                  |L7.1668|
;;;911                        }
;;;912                    }
;;;913                    
;;;914    //	            if( Motor.counter_step > Motor.counter_hx_step ) //
;;;915    //	            {
;;;916    //	                ;//行进中
;;;917    //	            }else //到达回吸底部
;;;918    //	            {
;;;919    //	                MOTOR_Stop();
;;;920    //	                dg_sta = DG_HX_UP;//
;;;921    //                    Motor.counter_hx_step = Motor.counter_step + Motor.max_hx_step;
;;;922    //                    MOTOR_SetDir( UP );
;;;923    //	                MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度
;;;924    //                    SetTextValue(0,18,"回吸上升");
;;;925    //                    if( Tmy.speed == SLOW )   //常慢速
;;;926    //                    {
;;;927    //                        vTaskDelay(pdMS_TO_TICKS(1000));//延时1秒
;;;928    //                    }
;;;929    //	            }
;;;930    	            
;;;931    	            break;
000684  e068              B        |L7.1880|
                  |L7.1670|
;;;932    	            
;;;933    	        case DG_HX_UP : //回吸上升
;;;934    	            
;;;935    	            if( dg_sta_c != dg_sta )
000686  4836              LDR      r0,|L7.1888|
000688  7800              LDRB     r0,[r0,#0]  ; dg_sta
00068a  4284              CMP      r4,r0
00068c  d006              BEQ      |L7.1692|
;;;936                    {
;;;937                        dg_sta_c = dg_sta;
00068e  4834              LDR      r0,|L7.1888|
000690  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;938                        SetTextValue(0,26,"回吸上升...");
000692  a248              ADR      r2,|L7.1972|
000694  211a              MOVS     r1,#0x1a
000696  2000              MOVS     r0,#0
000698  f7fffffe          BL       SetTextValue
                  |L7.1692|
;;;939                    }
;;;940                    
;;;941                    if( Motor.counter_step > Motor.counter_hx_step-1 )//到达回吸顶部
00069c  4834              LDR      r0,|L7.1904|
00069e  6841              LDR      r1,[r0,#4]  ; Motor
0006a0  68c0              LDR      r0,[r0,#0xc]  ; Motor
0006a2  1e40              SUBS     r0,r0,#1
0006a4  4281              CMP      r1,r0
0006a6  d905              BLS      |L7.1716|
;;;942                    {
;;;943                        MOTOR_Stop(); //电机停止
0006a8  f7fffffe          BL       MOTOR_Stop
;;;944                        //Tmy.state.bit.hx = 0;
;;;945                        dg_sta = DG_STOP; //
0006ac  2000              MOVS     r0,#0
0006ae  492c              LDR      r1,|L7.1888|
0006b0  7008              STRB     r0,[r1,#0]
0006b2  e013              B        |L7.1756|
                  |L7.1716|
;;;946                    }else
;;;947                    {
;;;948                        if( Tmy.Motor.state != MOTOR_UP ) //步进电机未下降
0006b4  4829              LDR      r0,|L7.1884|
0006b6  7800              LDRB     r0,[r0,#0]  ; Tmy
0006b8  2801              CMP      r0,#1
0006ba  d00f              BEQ      |L7.1756|
;;;949                        {
;;;950                            MOTOR_Stop(); //电机暂停
0006bc  f7fffffe          BL       MOTOR_Stop
;;;951                            MOTOR_SetDir( UP ); //设置电机方向
0006c0  2000              MOVS     r0,#0
0006c2  f7fffffe          BL       MOTOR_SetDir
;;;952                            MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度，运行
0006c6  2086              MOVS     r0,#0x86
0006c8  f7fffffe          BL       MOTOR_SetSpeed
;;;953                            SetTextValue(0,18,"回吸上升"); //更新提示
0006cc  a23c              ADR      r2,|L7.1984|
0006ce  2112              MOVS     r1,#0x12
0006d0  2000              MOVS     r0,#0
0006d2  f7fffffe          BL       SetTextValue
;;;954                            Tmy.Motor.state = MOTOR_UP;//
0006d6  2001              MOVS     r0,#1
0006d8  4920              LDR      r1,|L7.1884|
0006da  7008              STRB     r0,[r1,#0]
                  |L7.1756|
;;;955                        }
;;;956                    }
;;;957                    
;;;958    //	            if( Motor.counter_step < Motor.counter_hx_step ) 
;;;959    //	            {
;;;960    //	                ;//行进中
;;;961    //	            }else //到达回吸顶部
;;;962    //	            {
;;;963    //	                MOTOR_Stop();
;;;964    //	                Tmy.state.bit.hx = 0;
;;;965    //	                Tmy.work_state = STA_STANDBY;
;;;966    //	            }
;;;967    	            
;;;968    	            break;
0006dc  e03c              B        |L7.1880|
                  |L7.1758|
;;;969    	            
;;;970                case DG_FIX_UP : //顶杆检查上升
;;;971                    
;;;972                    if( ( Motor.counter_step >= Motor.max_step ) //到达顶部
0006de  4824              LDR      r0,|L7.1904|
0006e0  6840              LDR      r0,[r0,#4]  ; Motor
0006e2  4923              LDR      r1,|L7.1904|
0006e4  6889              LDR      r1,[r1,#8]  ; Motor
0006e6  4288              CMP      r0,r1
0006e8  d204              BCS      |L7.1780|
;;;973                     || ( Tmy.Sensor.bit.top ) )
0006ea  481c              LDR      r0,|L7.1884|
0006ec  79c0              LDRB     r0,[r0,#7]  ; Tmy
0006ee  f3c00040          UBFX     r0,r0,#1,#1
0006f2  b128              CBZ      r0,|L7.1792|
                  |L7.1780|
;;;974                    {
;;;975                        MOTOR_Stop();//这个是冗余操作，多一次保护
0006f4  f7fffffe          BL       MOTOR_Stop
;;;976                        dg_sta = DG_STOP_TOP;//停留在顶部
0006f8  2004              MOVS     r0,#4
0006fa  4919              LDR      r1,|L7.1888|
0006fc  7008              STRB     r0,[r1,#0]
0006fe  e00e              B        |L7.1822|
                  |L7.1792|
;;;977                    }else
;;;978                    {
;;;979                        if( Tmy.Motor.state != MOTOR_UP ) //步进电机未上升
000700  4816              LDR      r0,|L7.1884|
000702  7800              LDRB     r0,[r0,#0]  ; Tmy
000704  2801              CMP      r0,#1
000706  d00a              BEQ      |L7.1822|
;;;980                        {
;;;981                            MOTOR_Stop(); //电机暂停
000708  f7fffffe          BL       MOTOR_Stop
;;;982                            MOTOR_SetDir( UP ); //设置电机方向
00070c  2000              MOVS     r0,#0
00070e  f7fffffe          BL       MOTOR_SetDir
;;;983                            MOTOR_SetSpeed( CYCLE_DGJC ); //设置电机速度，运行
000712  2026              MOVS     r0,#0x26
000714  f7fffffe          BL       MOTOR_SetSpeed
;;;984                            //SetTextValue(0,18,"顶杆检查上升"); //更新提示
;;;985                        
;;;986                            Tmy.Motor.state = MOTOR_UP;//
000718  2001              MOVS     r0,#1
00071a  4910              LDR      r1,|L7.1884|
00071c  7008              STRB     r0,[r1,#0]
                  |L7.1822|
;;;987                        }
;;;988                    }
;;;989                    
;;;990                    break;
00071e  e01b              B        |L7.1880|
                  |L7.1824|
;;;991                    
;;;992                case DG_FIX_DOWN : //顶杆检查下降
;;;993                    
;;;994                    if( Tmy.Sensor.bit.bottom )//检测到底
000720  480e              LDR      r0,|L7.1884|
000722  79c0              LDRB     r0,[r0,#7]  ; Tmy
000724  f0000001          AND      r0,r0,#1
000728  b128              CBZ      r0,|L7.1846|
;;;995                    {
;;;996                        MOTOR_Stop();//这个是冗余操作，多一次保护
00072a  f7fffffe          BL       MOTOR_Stop
;;;997                        dg_sta = DG_STOP_BOT;//
00072e  2005              MOVS     r0,#5
000730  490b              LDR      r1,|L7.1888|
000732  7008              STRB     r0,[r1,#0]
000734  e00e              B        |L7.1876|
                  |L7.1846|
;;;998                    }else
;;;999                    {
;;;1000                       if( Tmy.Motor.state != MOTOR_DOWN ) //步进电机未下降
000736  4809              LDR      r0,|L7.1884|
000738  7800              LDRB     r0,[r0,#0]  ; Tmy
00073a  2802              CMP      r0,#2
00073c  d00a              BEQ      |L7.1876|
;;;1001                       {
;;;1002                           MOTOR_Stop(); //电机暂停
00073e  f7fffffe          BL       MOTOR_Stop
;;;1003                           MOTOR_SetDir( DOWN ); //设置电机方向
000742  2001              MOVS     r0,#1
000744  f7fffffe          BL       MOTOR_SetDir
;;;1004                           MOTOR_SetSpeed( CYCLE_DGJC ); //设置电机速度，运行
000748  2026              MOVS     r0,#0x26
00074a  f7fffffe          BL       MOTOR_SetSpeed
;;;1005                           //SetTextValue(0,18,"顶杆检查下降"); //更新提示
;;;1006                       
;;;1007                           Tmy.Motor.state = MOTOR_DOWN;//
00074e  2002              MOVS     r0,#2
000750  4902              LDR      r1,|L7.1884|
000752  7008              STRB     r0,[r1,#0]
                  |L7.1876|
;;;1008                       }
;;;1009                   }
;;;1010                   
;;;1011                   break;
000754  e000              B        |L7.1880|
                  |L7.1878|
;;;1012               
;;;1013               default : 
;;;1014                   break;
000756  bf00              NOP      
                  |L7.1880|
000758  bf00              NOP                            ;562
                  |L7.1882|
00075a  e466              B        |L7.42|
;;;1015           }
;;;1016           
;;;1017       }
;;;1018   }
;;;1019   
                          ENDP

                  |L7.1884|
                          DCD      Tmy
                  |L7.1888|
                          DCD      dg_sta
                  |L7.1892|
000764  b6a5b8cb          DCB      182,165,184,203,201,207,201,253,"...",0
000768  c9cfc9fd
00076c  2e2e2e00
                  |L7.1904|
                          DCD      Motor
                  |L7.1908|
                          DCD      MOTOR_SPEED_INDEX
                  |L7.1912|
                          DCD      MOTOR_SPEED_CYCLE
                  |L7.1916|
                          DCD      MOTOR_SPEED_DISPLAY
                  |L7.1920|
000780  b5bdb6a5          DCB      181,189,182,165,205,163,187,250,180,253,187,250,0
000784  cda3bbfa
000788  b4fdbbfa
00078c  00      
00078d  00                DCB      0
00078e  00                DCB      0
00078f  00                DCB      0
                  |L7.1936|
000790  b6a5b8cb          DCB      182,165,184,203,207,194,189,181,"...",0
000794  cfc2bdb5
000798  2e2e2e00
                  |L7.1948|
00079c  bbd8cefc          DCB      187,216,206,252,207,194,189,181,"...",0
0007a0  cfc2bdb5
0007a4  2e2e2e00
                  |L7.1960|
0007a8  bbd8cefc          DCB      187,216,206,252,207,194,189,181,0
0007ac  cfc2bdb5
0007b0  00      
0007b1  00                DCB      0
0007b2  00                DCB      0
0007b3  00                DCB      0
                  |L7.1972|
0007b4  bbd8cefc          DCB      187,216,206,252,201,207,201,253,"...",0
0007b8  c9cfc9fd
0007bc  2e2e2e00
                  |L7.1984|
0007c0  bbd8cefc          DCB      187,216,206,252,201,207,201,253,0
0007c4  c9cfc9fd
0007c8  00      
0007c9  00                DCB      0
0007ca  00                DCB      0
0007cb  00                DCB      0

                          AREA ||i.vTaskSensor||, CODE, READONLY, ALIGN=2

                  vTaskSensor PROC
;;;230    */
;;;231    static void vTaskSensor(void *pvParameters)
000000  e07c              B        |L8.252|
                  |L8.2|
;;;232    {
;;;233    	
;;;234    //    SoftWdtInit( vTaskSensor_ID, 10 );
;;;235        
;;;236        //timer_sensor = 4;
;;;237        while( 1 )
;;;238        {
;;;239    //        SoftWdtFed( vTaskSensor_ID );
;;;240            
;;;241            vTaskDelay( pdMS_TO_TICKS(1000) );//vTaskDelay( 2 );
000002  f44f707a          MOV      r0,#0x3e8
000006  f7fffffe          BL       vTaskDelay
;;;242            
;;;243            ADC1_GetV();
00000a  f7fffffe          BL       ADC1_GetV
;;;244            Tmy.pressure = HX711_Read();
00000e  f7fffffe          BL       HX711_Read
000012  493b              LDR      r1,|L8.256|
000014  60c8              STR      r0,[r1,#0xc]  ; Tmy
;;;245            
;;;246            //bsp_KeyScan();
;;;247            
;;;248            if( bsp_GetKeyState( KID_ZERO ) ) //触底检测
000016  2009              MOVS     r0,#9
000018  f7fffffe          BL       bsp_GetKeyState
00001c  b130              CBZ      r0,|L8.44|
;;;249            {
;;;250                Tmy.Sensor.bit.bottom = 0; //未触底
00001e  4838              LDR      r0,|L8.256|
000020  79c0              LDRB     r0,[r0,#7]  ; Tmy
000022  f0200001          BIC      r0,r0,#1
000026  4936              LDR      r1,|L8.256|
000028  71c8              STRB     r0,[r1,#7]
00002a  e006              B        |L8.58|
                  |L8.44|
;;;251            }else
;;;252            {
;;;253                Tmy.Sensor.bit.bottom = 1; //已触底
00002c  4834              LDR      r0,|L8.256|
00002e  79c0              LDRB     r0,[r0,#7]  ; Tmy
000030  f0200001          BIC      r0,r0,#1
000034  1c40              ADDS     r0,r0,#1
000036  4932              LDR      r1,|L8.256|
000038  71c8              STRB     r0,[r1,#7]
                  |L8.58|
;;;254            }
;;;255            
;;;256            //if( Motor.counter_step > Motor.counter_hx_step-1 ) //触顶检测 //if( bsp_GetKeyState( KID_ZERO ) ) 
;;;257            if( Motor.counter_step >= Motor.max_step )//触顶检测
00003a  4832              LDR      r0,|L8.260|
00003c  6840              LDR      r0,[r0,#4]  ; Motor
00003e  4931              LDR      r1,|L8.260|
000040  6889              LDR      r1,[r1,#8]  ; Motor
000042  4288              CMP      r0,r1
000044  d307              BCC      |L8.86|
;;;258            {
;;;259                Tmy.Sensor.bit.top = 1; //已触顶
000046  482e              LDR      r0,|L8.256|
000048  79c0              LDRB     r0,[r0,#7]  ; Tmy
00004a  f0200002          BIC      r0,r0,#2
00004e  1c80              ADDS     r0,r0,#2
000050  492b              LDR      r1,|L8.256|
000052  71c8              STRB     r0,[r1,#7]
000054  e005              B        |L8.98|
                  |L8.86|
;;;260            }else
;;;261            {
;;;262                Tmy.Sensor.bit.top = 0; //未触顶
000056  482a              LDR      r0,|L8.256|
000058  79c0              LDRB     r0,[r0,#7]  ; Tmy
00005a  f0200002          BIC      r0,r0,#2
00005e  4928              LDR      r1,|L8.256|
000060  71c8              STRB     r0,[r1,#7]
                  |L8.98|
;;;263            }
;;;264            
;;;265            if( Tmy.State.bit.init ) //初始化完成
000062  4827              LDR      r0,|L8.256|
000064  7980              LDRB     r0,[r0,#6]  ; Tmy
000066  f3c00040          UBFX     r0,r0,#1,#1
00006a  b180              CBZ      r0,|L8.142|
;;;266            {
;;;267                if( Motor.counter_step == 0 )//触低底检测
00006c  4825              LDR      r0,|L8.260|
00006e  6840              LDR      r0,[r0,#4]  ; Motor
000070  b938              CBNZ     r0,|L8.130|
;;;268                {
;;;269                    Tmy.Sensor.bit.bottom = 1; //已触底
000072  4823              LDR      r0,|L8.256|
000074  79c0              LDRB     r0,[r0,#7]  ; Tmy
000076  f0200001          BIC      r0,r0,#1
00007a  1c40              ADDS     r0,r0,#1
00007c  4920              LDR      r1,|L8.256|
00007e  71c8              STRB     r0,[r1,#7]
000080  e005              B        |L8.142|
                  |L8.130|
;;;270                }else
;;;271                {
;;;272                    Tmy.Sensor.bit.bottom = 0; //未触底
000082  481f              LDR      r0,|L8.256|
000084  79c0              LDRB     r0,[r0,#7]  ; Tmy
000086  f0200001          BIC      r0,r0,#1
00008a  491d              LDR      r1,|L8.256|
00008c  71c8              STRB     r0,[r1,#7]
                  |L8.142|
;;;273                }
;;;274            }
;;;275            
;;;276            if( bsp_GetKeyState( KID_SYRINGE ) ) //注射器类型
00008e  200a              MOVS     r0,#0xa
000090  f7fffffe          BL       bsp_GetKeyState
000094  b138              CBZ      r0,|L8.166|
;;;277            {
;;;278                Tmy.Sensor.bit.SyringeType = SYRINGE_2ML2; //2.2ml
000096  481a              LDR      r0,|L8.256|
000098  79c0              LDRB     r0,[r0,#7]  ; Tmy
00009a  f0200004          BIC      r0,r0,#4
00009e  1d00              ADDS     r0,r0,#4
0000a0  4917              LDR      r1,|L8.256|
0000a2  71c8              STRB     r0,[r1,#7]
0000a4  e005              B        |L8.178|
                  |L8.166|
;;;279            }else
;;;280            {
;;;281                Tmy.Sensor.bit.SyringeType = SYRINGE_1ML8; //1.8ml
0000a6  4816              LDR      r0,|L8.256|
0000a8  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000aa  f0200004          BIC      r0,r0,#4
0000ae  4914              LDR      r1,|L8.256|
0000b0  71c8              STRB     r0,[r1,#7]
                  |L8.178|
;;;282            }
;;;283            
;;;284            if( bsp_GetKeyState( KID_SYRINGE ) ) //注射器插入状态 XXX
0000b2  200a              MOVS     r0,#0xa
0000b4  f7fffffe          BL       bsp_GetKeyState
0000b8  b138              CBZ      r0,|L8.202|
;;;285            {
;;;286                Tmy.Sensor.bit.SyringeState = SYRINGE_ON; //已插入
0000ba  4811              LDR      r0,|L8.256|
0000bc  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000be  f0200008          BIC      r0,r0,#8
0000c2  3008              ADDS     r0,r0,#8
0000c4  490e              LDR      r1,|L8.256|
0000c6  71c8              STRB     r0,[r1,#7]
0000c8  e005              B        |L8.214|
                  |L8.202|
;;;287            }else
;;;288            {
;;;289                Tmy.Sensor.bit.SyringeState = SYRINGE_OFF; //未插入
0000ca  480d              LDR      r0,|L8.256|
0000cc  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000ce  f0200008          BIC      r0,r0,#8
0000d2  490b              LDR      r1,|L8.256|
0000d4  71c8              STRB     r0,[r1,#7]
                  |L8.214|
;;;290            }
;;;291            
;;;292            if( Tmy.pressure > MAX_PRESSURE ) //过压
0000d6  480a              LDR      r0,|L8.256|
0000d8  68c0              LDR      r0,[r0,#0xc]  ; Tmy
0000da  f5b07f7a          CMP      r0,#0x3e8
0000de  d907              BLS      |L8.240|
;;;293            {
;;;294                Tmy.Sensor.bit.OverPressure = 1; //已插入
0000e0  4807              LDR      r0,|L8.256|
0000e2  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000e4  f0200010          BIC      r0,r0,#0x10
0000e8  3010              ADDS     r0,r0,#0x10
0000ea  4905              LDR      r1,|L8.256|
0000ec  71c8              STRB     r0,[r1,#7]
0000ee  e005              B        |L8.252|
                  |L8.240|
;;;295            }else
;;;296            {
;;;297                Tmy.Sensor.bit.OverPressure = 0; //未插入
0000f0  4803              LDR      r0,|L8.256|
0000f2  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000f4  f0200010          BIC      r0,r0,#0x10
0000f8  4901              LDR      r1,|L8.256|
0000fa  71c8              STRB     r0,[r1,#7]
                  |L8.252|
0000fc  e781              B        |L8.2|
;;;298            }
;;;299        }
;;;300    }
;;;301    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L8.256|
                          DCD      Tmy
                  |L8.260|
                          DCD      Motor

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Tmy
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  dg_sta
000000  00                DCB      0x00
                  dev_sta
000001  000000            DCB      0x00,0x00,0x00
                  xHandleTaskLCD
                          DCD      0x00000000
                  xHandleTaskMotorCtrl
                          DCD      0x00000000
                  xHandleTaskSensor
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_251558ba____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_251558ba____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_251558ba____REVSH|
#line 128
|__asm___6_main_c_251558ba____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
