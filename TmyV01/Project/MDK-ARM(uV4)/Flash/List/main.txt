; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\app -I..\..\User\lcd\inc -I..\..\User\hx711 -ID:\MyDoc\MyPrj\MyGitPrj\TmyV01\Project\MDK-ARM(uV4)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;1105   */
;;;1106   static void AppTaskCreate(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;1107   {
;;;1108       //    xTaskCreate( vTaskTaskUserIF,   	/* 任务函数  */
;;;1109       //                 "vTaskUserIF",     	/* 任务名    */
;;;1110       //                 512,               	/* 任务栈大小，单位word，也就是4字节 */
;;;1111       //                 NULL,              	/* 任务参数  */
;;;1112       //                 1,                 	/* 任务优先级*/
;;;1113       //                 &xHandleTaskUserIF );  /* 任务句柄  */
;;;1114       //
;;;1115       //
;;;1116   
;;;1117       xTaskCreate(vTaskLCD,         /* 任务函数  */
000002  2000              MOVS     r0,#0
000004  4a14              LDR      r2,|L1.88|
000006  2304              MOVS     r3,#4
000008  e9cd2001          STRD     r2,r0,[sp,#4]
00000c  9300              STR      r3,[sp,#0]
00000e  9003              STR      r0,[sp,#0xc]
000010  4603              MOV      r3,r0
000012  f44f7200          MOV      r2,#0x200
000016  a111              ADR      r1,|L1.92|
000018  4813              LDR      r0,|L1.104|
00001a  f7fffffe          BL       xTaskGenericCreate
;;;1118                   "vTaskLCD",       /* 任务名    */
;;;1119                   STKSIZE_TaskLCD,  /* 任务栈大小，单位word，也就是4字节 */
;;;1120                   NULL,             /* 任务参数  */
;;;1121                   PRIO_TaskLCD,     /* 任务优先级*/
;;;1122                   &xHandleTaskLCD); /* 任务句柄  */
;;;1123   
;;;1124       xTaskCreate(vTaskMotorCtrl,         /* 任务函数  */
00001e  2000              MOVS     r0,#0
000020  4a12              LDR      r2,|L1.108|
000022  2303              MOVS     r3,#3
000024  e9cd2001          STRD     r2,r0,[sp,#4]
000028  9300              STR      r3,[sp,#0]
00002a  9003              STR      r0,[sp,#0xc]
00002c  4603              MOV      r3,r0
00002e  f44f7200          MOV      r2,#0x200
000032  a10f              ADR      r1,|L1.112|
000034  4812              LDR      r0,|L1.128|
000036  f7fffffe          BL       xTaskGenericCreate
;;;1125                   "vTaskMotorCtrl",       /* 任务名    */
;;;1126                   STKSIZE_TaskMotorCtrl,  /* 任务栈大小，单位word，也就是4字节 */
;;;1127                   NULL,                   /* 任务参数  */
;;;1128                   PRIO_TaskMotorCtrl,     /* 任务优先级*/
;;;1129                   &xHandleTaskMotorCtrl); /* 任务句柄  */
;;;1130   
;;;1131       xTaskCreate(vTaskSensor,         /* 任务函数  */
00003a  2000              MOVS     r0,#0
00003c  4a11              LDR      r2,|L1.132|
00003e  2301              MOVS     r3,#1
000040  e9cd2001          STRD     r2,r0,[sp,#4]
000044  9300              STR      r3,[sp,#0]
000046  9003              STR      r0,[sp,#0xc]
000048  4603              MOV      r3,r0
00004a  2280              MOVS     r2,#0x80
00004c  a10e              ADR      r1,|L1.136|
00004e  4811              LDR      r0,|L1.148|
000050  f7fffffe          BL       xTaskGenericCreate
;;;1132                   "vTaskSensor",       /* 任务名    */
;;;1133                   STKSIZE_TaskSensor,  /* 任务栈大小，单位word，也就是4字节 */
;;;1134                   NULL,                /* 任务参数  */
;;;1135                   PRIO_TaskSensor,     /* 任务优先级*/
;;;1136                   &xHandleTaskSensor); /* 任务句柄  */
;;;1137   }
000054  bd1f              POP      {r0-r4,pc}
;;;1138   
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      xHandleTaskLCD
                  |L1.92|
00005c  76546173          DCB      "vTaskLCD",0
000060  6b4c4344
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L1.104|
                          DCD      vTaskLCD
                  |L1.108|
                          DCD      xHandleTaskMotorCtrl
                  |L1.112|
000070  76546173          DCB      "vTaskMotorCtrl",0
000074  6b4d6f74
000078  6f724374
00007c  726c00  
00007f  00                DCB      0
                  |L1.128|
                          DCD      vTaskMotorCtrl
                  |L1.132|
                          DCD      xHandleTaskSensor
                  |L1.136|
000088  76546173          DCB      "vTaskSensor",0
00008c  6b53656e
000090  736f7200
                  |L1.148|
                          DCD      vTaskSensor

                          AREA ||i.P_GetMsgFromUart||, CODE, READONLY, ALIGN=1

                  P_GetMsgFromUart PROC
;;;63     
;;;64     uint16_t P_GetMsgFromUart(COM_PORT_E _ucPort, uint8_t *msg)
000000  b5f8              PUSH     {r3-r7,lr}
;;;65     {
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
;;;66         uint16_t i = 0;
000006  2400              MOVS     r4,#0
;;;67         uint8_t tem8 = 0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;68         uint32_t tem32 = 0;
00000c  2600              MOVS     r6,#0
;;;69     
;;;70         if (comGetLen(_ucPort) > 3) //收接收数据
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       comGetLen
000014  2803              CMP      r0,#3
000016  dd28              BLE      |L2.106|
;;;71         {
;;;72             while (comGetLen(_ucPort))
000018  e022              B        |L2.96|
                  |L2.26|
;;;73             {
;;;74                 comGetChar(_ucPort, &tem8);
00001a  4669              MOV      r1,sp
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       comGetChar
;;;75                 if (i == 0)
000022  b954              CBNZ     r4,|L2.58|
;;;76                 {
;;;77                     if (tem8 == 0xEE)
000024  f89d0000          LDRB     r0,[sp,#0]
000028  28ee              CMP      r0,#0xee
00002a  d116              BNE      |L2.90|
;;;78                     {
;;;79                         *(msg + i++) = tem8;
00002c  f89d2000          LDRB     r2,[sp,#0]
000030  4620              MOV      r0,r4
000032  1c61              ADDS     r1,r4,#1
000034  b28c              UXTH     r4,r1
000036  542a              STRB     r2,[r5,r0]
000038  e00f              B        |L2.90|
                  |L2.58|
;;;80                     }
;;;81                 }
;;;82                 else
;;;83                 {
;;;84                     *(msg + i++) = tem8;
00003a  f89d2000          LDRB     r2,[sp,#0]
00003e  4620              MOV      r0,r4
000040  1c61              ADDS     r1,r4,#1
000042  b28c              UXTH     r4,r1
000044  542a              STRB     r2,[r5,r0]
;;;85     
;;;86                     tem32 = ((tem32 << 8) | tem8); //拼接最后4个字节，组成一个32位整数
000046  f89d0000          LDRB     r0,[sp,#0]
00004a  ea402606          ORR      r6,r0,r6,LSL #8
;;;87                     if (tem32 == 0xFFFCFFFF)
00004e  f46f3040          MVN      r0,#0x30000
000052  4286              CMP      r6,r0
000054  d101              BNE      |L2.90|
;;;88                     {
;;;89                         return i;
000056  4620              MOV      r0,r4
                  |L2.88|
;;;90                     }
;;;91                     //                if( i > 13 )
;;;92                     //                {
;;;93                     //                    if( tem8 == 0xFF )
;;;94                     //                    {
;;;95                     //                        return i;
;;;96                     //                    }else
;;;97                     //                    {
;;;98                     //                        return 0;
;;;99                     //                    }
;;;100                    //                }
;;;101                }
;;;102                vTaskDelay(pdMS_TO_TICKS(1));
;;;103            }
;;;104        }
;;;105        return 0;
;;;106    }
000058  bdf8              POP      {r3-r7,pc}
                  |L2.90|
00005a  2001              MOVS     r0,#1                 ;102
00005c  f7fffffe          BL       vTaskDelay
                  |L2.96|
000060  4638              MOV      r0,r7                 ;72
000062  f7fffffe          BL       comGetLen
000066  2800              CMP      r0,#0                 ;72
000068  d1d7              BNE      |L2.26|
                  |L2.106|
00006a  2000              MOVS     r0,#0                 ;105
00006c  e7f4              B        |L2.88|
;;;107    
                          ENDP


                          AREA ||i.TMY_ParaInit||, CODE, READONLY, ALIGN=2

                  TMY_ParaInit PROC
;;;108    //默认参数
;;;109    void TMY_ParaInit(void)
000000  4811              LDR      r0,|L3.72|
;;;110    {
;;;111        //步进电机初始化
;;;112        //方向
;;;113        Motor.state.bit.dir = UP;
000002  7880              LDRB     r0,[r0,#2]  ; Motor
000004  f0200001          BIC      r0,r0,#1
000008  490f              LDR      r1,|L3.72|
00000a  7088              STRB     r0,[r1,#2]
;;;114        //速度
;;;115        Motor.speed = SLOW;
00000c  2001              MOVS     r0,#1
00000e  7008              STRB     r0,[r1,#0]
;;;116        Motor.gear = GEAR_SLOW_NORMAL_FAST; //慢中快速，默认有效
000010  2002              MOVS     r0,#2
000012  7048              STRB     r0,[r1,#1]
;;;117                                            //SetTextValue(0, 16,"停止\x00");
;;;118    
;;;119        //频率
;;;120        //SetTextValue(0, 17,"0");
;;;121    
;;;122        Motor.max_step = MAX_STEP_18ML; //最大步数
000014  480d              LDR      r0,|L3.76|
000016  6088              STR      r0,[r1,#8]  ; Motor
;;;123        Motor.counter_step = 0;         //步数
000018  2000              MOVS     r0,#0
00001a  6048              STR      r0,[r1,#4]  ; Motor
;;;124    
;;;125        //其它初始化
;;;126        Tmy.pressure = 0;        //压力
00001c  490c              LDR      r1,|L3.80|
00001e  60c8              STR      r0,[r1,#0xc]  ; Tmy
;;;127        Tmy.power_percent = 100; //电量
000020  2064              MOVS     r0,#0x64
000022  7208              STRB     r0,[r1,#8]
;;;128    
;;;129        Tmy.Key.zdpk = 1; //自动排空，默认有效
000024  4608              MOV      r0,r1
000026  7940              LDRB     r0,[r0,#5]  ; Tmy
000028  f0200002          BIC      r0,r0,#2
00002c  1c80              ADDS     r0,r0,#2
00002e  7148              STRB     r0,[r1,#5]
;;;130        Tmy.Key.hx = 1;   //回吸，默认有效
000030  4608              MOV      r0,r1
000032  7940              LDRB     r0,[r0,#5]  ; Tmy
000034  f0200001          BIC      r0,r0,#1
000038  1c40              ADDS     r0,r0,#1
00003a  7148              STRB     r0,[r1,#5]
;;;131        Tmy.Key.zh = 0;   //1.8ml，默认有效
00003c  4608              MOV      r0,r1
00003e  7940              LDRB     r0,[r0,#5]  ; Tmy
000040  f0200008          BIC      r0,r0,#8
000044  7148              STRB     r0,[r1,#5]
;;;132    }
000046  4770              BX       lr
;;;133    
                          ENDP

                  |L3.72|
                          DCD      Motor
                  |L3.76|
                          DCD      0x0003b97e
                  |L3.80|
                          DCD      Tmy

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;168    */
;;;169    int main(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;170    {
;;;171        /* 
;;;172    	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;173    	  这样做的好处是：
;;;174    	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;175    	  2. 保证系统正常启动，不受别的中断影响。
;;;176    	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;177    	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;178    	  和cpsie i是等效的。
;;;179         */
;;;180        __set_PRIMASK(1);
;;;181    
;;;182        /* 硬件初始化 */
;;;183        bsp_Init();
000008  f7fffffe          BL       bsp_Init
;;;184        debug_en(1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       debug_en
;;;185    
;;;186        TMY_ParaInit();
000012  f7fffffe          BL       TMY_ParaInit
;;;187        start_set();
000016  f7fffffe          BL       start_set
;;;188    
;;;189        /* 创建任务 */
;;;190        AppTaskCreate();
00001a  f7fffffe          BL       AppTaskCreate
;;;191    
;;;192        /* 启动调度，开始执行任务 */
;;;193        vTaskStartScheduler();
00001e  f7fffffe          BL       vTaskStartScheduler
;;;194    
;;;195        /* 
;;;196    	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;197    	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;198    	  #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 17 * 1024 ) )
;;;199    	*/
;;;200        while (1)
000022  bf00              NOP      
                  |L4.36|
000024  e7fe              B        |L4.36|
;;;201            ;
;;;202    }
;;;203    
                          ENDP


                          AREA ||i.start_set||, CODE, READONLY, ALIGN=2

                  start_set PROC
;;;133    
;;;134    void start_set(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136        if (RCC_GetFlagStatus(RCC_FLAG_PORRST))
000002  207b              MOVS     r0,#0x7b
000004  f7fffffe          BL       RCC_GetFlagStatus
000008  b118              CBZ      r0,|L5.18|
;;;137        {
;;;138            debug_usr("power reset:"); //上电重启
00000a  a00d              ADR      r0,|L5.64|
00000c  f7fffffe          BL       debug_usr
000010  e002              B        |L5.24|
                  |L5.18|
;;;139        }
;;;140        else
;;;141        {
;;;142            debug_usr("other reset:"); //软重启
000012  a00f              ADR      r0,|L5.80|
000014  f7fffffe          BL       debug_usr
                  |L5.24|
;;;143        }
;;;144    
;;;145        //debug_usr("%d %d\r\n", data_saved.data.n_reset, data_saved.data.n_error);//
;;;146    
;;;147        RCC->CSR |= 0X1000000; //清除中断标示
000018  4811              LDR      r0,|L5.96|
00001a  6a40              LDR      r0,[r0,#0x24]
00001c  f0407080          ORR      r0,r0,#0x1000000
000020  490f              LDR      r1,|L5.96|
000022  6248              STR      r0,[r1,#0x24]
;;;148    
;;;149        //debug_usr("Train num : %02x%02x max_room_n:%d\r\n", Train.TrainNum[0], Train.TrainNum[1], Train.max_room_n );
;;;150        //printf("Train num : %02x%02x max_room_n:%d\r\n", Train.TrainNum[0], Train.TrainNum[1], Train.max_room_n );
;;;151    
;;;152        debug_usr("************************************\r\n");
000024  a00f              ADR      r0,|L5.100|
000026  f7fffffe          BL       debug_usr
;;;153        debug_usr("          推麻仪 IV型\r\n\r\n");
00002a  a018              ADR      r0,|L5.140|
00002c  f7fffffe          BL       debug_usr
;;;154        debug_usr("Version : %s\r\n", HW_VER);
000030  a11d              ADR      r1,|L5.168|
000032  a01f              ADR      r0,|L5.176|
000034  f7fffffe          BL       debug_usr
;;;155        //printf("ID : %c%d - %02d\r\n", Train.TrainType, ( ( ( (uint16_t)Train.TrainNum[0]) << 8 ) + Train.TrainNum[1]), Train.max_room_n );
;;;156        //printf("ID : %02x%02x - %d\r\n", Train.TrainNum[0], Train.TrainNum[1], Train.max_room_n );
;;;157    
;;;158        printf("************************************\r\n");
000038  a00a              ADR      r0,|L5.100|
00003a  f7fffffe          BL       __2printf
;;;159    }
00003e  bd10              POP      {r4,pc}
;;;160    
                          ENDP

                  |L5.64|
000040  706f7765          DCB      "power reset:",0
000044  72207265
000048  7365743a
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L5.80|
000050  6f746865          DCB      "other reset:",0
000054  72207265
000058  7365743a
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
                  |L5.96|
                          DCD      0x40021000
                  |L5.100|
000064  2a2a2a2a          DCB      "************************************\r\n",0
000068  2a2a2a2a
00006c  2a2a2a2a
000070  2a2a2a2a
000074  2a2a2a2a
000078  2a2a2a2a
00007c  2a2a2a2a
000080  2a2a2a2a
000084  2a2a2a2a
000088  0d0a00  
00008b  00                DCB      0
                  |L5.140|
00008c  20202020          DCB      "          ",205,198,194,233,210,199," IV",208,205,"\r\n"
000090  20202020
000094  2020cdc6
000098  c2e9d2c7
00009c  204956d0
0000a0  cd0d0a  
0000a3  0d0a00            DCB      "\r\n",0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L5.168|
0000a8  56312e30          DCB      "V1.0.0",0
0000ac  2e3000  
0000af  00                DCB      0
                  |L5.176|
0000b0  56657273          DCB      "Version : %s\r\n",0
0000b4  696f6e20
0000b8  3a202573
0000bc  0d0a00  
0000bf  00                DCB      0

                          AREA ||i.vTaskLCD||, CODE, READONLY, ALIGN=2

                  vTaskLCD PROC
;;;348    */
;;;349    static void vTaskLCD(void *pvParameters)
000000  f7fffffe          BL       ULCD_Init
;;;350    {
;;;351        //    uint8_t err, tem8;
;;;352    
;;;353        ULCD_Init();
;;;354        printf("vTaskLCD\r\n");
000004  a006              ADR      r0,|L6.32|
000006  f7fffffe          BL       __2printf
;;;355        bsp_LedOff(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_LedOff
;;;356    
;;;357        //vTaskDelay(pdMS_TO_TICKS(10000));
;;;358    
;;;359        //LCD_ParaInit( );
;;;360    
;;;361        while (1)
000010  e004              B        |L6.28|
                  |L6.18|
;;;362        {
;;;363            vTaskDelay(1);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       vTaskDelay
;;;364            ULCD_Task();
000018  f7fffffe          BL       ULCD_Task
                  |L6.28|
00001c  e7f9              B        |L6.18|
;;;365    
;;;366            //        if( lg_lcd_init == 1 )
;;;367            //        {
;;;368            //            //SetBuzzer(100);
;;;369            //            lg_lcd_init = 2;
;;;370            //            LCD_ParaInit();
;;;371            //            Tmy.State.bit.InitPara = 1;
;;;372            //        }
;;;373        }
;;;374    }
;;;375    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
000020  76546173          DCB      "vTaskLCD\r\n",0
000024  6b4c4344
000028  0d0a00  
00002b  00                DCB      0

                          AREA ||i.vTaskMotorCtrl||, CODE, READONLY, ALIGN=2

                  vTaskMotorCtrl PROC
;;;385    
;;;386    static void vTaskMotorCtrl(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;387    {
;;;388        uint8_t key_v, tem8;
;;;389        //uint8_t  key_state, key_state_c;
;;;390        uint8_t count_init_down;
;;;391    
;;;392        uint8_t dg_sta_c;
;;;393    
;;;394        MOTOR_Init(1000);
000002  f44f707a          MOV      r0,#0x3e8
000006  f7fffffe          BL       MOTOR_Init
;;;395        key_v = 0;
00000a  2600              MOVS     r6,#0
;;;396        MOTOR_SetDir(UP);
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       MOTOR_SetDir
;;;397    
;;;398        Motor.max_hx_step = 31495;
000012  f6473007          MOV      r0,#0x7b07
000016  49fd              LDR      r1,|L7.1036|
000018  6108              STR      r0,[r1,#0x10]  ; Motor
;;;399    
;;;400        count_init_down = 0;
00001a  2700              MOVS     r7,#0
;;;401        dev_sta = DEV_INIT;
00001c  2000              MOVS     r0,#0
00001e  49fc              LDR      r1,|L7.1040|
000020  7008              STRB     r0,[r1,#0]
;;;402        dg_sta = DG_INIT;
000022  2001              MOVS     r0,#1
000024  49fb              LDR      r1,|L7.1044|
000026  7008              STRB     r0,[r1,#0]
;;;403    
;;;404        while (1)
000028  e3a6              B        |L7.1912|
                  |L7.42|
;;;405        {
;;;406            vTaskDelay(2);
00002a  2002              MOVS     r0,#2
00002c  f7fffffe          BL       vTaskDelay
;;;407    
;;;408            bsp_KeyScan();
000030  f7fffffe          BL       bsp_KeyScan
;;;409    
;;;410            //key_state = bsp_GetKeyState( KID_SYRINGE );
;;;411            //key_state_c = key_state;
;;;412    
;;;413            key_v = bsp_GetKey();
000034  f7fffffe          BL       bsp_GetKey
000038  4606              MOV      r6,r0
;;;414    
;;;415            switch (key_v) //
00003a  2e19              CMP      r6,#0x19
00003c  d002              BEQ      |L7.68|
00003e  2e1a              CMP      r6,#0x1a
000040  d164              BNE      |L7.268|
000042  e044              B        |L7.206|
                  |L7.68|
;;;416            {
;;;417            case PEDAL_DOWN: //按下脚踏，电机运行
;;;418    
;;;419                timer_pedal_up = 0;
000044  2000              MOVS     r0,#0
000046  49f4              LDR      r1,|L7.1048|
000048  7008              STRB     r0,[r1,#0]
;;;420    
;;;421                if (dg_sta == DG_UP) //顶杆上升期间
00004a  48f2              LDR      r0,|L7.1044|
00004c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00004e  2806              CMP      r0,#6
000050  d13c              BNE      |L7.204|
;;;422                {
;;;423                    //自动给药情况下，按下脚踏，停机?
;;;424                    if (Tmy.State.bit.zdgy)
000052  48f2              LDR      r0,|L7.1052|
000054  7980              LDRB     r0,[r0,#6]  ; Tmy
000056  f3c01080          UBFX     r0,r0,#6,#1
00005a  b170              CBZ      r0,|L7.122|
;;;425                    {
;;;426                        timer_pedal_down = 1;
00005c  2001              MOVS     r0,#1
00005e  49f0              LDR      r1,|L7.1056|
000060  7008              STRB     r0,[r1,#0]
;;;427                        Tmy.State.bit.zdgy = 0; //取消自动给药
000062  48ee              LDR      r0,|L7.1052|
000064  7980              LDRB     r0,[r0,#6]  ; Tmy
000066  f0200040          BIC      r0,r0,#0x40
00006a  49ec              LDR      r1,|L7.1052|
00006c  7188              STRB     r0,[r1,#6]
;;;428                        //播放语音:自动给药取消？
;;;429                        SetTextValue(0, 26, "自动给药取消");
00006e  a2ed              ADR      r2,|L7.1060|
000070  211a              MOVS     r1,#0x1a
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       SetTextValue
000078  e028              B        |L7.204|
                  |L7.122|
;;;430                    }
;;;431                    else //非自动给药
;;;432                    {
;;;433                        timer_pedal_down = 1;
00007a  2001              MOVS     r0,#1
00007c  49e8              LDR      r1,|L7.1056|
00007e  7008              STRB     r0,[r1,#0]
;;;434                        //Tmy.State.bit.zdgy = 0;//取消自动给药
;;;435    
;;;436                        Motor.speed++;
000080  48e2              LDR      r0,|L7.1036|
000082  7800              LDRB     r0,[r0,#0]  ; Motor
000084  1c40              ADDS     r0,r0,#1
000086  49e1              LDR      r1,|L7.1036|
000088  7008              STRB     r0,[r1,#0]
;;;437                        if (Motor.speed > 3)
00008a  4608              MOV      r0,r1
00008c  7800              LDRB     r0,[r0,#0]  ; Motor
00008e  2803              CMP      r0,#3
000090  dd01              BLE      |L7.150|
;;;438                        {
;;;439                            Motor.speed = 1;
000092  2001              MOVS     r0,#1
000094  7008              STRB     r0,[r1,#0]
                  |L7.150|
;;;440                        }
;;;441    
;;;442                        tem8 = MOTOR_SPEED_INDEX[Motor.gear][Motor.speed - 1];
000096  48dd              LDR      r0,|L7.1036|
000098  7840              LDRB     r0,[r0,#1]  ; Motor
00009a  eb000040          ADD      r0,r0,r0,LSL #1
00009e  49e5              LDR      r1,|L7.1076|
0000a0  eb010140          ADD      r1,r1,r0,LSL #1
0000a4  48d9              LDR      r0,|L7.1036|
0000a6  7800              LDRB     r0,[r0,#0]  ; Motor
0000a8  1e40              SUBS     r0,r0,#1
0000aa  f8115010          LDRB     r5,[r1,r0,LSL #1]
;;;443                        Tmy.speed = tem8;
0000ae  48db              LDR      r0,|L7.1052|
0000b0  7105              STRB     r5,[r0,#4]
;;;444    
;;;445                        MOTOR_SetSpeed(MOTOR_SPEED_CYCLE[tem8]); //设置电机速度
0000b2  49e1              LDR      r1,|L7.1080|
0000b4  f8310015          LDRH     r0,[r1,r5,LSL #1]
0000b8  f7fffffe          BL       MOTOR_SetSpeed
;;;446                        SetTextValue(0, 16, &MOTOR_SPEED_DISPLAY[tem8][0]);
0000bc  eb0500c5          ADD      r0,r5,r5,LSL #3
0000c0  49de              LDR      r1,|L7.1084|
0000c2  1842              ADDS     r2,r0,r1
0000c4  2110              MOVS     r1,#0x10
0000c6  2000              MOVS     r0,#0
0000c8  f7fffffe          BL       SetTextValue
                  |L7.204|
;;;447                        //SetTextInt32(0, 17, MOTOR_SPEED_CYCLE[tem8], 0, 1);
;;;448                        //Tmy.work_state = STA_MOVE;
;;;449                    }
;;;450                }
;;;451    
;;;452                break;
0000cc  e01f              B        |L7.270|
                  |L7.206|
;;;453            case PEDAL_UP: //抬起脚踏
;;;454    
;;;455                timer_pedal_down = 0;
0000ce  2000              MOVS     r0,#0
0000d0  49d3              LDR      r1,|L7.1056|
0000d2  7008              STRB     r0,[r1,#0]
;;;456    
;;;457                if (dg_sta == DG_UP) //顶杆上升期间
0000d4  48cf              LDR      r0,|L7.1044|
0000d6  7800              LDRB     r0,[r0,#0]  ; dg_sta
0000d8  2806              CMP      r0,#6
0000da  d116              BNE      |L7.266|
;;;458                {
;;;459                    if (Tmy.State.bit.zdgy) //自动给药
0000dc  48cf              LDR      r0,|L7.1052|
0000de  7980              LDRB     r0,[r0,#6]  ; Tmy
0000e0  f3c01080          UBFX     r0,r0,#6,#1
0000e4  b988              CBNZ     r0,|L7.266|
;;;460                    {
;;;461                        ; //自动给药
;;;462                    }
;;;463                    else //非自动给药
;;;464                    {
;;;465                        //Motor.speed = 0;
;;;466                        MOTOR_Stop();       //电机停止
0000e6  f7fffffe          BL       MOTOR_Stop
;;;467                        timer_pedal_up = 1; //启动脚踏抬起计时
0000ea  2001              MOVS     r0,#1
0000ec  49ca              LDR      r1,|L7.1048|
0000ee  7008              STRB     r0,[r1,#0]
;;;468    
;;;469                        SetTextValue(0, 16, "停止\x00");
0000f0  a2d3              ADR      r2,|L7.1088|
0000f2  2110              MOVS     r1,#0x10
0000f4  2000              MOVS     r0,#0
0000f6  f7fffffe          BL       SetTextValue
;;;470                        SetTextInt32(0, 17, 0, 0, 1);
0000fa  2001              MOVS     r0,#1
0000fc  2300              MOVS     r3,#0
0000fe  461a              MOV      r2,r3
000100  2111              MOVS     r1,#0x11
000102  9000              STR      r0,[sp,#0]
000104  4618              MOV      r0,r3
000106  f7fffffe          BL       SetTextInt32
                  |L7.266|
;;;471                        //Tmy.work_state = STA_IDLE;
;;;472                    }
;;;473                }
;;;474                break;
00010a  e000              B        |L7.270|
                  |L7.268|
;;;475                //		    case ZERO_UNDETECT : //
;;;476                //		        Motor.state.bit.zero = 0;
;;;477                //		        SetTextValue(0,18,"未触底");
;;;478                //		        break;
;;;479                //	        case ZERO_DETECT : //
;;;480                //	            Motor.state.bit.zero = 1;
;;;481                //		        MOTOR_Stop();
;;;482                //		        Motor.counter_step = 0;
;;;483                //		        SetTextValue(0,18,"已触底");
;;;484                //		    case SYRINGE_UNDETECT : //
;;;485                ////		        Motor.state.bit.zero = 0;
;;;486                //		        //SetTextValue(0,18,"1.8ml");
;;;487                //		        break;
;;;488                //	        case SYRINGE_DETECT : //
;;;489                ////	            Motor.state.bit.zero = 1;
;;;490                ////		        MOTOR_Stop();
;;;491                ////		        Motor.counter_step = 0;
;;;492                //		        //SetTextValue(0,18,"2.2ml");
;;;493                //		        break;
;;;494                //
;;;495            default:
;;;496                break;
00010c  bf00              NOP      
                  |L7.270|
00010e  bf00              NOP                            ;452
;;;497            }
;;;498    
;;;499            if (dg_sta == DG_UP) //顶杆上升期间
000110  48c0              LDR      r0,|L7.1044|
000112  7800              LDRB     r0,[r0,#0]  ; dg_sta
000114  2806              CMP      r0,#6
000116  d158              BNE      |L7.458|
;;;500            {
;;;501                if (timer_pedal_up > DLY_PEDAL_UP_MOTOR_STOP) //抬起脚踏时间大于 DLY_PEDAL_UP_MOTOR_STOP 秒
000118  48bf              LDR      r0,|L7.1048|
00011a  7800              LDRB     r0,[r0,#0]  ; timer_pedal_up
00011c  2802              CMP      r0,#2
00011e  dd1f              BLE      |L7.352|
;;;502                {
;;;503                    timer_pedal_up = 0;
000120  2000              MOVS     r0,#0
000122  49bd              LDR      r1,|L7.1048|
000124  7008              STRB     r0,[r1,#0]
;;;504                    Motor.speed = 0; //恢复速度
000126  49b9              LDR      r1,|L7.1036|
000128  7008              STRB     r0,[r1,#0]
;;;505                    if (Tmy.Key.hx)  //&& (!Motor.state.bit.dir) )//回吸模式有效 Motor.state.bit.dir
00012a  48bc              LDR      r0,|L7.1052|
00012c  7940              LDRB     r0,[r0,#5]  ; Tmy
00012e  f0000001          AND      r0,r0,#1
000132  b1a8              CBZ      r0,|L7.352|
;;;506                    {
;;;507                        if ((Tmy.speed == SLOW)      //常慢速
000134  48b9              LDR      r0,|L7.1052|
000136  7900              LDRB     r0,[r0,#4]  ; Tmy
000138  2801              CMP      r0,#1
00013a  d007              BEQ      |L7.332|
;;;508                            || (Tmy.speed == NORMAL) //中速
00013c  48b7              LDR      r0,|L7.1052|
00013e  7900              LDRB     r0,[r0,#4]  ; Tmy
000140  2802              CMP      r0,#2
000142  d003              BEQ      |L7.332|
;;;509                            || (Tmy.speed == FAST))  //快速
000144  48b5              LDR      r0,|L7.1052|
000146  7900              LDRB     r0,[r0,#4]  ; Tmy
000148  2803              CMP      r0,#3
00014a  d109              BNE      |L7.352|
                  |L7.332|
;;;510                        {
;;;511                            Motor.counter_hx_step = Motor.counter_step - Motor.max_hx_step;
00014c  48af              LDR      r0,|L7.1036|
00014e  6840              LDR      r0,[r0,#4]  ; Motor
000150  49ae              LDR      r1,|L7.1036|
000152  6909              LDR      r1,[r1,#0x10]  ; Motor
000154  1a40              SUBS     r0,r0,r1
000156  49ad              LDR      r1,|L7.1036|
000158  60c8              STR      r0,[r1,#0xc]  ; Motor
;;;512                            //Tmy.state.bit.hx = 1;
;;;513                            dg_sta = DG_HX_DOWN; //Tmy.work_state = STA_HX_DOWN;
00015a  200b              MOVS     r0,#0xb
00015c  49ad              LDR      r1,|L7.1044|
00015e  7008              STRB     r0,[r1,#0]
                  |L7.352|
;;;514                                                 //MOTOR_SetDir( DOWN );
;;;515                                                 //MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度
;;;516                                                 //SetTextValue(0,18,"回吸下降");
;;;517                        }
;;;518                    }
;;;519                }
;;;520    
;;;521                //自动给药判断
;;;522                if ((Tmy.speed == SLOWEST) //慢慢速
000160  48ae              LDR      r0,|L7.1052|
000162  7900              LDRB     r0,[r0,#4]  ; Tmy
000164  b118              CBZ      r0,|L7.366|
;;;523                    || (Tmy.speed == SLOW) //常慢速
000166  48ad              LDR      r0,|L7.1052|
000168  7900              LDRB     r0,[r0,#4]  ; Tmy
00016a  2801              CMP      r0,#1
00016c  d12d              BNE      |L7.458|
                  |L7.366|
;;;524                )
;;;525                {
;;;526                    if ((!Tmy.State.bit.zdgy) && (timer_pedal_down > TIME_ZDGY_ENABLE)) //按下脚踏时间大于TIME_CRUISE_START秒
00016e  48ab              LDR      r0,|L7.1052|
000170  7980              LDRB     r0,[r0,#6]  ; Tmy
000172  f3c01080          UBFX     r0,r0,#6,#1
000176  b990              CBNZ     r0,|L7.414|
000178  48a9              LDR      r0,|L7.1056|
00017a  7800              LDRB     r0,[r0,#0]  ; timer_pedal_down
00017c  2805              CMP      r0,#5
00017e  dd0e              BLE      |L7.414|
;;;527                    {
;;;528                        Tmy.State.bit.zdgy = 1; //进入自动给药
000180  48a6              LDR      r0,|L7.1052|
000182  7980              LDRB     r0,[r0,#6]  ; Tmy
000184  f0200040          BIC      r0,r0,#0x40
000188  3040              ADDS     r0,r0,#0x40
00018a  49a4              LDR      r1,|L7.1052|
00018c  7188              STRB     r0,[r1,#6]
;;;529                        SetTextValue(0, 26, "自动给药...");
00018e  a2ae              ADR      r2,|L7.1096|
000190  211a              MOVS     r1,#0x1a
000192  2000              MOVS     r0,#0
000194  f7fffffe          BL       SetTextValue
;;;530                        //play_sound('a:/sounds/zdgy.mp3');
;;;531                        PlayMusic("a:/sounds/zdgy.mp3"); //EE 94 41 3A 2F 53 6F 75 6E 64 73 2F 7A 64 67 79 2E 6D 70 33 FF FC FF FF
000198  a0ae              ADR      r0,|L7.1108|
00019a  f7fffffe          BL       PlayMusic
                  |L7.414|
;;;532                                                         //播放语音:即将进入巡航模式
;;;533                                                         //如果2秒内，抬脚，进入巡航模式
;;;534                                                         //如果2秒内，没有抬脚，不进入巡航模式
;;;535                    }
;;;536    
;;;537                    if ((Tmy.State.bit.zdgy) && (timer_pedal_down > TIME_ZDGY_CANCLE)) //按下脚踏时间大于5秒
00019e  489f              LDR      r0,|L7.1052|
0001a0  7980              LDRB     r0,[r0,#6]  ; Tmy
0001a2  f3c01080          UBFX     r0,r0,#6,#1
0001a6  b180              CBZ      r0,|L7.458|
0001a8  489d              LDR      r0,|L7.1056|
0001aa  7800              LDRB     r0,[r0,#0]  ; timer_pedal_down
0001ac  2807              CMP      r0,#7
0001ae  dd0c              BLE      |L7.458|
;;;538                    {
;;;539                        Tmy.State.bit.zdgy = 0; //取消自动给药
0001b0  489a              LDR      r0,|L7.1052|
0001b2  7980              LDRB     r0,[r0,#6]  ; Tmy
0001b4  f0200040          BIC      r0,r0,#0x40
0001b8  4998              LDR      r1,|L7.1052|
0001ba  7188              STRB     r0,[r1,#6]
;;;540                        timer_pedal_down = 0;
0001bc  2000              MOVS     r0,#0
0001be  4998              LDR      r1,|L7.1056|
0001c0  7008              STRB     r0,[r1,#0]
;;;541                        //播放语音:巡航模式取消？
;;;542                        SetTextValue(0, 26, "自动给药取消");
0001c2  a298              ADR      r2,|L7.1060|
0001c4  211a              MOVS     r1,#0x1a
0001c6  f7fffffe          BL       SetTextValue
                  |L7.458|
;;;543                        //如果2秒内，抬脚，进入巡航模式
;;;544                        //如果2秒内，没有抬脚，不进入巡航模式
;;;545                    }
;;;546                }
;;;547            }
;;;548    
;;;549            switch (dg_sta)
0001ca  4892              LDR      r0,|L7.1044|
0001cc  7800              LDRB     r0,[r0,#0]  ; dg_sta
0001ce  2810              CMP      r0,#0x10
0001d0  d27c              BCS      |L7.716|
0001d2  e8dff000          TBB      [pc,r0]
0001d6  d108              DCB      0xd1,0x08
0001d8  2a4df59f          DCB      0x2a,0x4d,0xf5,0x9f
0001dc  f4f3f6f1          DCB      0xf4,0xf3,0xf6,0xf1
0001e0  f0ef7b7b          DCB      0xf0,0xef,0x7b,0x7b
0001e4  eeed              DCB      0xee,0xed
;;;550            {
;;;551            case DG_INIT: //上电，参数初始化
;;;552                if (dg_sta_c != dg_sta)
0001e6  488b              LDR      r0,|L7.1044|
0001e8  7800              LDRB     r0,[r0,#0]  ; dg_sta
0001ea  4284              CMP      r4,r0
0001ec  d001              BEQ      |L7.498|
;;;553                {
;;;554                    dg_sta_c = dg_sta;
0001ee  4889              LDR      r0,|L7.1044|
0001f0  7804              LDRB     r4,[r0,#0]  ; dg_sta
                  |L7.498|
;;;555                    //SetTextValue(0,26,"初始化...");
;;;556                }
;;;557    
;;;558                if (!Tmy.State.bit.InitPara) //参数尚未初始化
0001f2  488a              LDR      r0,|L7.1052|
0001f4  7980              LDRB     r0,[r0,#6]  ; Tmy
0001f6  f0000001          AND      r0,r0,#1
0001fa  b968              CBNZ     r0,|L7.536|
;;;559                {
;;;560                    if (lg_lcd_init == 1)
0001fc  489a              LDR      r0,|L7.1128|
0001fe  7800              LDRB     r0,[r0,#0]  ; lg_lcd_init
000200  2801              CMP      r0,#1
000202  d111              BNE      |L7.552|
;;;561                    {
;;;562                        //lg_lcd_init = 2;
;;;563                        LCD_ParaInit();
000204  f7fffffe          BL       LCD_ParaInit
;;;564                        Tmy.State.bit.InitPara = 1;
000208  4884              LDR      r0,|L7.1052|
00020a  7980              LDRB     r0,[r0,#6]  ; Tmy
00020c  f0200001          BIC      r0,r0,#1
000210  1c40              ADDS     r0,r0,#1
000212  4982              LDR      r1,|L7.1052|
000214  7188              STRB     r0,[r1,#6]
000216  e007              B        |L7.552|
                  |L7.536|
;;;565                    }
;;;566                    //Tmy.State.bit.InitPara = 1;
;;;567                }
;;;568                else //参数初始化完成
;;;569                {
;;;570                    SetTextValue(0, 26, "LCD初始化完成。");
000218  a294              ADR      r2,|L7.1132|
00021a  211a              MOVS     r1,#0x1a
00021c  2000              MOVS     r0,#0
00021e  f7fffffe          BL       SetTextValue
;;;571                    dg_sta = DG_INIT_DOWN; //顶杆归零
000222  2003              MOVS     r0,#3
000224  497b              LDR      r1,|L7.1044|
000226  7008              STRB     r0,[r1,#0]
                  |L7.552|
;;;572                }
;;;573    
;;;574                break;
000228  e2a5              B        |L7.1910|
;;;575    
;;;576            case DG_INIT_UP: //上电初始化过程，顶杆不在零位，先归零，然后再先上升一小段再归零
;;;577    
;;;578                if (dg_sta_c != dg_sta)
00022a  487a              LDR      r0,|L7.1044|
00022c  7800              LDRB     r0,[r0,#0]  ; dg_sta
00022e  4284              CMP      r4,r0
000230  d006              BEQ      |L7.576|
;;;579                {
;;;580                    dg_sta_c = dg_sta;
000232  4878              LDR      r0,|L7.1044|
000234  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;581                    SetTextValue(0, 26, "检测归零传感器,上升...");
000236  a291              ADR      r2,|L7.1148|
000238  211a              MOVS     r1,#0x1a
00023a  2000              MOVS     r0,#0
00023c  f7fffffe          BL       SetTextValue
                  |L7.576|
;;;582                }
;;;583    
;;;584                if (!Tmy.Sensor.bit.bottom) //检测离开底部
000240  4876              LDR      r0,|L7.1052|
000242  79c0              LDRB     r0,[r0,#7]  ; Tmy
000244  f0000001          AND      r0,r0,#1
000248  b910              CBNZ     r0,|L7.592|
;;;585                {
;;;586                    dg_sta = DG_INIT_DOWN; //再次复位
00024a  2003              MOVS     r0,#3
00024c  4971              LDR      r1,|L7.1044|
00024e  7008              STRB     r0,[r1,#0]
                  |L7.592|
;;;587                }
;;;588    
;;;589                if (Tmy.Motor.state != MOTOR_UP) //步进电机不是在上升
000250  4872              LDR      r0,|L7.1052|
000252  7800              LDRB     r0,[r0,#0]  ; Tmy
000254  2801              CMP      r0,#1
000256  d00a              BEQ      |L7.622|
;;;590                {
;;;591                    MOTOR_Stop();               //步进电机停止
000258  f7fffffe          BL       MOTOR_Stop
;;;592                    MOTOR_SetDir(UP);           //方向上升
00025c  2000              MOVS     r0,#0
00025e  f7fffffe          BL       MOTOR_SetDir
;;;593                    MOTOR_SetSpeed(CYCLE_HX);   //设置电机速度 XXX
000262  2086              MOVS     r0,#0x86
000264  f7fffffe          BL       MOTOR_SetSpeed
;;;594                    Tmy.Motor.state = MOTOR_UP; //更改步进电机状态
000268  2001              MOVS     r0,#1
00026a  496c              LDR      r1,|L7.1052|
00026c  7008              STRB     r0,[r1,#0]
                  |L7.622|
;;;595                }
;;;596                else //步进电机在上升
;;;597                {
;;;598                    //                    if( key_v == PEDAL_UP )//检测到脚踏抬起
;;;599                    //                    {
;;;600                    //                        dg_sta = DG_STOP;//停止
;;;601                    //                    }
;;;602                }
;;;603    
;;;604                break;
00026e  e282              B        |L7.1910|
;;;605            case DG_INIT_DOWN: //上电初始化过程，顶杆不在零位，先归零，然后再先上升一小段再归零
;;;606    
;;;607                if (dg_sta_c != dg_sta)
000270  4868              LDR      r0,|L7.1044|
000272  7800              LDRB     r0,[r0,#0]  ; dg_sta
000274  4284              CMP      r4,r0
000276  d006              BEQ      |L7.646|
;;;608                {
;;;609                    dg_sta_c = dg_sta;
000278  4866              LDR      r0,|L7.1044|
00027a  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;610                    SetTextValue(0, 26, "顶杆归零...");
00027c  a285              ADR      r2,|L7.1172|
00027e  211a              MOVS     r1,#0x1a
000280  2000              MOVS     r0,#0
000282  f7fffffe          BL       SetTextValue
                  |L7.646|
;;;611                }
;;;612    
;;;613                if (key_v == ZERO_DETECT) //检测到触底
000286  2e1d              CMP      r6,#0x1d
000288  d10f              BNE      |L7.682|
;;;614                {
;;;615                    Tmy.Sensor.bit.bottom = 1;
00028a  4864              LDR      r0,|L7.1052|
00028c  79c0              LDRB     r0,[r0,#7]  ; Tmy
00028e  f0200001          BIC      r0,r0,#1
000292  1c40              ADDS     r0,r0,#1
000294  4961              LDR      r1,|L7.1052|
000296  71c8              STRB     r0,[r1,#7]
;;;616                    MOTOR_Stop();
000298  f7fffffe          BL       MOTOR_Stop
;;;617                    Motor.counter_step = 0;
00029c  2000              MOVS     r0,#0
00029e  495b              LDR      r1,|L7.1036|
0002a0  6048              STR      r0,[r1,#4]  ; Motor
;;;618                    SetTextValue(0, 18, "已触底");
0002a2  a27f              ADR      r2,|L7.1184|
0002a4  2112              MOVS     r1,#0x12
0002a6  f7fffffe          BL       SetTextValue
                  |L7.682|
;;;619                }
;;;620    
;;;621                if (Tmy.Sensor.bit.bottom) //到达底部
0002aa  485c              LDR      r0,|L7.1052|
0002ac  79c0              LDRB     r0,[r0,#7]  ; Tmy
0002ae  f0000001          AND      r0,r0,#1
0002b2  b1f8              CBZ      r0,|L7.756|
;;;622                {
;;;623                    if (!count_init_down) //第一次触底
0002b4  b95f              CBNZ     r7,|L7.718|
;;;624                    {
;;;625                        SetTextValue(0, 26, "已触底");
0002b6  a27a              ADR      r2,|L7.1184|
0002b8  211a              MOVS     r1,#0x1a
0002ba  2000              MOVS     r0,#0
0002bc  f7fffffe          BL       SetTextValue
;;;626                        count_init_down++;
0002c0  1c78              ADDS     r0,r7,#1
0002c2  b2c7              UXTB     r7,r0
;;;627                        dg_sta = DG_INIT_UP; //上升一段
0002c4  2002              MOVS     r0,#2
0002c6  4953              LDR      r1,|L7.1044|
0002c8  7008              STRB     r0,[r1,#0]
0002ca  e022              B        |L7.786|
                  |L7.716|
0002cc  e252              B        |L7.1908|
                  |L7.718|
;;;628                    }
;;;629                    else //第二次触底
;;;630                    {
;;;631                        SetBuzzer(100);
0002ce  2064              MOVS     r0,#0x64
0002d0  f7fffffe          BL       SetBuzzer
;;;632                        SetTextValue(0, 26, "顶杆归零完成");
0002d4  a274              ADR      r2,|L7.1192|
0002d6  211a              MOVS     r1,#0x1a
0002d8  2000              MOVS     r0,#0
0002da  f7fffffe          BL       SetTextValue
;;;633                        Tmy.State.bit.init = 1; //初始化完成
0002de  484f              LDR      r0,|L7.1052|
0002e0  7980              LDRB     r0,[r0,#6]  ; Tmy
0002e2  f0200002          BIC      r0,r0,#2
0002e6  1c80              ADDS     r0,r0,#2
0002e8  494c              LDR      r1,|L7.1052|
0002ea  7188              STRB     r0,[r1,#6]
;;;634                        dg_sta = DG_STOP_BOT;   //停在底部
0002ec  2005              MOVS     r0,#5
0002ee  4949              LDR      r1,|L7.1044|
0002f0  7008              STRB     r0,[r1,#0]
0002f2  e00e              B        |L7.786|
                  |L7.756|
;;;635                        //dev_sta = DEV_STANDBY;//设备待机
;;;636                    }
;;;637                }
;;;638                else //未到达底部
;;;639                {
;;;640                    if (Tmy.Motor.state != MOTOR_DOWN) //步进电机不是在下降
0002f4  4849              LDR      r0,|L7.1052|
0002f6  7800              LDRB     r0,[r0,#0]  ; Tmy
0002f8  2802              CMP      r0,#2
0002fa  d00a              BEQ      |L7.786|
;;;641                    {
;;;642                        MOTOR_Stop();                 //步进电机停止
0002fc  f7fffffe          BL       MOTOR_Stop
;;;643                        MOTOR_SetDir(DOWN);           //方向下降
000300  2001              MOVS     r0,#1
000302  f7fffffe          BL       MOTOR_SetDir
;;;644                        MOTOR_SetSpeed(CYCLE_HX);     //设置电机速度 XXX
000306  2086              MOVS     r0,#0x86
000308  f7fffffe          BL       MOTOR_SetSpeed
;;;645                        Tmy.Motor.state = MOTOR_DOWN; //更改步进电机状态
00030c  2002              MOVS     r0,#2
00030e  4943              LDR      r1,|L7.1052|
000310  7008              STRB     r0,[r1,#0]
                  |L7.786|
;;;646                    }
;;;647                    else //步进电机在下降
;;;648                    {
;;;649                        //                    if( key_v == PEDAL_UP )//检测到脚踏抬起
;;;650                        //                    {
;;;651                        //                        dg_sta = DG_STOP;//停止
;;;652                        //                    }
;;;653                    }
;;;654                }
;;;655                break;
000312  e230              B        |L7.1910|
;;;656    
;;;657            case DG_STOP_BOT: //停留在底部
;;;658                //触底步数归零
;;;659                MOTOR_ClrStep();
000314  f7fffffe          BL       MOTOR_ClrStep
;;;660    
;;;661                if (dg_sta_c != dg_sta)
000318  483e              LDR      r0,|L7.1044|
00031a  7800              LDRB     r0,[r0,#0]  ; dg_sta
00031c  4284              CMP      r4,r0
00031e  d006              BEQ      |L7.814|
;;;662                {
;;;663                    dg_sta_c = dg_sta;
000320  483c              LDR      r0,|L7.1044|
000322  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;664                    SetTextValue(0, 26, "触底待机");
000324  a264              ADR      r2,|L7.1208|
000326  211a              MOVS     r1,#0x1a
000328  2000              MOVS     r0,#0
00032a  f7fffffe          BL       SetTextValue
                  |L7.814|
;;;665                }
;;;666    
;;;667                if (Tmy.Motor.state != MOTOR_STOP) //步进电机在运行
00032e  483b              LDR      r0,|L7.1052|
000330  7800              LDRB     r0,[r0,#0]  ; Tmy
000332  b148              CBZ      r0,|L7.840|
;;;668                {
;;;669                    MOTOR_Stop();                 //步进电机停止
000334  f7fffffe          BL       MOTOR_Stop
;;;670                    MOTOR_SetDir(UP);             //方向上升
000338  2000              MOVS     r0,#0
00033a  f7fffffe          BL       MOTOR_SetDir
;;;671                    Tmy.Motor.state = MOTOR_STOP; //更改步进电机状态
00033e  2000              MOVS     r0,#0
000340  4936              LDR      r1,|L7.1052|
000342  7008              STRB     r0,[r1,#0]
;;;672                    MOTOR_ClrStep();              //步数清零
000344  f7fffffe          BL       MOTOR_ClrStep
                  |L7.840|
;;;673                }
;;;674    
;;;675                if (key_v == PEDAL_DOWN) //检测到踩脚踏
000348  2e19              CMP      r6,#0x19
00034a  d114              BNE      |L7.886|
;;;676                {
;;;677                    if (Tmy.Key.zdpk) //自动排空
00034c  4833              LDR      r0,|L7.1052|
00034e  7940              LDRB     r0,[r0,#5]  ; Tmy
000350  f3c00040          UBFX     r0,r0,#1,#1
000354  b118              CBZ      r0,|L7.862|
;;;678                    {
;;;679                        // SetTextValue(0,26,"自动排空...");
;;;680                        dg_sta = DG_ZDPK_UP; //顶杆上升
000356  2008              MOVS     r0,#8
000358  492e              LDR      r1,|L7.1044|
00035a  7008              STRB     r0,[r1,#0]
00035c  e00b              B        |L7.886|
                  |L7.862|
;;;681                    }
;;;682                    else
;;;683    				if (Tmy.Key.ecpk) //二次排空
00035e  482f              LDR      r0,|L7.1052|
000360  7940              LDRB     r0,[r0,#5]  ; Tmy
000362  f3c00080          UBFX     r0,r0,#2,#1
000366  b118              CBZ      r0,|L7.880|
;;;684                    {
;;;685                        // SetTextValue(0,26,"二次排空...");
;;;686                        dg_sta = DG_ECPK_UP; //顶杆上升
000368  2009              MOVS     r0,#9
00036a  492a              LDR      r1,|L7.1044|
00036c  7008              STRB     r0,[r1,#0]
00036e  e002              B        |L7.886|
                  |L7.880|
;;;687                    }
;;;688                    else
;;;689                    //if( dev_sta == DEV_RUN )//设备运行状态
;;;690                    {
;;;691                        //SetTextValue(0,26,"顶杆上升...");
;;;692                        dg_sta = DG_UP; //顶杆上升
000370  2006              MOVS     r0,#6
000372  4928              LDR      r1,|L7.1044|
000374  7008              STRB     r0,[r1,#0]
                  |L7.886|
;;;693                    }
;;;694                }
;;;695                //                if(  )//顶杆检查按键按下
;;;696                //                {
;;;697                //                    if( dev_sta == DEV_FIX )//顶杆检查
;;;698                //                    {
;;;699                //                        dg_sta = DG_FIX_UP;//顶杆检查上升
;;;700                //                    }
;;;701                //                }
;;;702    
;;;703                //                if( key_v == PEDAL_DOWN )//检测到脚踏按下
;;;704                //                {
;;;705                //                    if( dev_sta == DEV_RUN )//设备运行状态
;;;706                //                    {
;;;707                //                        dg_sta = DG_UP;//顶杆上升
;;;708                //                    }else
;;;709                //                    if( dev_sta == DEV_FIX )//顶杆检查
;;;710                //                    {
;;;711                //                        dg_sta = DG_FIX_UP;//顶杆检查上升
;;;712                //                    }
;;;713                //                }
;;;714    
;;;715                break;
000376  e1fe              B        |L7.1910|
;;;716    
;;;717            case DG_STOP: //停止
;;;718    
;;;719                if (dg_sta_c != dg_sta)
000378  4826              LDR      r0,|L7.1044|
00037a  7800              LDRB     r0,[r0,#0]  ; dg_sta
00037c  4284              CMP      r4,r0
00037e  d006              BEQ      |L7.910|
;;;720                {
;;;721                    dg_sta_c = dg_sta;
000380  4824              LDR      r0,|L7.1044|
000382  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;722                    SetTextValue(0, 26, "待机");
000384  a24d              ADR      r2,|L7.1212|
000386  211a              MOVS     r1,#0x1a
000388  2000              MOVS     r0,#0
00038a  f7fffffe          BL       SetTextValue
                  |L7.910|
;;;723                }
;;;724    
;;;725                if (Tmy.Motor.state != MOTOR_STOP) //步进电机在运行
00038e  4823              LDR      r0,|L7.1052|
000390  7800              LDRB     r0,[r0,#0]  ; Tmy
000392  b120              CBZ      r0,|L7.926|
;;;726                {
;;;727                    MOTOR_Stop(); //步进电机停止
000394  f7fffffe          BL       MOTOR_Stop
;;;728                    //MOTOR_SetDir( UP );//方向上升
;;;729                    Tmy.Motor.state = MOTOR_STOP; //更改步进电机状态
000398  2000              MOVS     r0,#0
00039a  4920              LDR      r1,|L7.1052|
00039c  7008              STRB     r0,[r1,#0]
                  |L7.926|
;;;730                    //MOTOR_ClrStep( ); //步数清零
;;;731                }
;;;732    
;;;733                if (key_v == PEDAL_DOWN) //检测到脚踏按下
00039e  2e19              CMP      r6,#0x19
0003a0  d105              BNE      |L7.942|
;;;734                {
;;;735                    //if( dev_sta == DEV_RUN )//设备运行状态
;;;736                    {
;;;737                        timer_pedal_down = 1; //开始脚踏按下计时
0003a2  2001              MOVS     r0,#1
0003a4  491e              LDR      r1,|L7.1056|
0003a6  7008              STRB     r0,[r1,#0]
;;;738                        dg_sta = DG_UP;       //顶杆上升
0003a8  2006              MOVS     r0,#6
0003aa  491a              LDR      r1,|L7.1044|
0003ac  7008              STRB     r0,[r1,#0]
                  |L7.942|
;;;739                    }
;;;740                } //else
;;;741                  //                if( key_v == PEDAL_DOWN )//检测复位键按下
;;;742                  //                {
;;;743                  //                    if( )//设备运行状态
;;;744                  //                    {
;;;745                  //                        dg_sta = DG_RESET_DOWN;//复位下降
;;;746                  //                    }
;;;747                  //                    ;
;;;748                  //                }
;;;749                break;
0003ae  e1e2              B        |L7.1910|
0003b0  e1c5              B        |L7.1854|
0003b2  e1a3              B        |L7.1788|
0003b4  e13b              B        |L7.1582|
0003b6  e175              B        |L7.1700|
0003b8  e08a              B        |L7.1232|
0003ba  e002              B        |L7.962|
0003bc  e10e              B        |L7.1500|
0003be  e09f              B        |L7.1280|
0003c0  e0ea              B        |L7.1432|
                  |L7.962|
;;;750    
;;;751            case DG_ZDPK_UP: //自动排空
;;;752    
;;;753                if (dg_sta_c != dg_sta)
0003c2  4814              LDR      r0,|L7.1044|
0003c4  7800              LDRB     r0,[r0,#0]  ; dg_sta
0003c6  4284              CMP      r4,r0
0003c8  d006              BEQ      |L7.984|
;;;754                {
;;;755                    dg_sta_c = dg_sta;
0003ca  4812              LDR      r0,|L7.1044|
0003cc  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;756                    SetTextValue(0, 26, "自动排空...");
0003ce  a23d              ADR      r2,|L7.1220|
0003d0  211a              MOVS     r1,#0x1a
0003d2  2000              MOVS     r0,#0
0003d4  f7fffffe          BL       SetTextValue
                  |L7.984|
;;;757                }
;;;758    
;;;759                if (Motor.counter_step > STEP_MAX_ZDPK) //到达自动排空步数
0003d8  480c              LDR      r0,|L7.1036|
0003da  6840              LDR      r0,[r0,#4]  ; Motor
0003dc  f6487189          MOV      r1,#0x8f89
0003e0  4288              CMP      r0,r1
0003e2  d902              BLS      |L7.1002|
;;;760                {
;;;761                    dg_sta = DG_STOP; //电机停止
0003e4  2000              MOVS     r0,#0
0003e6  490b              LDR      r1,|L7.1044|
0003e8  7008              STRB     r0,[r1,#0]
                  |L7.1002|
;;;762                }
;;;763    
;;;764                if (Tmy.Motor.state != MOTOR_UP) //步进电机不是在上升
0003ea  480c              LDR      r0,|L7.1052|
0003ec  7800              LDRB     r0,[r0,#0]  ; Tmy
0003ee  2801              CMP      r0,#1
0003f0  d00a              BEQ      |L7.1032|
;;;765                {
;;;766                    MOTOR_Stop();               //步进电机停止
0003f2  f7fffffe          BL       MOTOR_Stop
;;;767                    MOTOR_SetDir(UP);           //方向上升
0003f6  2000              MOVS     r0,#0
0003f8  f7fffffe          BL       MOTOR_SetDir
;;;768                    MOTOR_SetSpeed(CYCLE_ZDPK); //设置电机速
0003fc  2086              MOVS     r0,#0x86
0003fe  f7fffffe          BL       MOTOR_SetSpeed
;;;769                    Tmy.Motor.state = MOTOR_UP; //更改步进电机状态
000402  2001              MOVS     r0,#1
000404  4905              LDR      r1,|L7.1052|
000406  7008              STRB     r0,[r1,#0]
                  |L7.1032|
;;;770                }
;;;771                else //步进电机在上升
;;;772                {
;;;773                    ;
;;;774                }
;;;775    
;;;776                break;
000408  e1b5              B        |L7.1910|
00040a  0000              DCW      0x0000
                  |L7.1036|
                          DCD      Motor
                  |L7.1040|
                          DCD      dev_sta
                  |L7.1044|
                          DCD      dg_sta
                  |L7.1048|
                          DCD      timer_pedal_up
                  |L7.1052|
                          DCD      Tmy
                  |L7.1056|
                          DCD      timer_pedal_down
                  |L7.1060|
000424  d7d4b6af          DCB      215,212,182,175,184,248,210,169,200,161,207,251,0
000428  b8f8d2a9
00042c  c8a1cffb
000430  00      
000431  00                DCB      0
000432  00                DCB      0
000433  00                DCB      0
                  |L7.1076|
                          DCD      MOTOR_SPEED_INDEX
                  |L7.1080|
                          DCD      MOTOR_SPEED_CYCLE
                  |L7.1084|
                          DCD      MOTOR_SPEED_DISPLAY
                  |L7.1088|
000440  cda3d6b9          DCB      205,163,214,185,0
000444  00      
000445  00                DCB      0
000446  00                DCB      0
000447  00                DCB      0
                  |L7.1096|
000448  d7d4b6af          DCB      215,212,182,175,184,248,210,169,"...",0
00044c  b8f8d2a9
000450  2e2e2e00
                  |L7.1108|
000454  613a2f73          DCB      "a:/sounds/zdgy.mp3",0
000458  6f756e64
00045c  732f7a64
000460  67792e6d
000464  703300  
000467  00                DCB      0
                  |L7.1128|
                          DCD      lg_lcd_init
                  |L7.1132|
00046c  4c4344b3          DCB      "LCD",179,245,202,188,187,175,205,234,179,201,161,163,0
000470  f5cabcbb
000474  afcdeab3
000478  c9a1a300
                  |L7.1148|
00047c  bcecb2e2          DCB      188,236,178,226,185,233,193,227,180,171,184,208,198,247,","
000480  b9e9c1e3
000484  b4abb8d0
000488  c6f72c  
00048b  c9cfc9fd          DCB      201,207,201,253,"...",0
00048f  2e2e2e00
000493  00                DCB      0
                  |L7.1172|
000494  b6a5b8cb          DCB      182,165,184,203,185,233,193,227,"...",0
000498  b9e9c1e3
00049c  2e2e2e00
                  |L7.1184|
0004a0  d2d1b4a5          DCB      210,209,180,165,181,215,0
0004a4  b5d700  
0004a7  00                DCB      0
                  |L7.1192|
0004a8  b6a5b8cb          DCB      182,165,184,203,185,233,193,227,205,234,179,201,0
0004ac  b9e9c1e3
0004b0  cdeab3c9
0004b4  00      
0004b5  00                DCB      0
0004b6  00                DCB      0
0004b7  00                DCB      0
                  |L7.1208|
0004b8  b4a5b5d7          DCB      180,165,181,215
                  |L7.1212|
0004bc  b4fdbbfa          DCB      180,253,187,250,0
0004c0  00      
0004c1  00                DCB      0
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L7.1220|
0004c4  d7d4b6af          DCB      215,212,182,175,197,197,191,213,"...",0
0004c8  c5c5bfd5
0004cc  2e2e2e00
                  |L7.1232|
;;;777    
;;;778            case DG_ECPK_UP: //二次排空
;;;779    
;;;780                if (Motor.counter_step > STEP_MAX_ECPK) //到达自动排空步数
0004d0  48aa              LDR      r0,|L7.1916|
0004d2  6840              LDR      r0,[r0,#4]  ; Motor
0004d4  f5b05f4d          CMP      r0,#0x3340
0004d8  d902              BLS      |L7.1248|
;;;781                {
;;;782                    dg_sta = DG_STOP; //电机停止
0004da  2000              MOVS     r0,#0
0004dc  49a8              LDR      r1,|L7.1920|
0004de  7008              STRB     r0,[r1,#0]
                  |L7.1248|
;;;783                }
;;;784    
;;;785                if (Tmy.Motor.state != MOTOR_UP) //步进电机不是在上升
0004e0  48a8              LDR      r0,|L7.1924|
0004e2  7800              LDRB     r0,[r0,#0]  ; Tmy
0004e4  2801              CMP      r0,#1
0004e6  d00a              BEQ      |L7.1278|
;;;786                {
;;;787                    MOTOR_Stop();               //步进电机停止
0004e8  f7fffffe          BL       MOTOR_Stop
;;;788                    MOTOR_SetDir(UP);           //方向上升
0004ec  2000              MOVS     r0,#0
0004ee  f7fffffe          BL       MOTOR_SetDir
;;;789                    MOTOR_SetSpeed(CYCLE_ZDPK); //设置电机速度 XXX
0004f2  2086              MOVS     r0,#0x86
0004f4  f7fffffe          BL       MOTOR_SetSpeed
;;;790                    Tmy.Motor.state = MOTOR_UP; //更改步进电机状态
0004f8  2001              MOVS     r0,#1
0004fa  49a2              LDR      r1,|L7.1924|
0004fc  7008              STRB     r0,[r1,#0]
                  |L7.1278|
;;;791                }
;;;792                else //步进电机在上升
;;;793                {
;;;794                    ;
;;;795                }
;;;796    
;;;797                break;
0004fe  e13a              B        |L7.1910|
                  |L7.1280|
;;;798    
;;;799            case DG_UP: //顶杆上升
;;;800    
;;;801                if (dg_sta_c != dg_sta)
000500  489f              LDR      r0,|L7.1920|
000502  7800              LDRB     r0,[r0,#0]  ; dg_sta
000504  4284              CMP      r4,r0
000506  d006              BEQ      |L7.1302|
;;;802                {
;;;803                    dg_sta_c = dg_sta;
000508  489d              LDR      r0,|L7.1920|
00050a  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;804                    SetTextValue(0, 26, "顶杆上升...");
00050c  a29e              ADR      r2,|L7.1928|
00050e  211a              MOVS     r1,#0x1a
000510  2000              MOVS     r0,#0
000512  f7fffffe          BL       SetTextValue
                  |L7.1302|
;;;805                }
;;;806    
;;;807                if ((Motor.counter_step >= Motor.max_step) //到达顶部
000516  4899              LDR      r0,|L7.1916|
000518  6840              LDR      r0,[r0,#4]  ; Motor
00051a  4998              LDR      r1,|L7.1916|
00051c  6889              LDR      r1,[r1,#8]  ; Motor
00051e  4288              CMP      r0,r1
000520  d204              BCS      |L7.1324|
;;;808                    || (Tmy.Sensor.bit.top))
000522  4898              LDR      r0,|L7.1924|
000524  79c0              LDRB     r0,[r0,#7]  ; Tmy
000526  f3c00040          UBFX     r0,r0,#1,#1
00052a  b128              CBZ      r0,|L7.1336|
                  |L7.1324|
;;;809                {
;;;810                    MOTOR_Stop();         //这个是冗余操作，多一次保护
00052c  f7fffffe          BL       MOTOR_Stop
;;;811                    dg_sta = DG_STOP_TOP; //停留在顶部
000530  2004              MOVS     r0,#4
000532  4993              LDR      r1,|L7.1920|
000534  7008              STRB     r0,[r1,#0]
000536  e02e              B        |L7.1430|
                  |L7.1336|
;;;812                }
;;;813                else
;;;814                {
;;;815                    if (Tmy.Motor.state != MOTOR_UP) //步进电机未上升
000538  4892              LDR      r0,|L7.1924|
00053a  7800              LDRB     r0,[r0,#0]  ; Tmy
00053c  2801              CMP      r0,#1
00053e  d02a              BEQ      |L7.1430|
;;;816                    {
;;;817                        Motor.speed = 1;
000540  2001              MOVS     r0,#1
000542  498e              LDR      r1,|L7.1916|
000544  7008              STRB     r0,[r1,#0]
;;;818                        tem8 = MOTOR_SPEED_INDEX[Motor.gear][Motor.speed - 1];
000546  4608              MOV      r0,r1
000548  7840              LDRB     r0,[r0,#1]  ; Motor
00054a  eb000040          ADD      r0,r0,r0,LSL #1
00054e  4991              LDR      r1,|L7.1940|
000550  eb010140          ADD      r1,r1,r0,LSL #1
000554  4889              LDR      r0,|L7.1916|
000556  7800              LDRB     r0,[r0,#0]  ; Motor
000558  1e40              SUBS     r0,r0,#1
00055a  f8115010          LDRB     r5,[r1,r0,LSL #1]
;;;819                        Tmy.speed = tem8;
00055e  4889              LDR      r0,|L7.1924|
000560  7105              STRB     r5,[r0,#4]
;;;820    
;;;821                        MOTOR_SetSpeed(MOTOR_SPEED_CYCLE[tem8]); //设置电机速度
000562  498d              LDR      r1,|L7.1944|
000564  f8310015          LDRH     r0,[r1,r5,LSL #1]
000568  f7fffffe          BL       MOTOR_SetSpeed
;;;822                        SetTextValue(0, 16, &MOTOR_SPEED_DISPLAY[tem8][0]);
00056c  eb0500c5          ADD      r0,r5,r5,LSL #3
000570  498a              LDR      r1,|L7.1948|
000572  1842              ADDS     r2,r0,r1
000574  2110              MOVS     r1,#0x10
000576  2000              MOVS     r0,#0
000578  f7fffffe          BL       SetTextValue
;;;823    
;;;824                        MOTOR_Stop();                            //电机暂停
00057c  f7fffffe          BL       MOTOR_Stop
;;;825                        MOTOR_SetDir(UP);                        //设置电机方向
000580  2000              MOVS     r0,#0
000582  f7fffffe          BL       MOTOR_SetDir
;;;826                        MOTOR_SetSpeed(MOTOR_SPEED_CYCLE[tem8]); //设置电机速度，运行
000586  4984              LDR      r1,|L7.1944|
000588  f8310015          LDRH     r0,[r1,r5,LSL #1]
00058c  f7fffffe          BL       MOTOR_SetSpeed
;;;827    
;;;828                        //SetTextValue(0,18,"顶杆检查上升"); //更新提示
;;;829    
;;;830                        Tmy.Motor.state = MOTOR_UP; //
000590  2001              MOVS     r0,#1
000592  497c              LDR      r1,|L7.1924|
000594  7008              STRB     r0,[r1,#0]
                  |L7.1430|
;;;831                    }
;;;832                }
;;;833    
;;;834                //                if( Tmy.Motor.state != MOTOR_UP ) //步进电机不是在上升
;;;835                //                {
;;;836                //                    MOTOR_Stop();//步进电机停止
;;;837                //                    MOTOR_SetDir( UP );//方向上升
;;;838                //                    MOTOR_SetSpeed( CYCLE_KSJ ); //设置电机速度 XXX
;;;839                //                    Tmy.Motor.state = MOTOR_UP;//更改步进电机状态
;;;840                //                }else //步进电机在上升
;;;841                //                {
;;;842                //                    if( key_v == PEDAL_UP )//检测到脚踏抬起
;;;843                //                    {
;;;844                //                        dg_sta = DG_STOP;//停止
;;;845                //                    }
;;;846                //                }
;;;847    
;;;848                break;
000596  e0ee              B        |L7.1910|
                  |L7.1432|
;;;849    
;;;850            case DG_STOP_TOP: //停留在顶部
;;;851    
;;;852                if (dg_sta_c != dg_sta)
000598  4879              LDR      r0,|L7.1920|
00059a  7800              LDRB     r0,[r0,#0]  ; dg_sta
00059c  4284              CMP      r4,r0
00059e  d006              BEQ      |L7.1454|
;;;853                {
;;;854                    dg_sta_c = dg_sta;
0005a0  4877              LDR      r0,|L7.1920|
0005a2  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;855                    SetTextValue(0, 26, "到顶停机待机");
0005a4  a27e              ADR      r2,|L7.1952|
0005a6  211a              MOVS     r1,#0x1a
0005a8  2000              MOVS     r0,#0
0005aa  f7fffffe          BL       SetTextValue
                  |L7.1454|
;;;856                }
;;;857    
;;;858                if (Tmy.Motor.state != MOTOR_STOP) //步进电机在运行
0005ae  4875              LDR      r0,|L7.1924|
0005b0  7800              LDRB     r0,[r0,#0]  ; Tmy
0005b2  b138              CBZ      r0,|L7.1476|
;;;859                {
;;;860                    MOTOR_Stop();                 //电机暂停
0005b4  f7fffffe          BL       MOTOR_Stop
;;;861                    MOTOR_SetDir(DOWN);           //方向下降
0005b8  2001              MOVS     r0,#1
0005ba  f7fffffe          BL       MOTOR_SetDir
;;;862                    Tmy.Motor.state = MOTOR_STOP; //更改电机状态
0005be  2000              MOVS     r0,#0
0005c0  4970              LDR      r1,|L7.1924|
0005c2  7008              STRB     r0,[r1,#0]
                  |L7.1476|
;;;863                }
;;;864    
;;;865                if (key_v == PEDAL_DOWN) //检测到踩脚踏 // || ( key_v == PEDAL_DOWN ) ) //或 按复位键
0005c4  2e19              CMP      r6,#0x19
0005c6  d108              BNE      |L7.1498|
;;;866                {
;;;867                    //if( dev_sta == DEV_RUN )//设备运行状态
;;;868                    {
;;;869                        SetTextValue(0, 26, "顶杆归零...");
0005c8  f2af1238          ADR      r2,|L7.1172|
0005cc  211a              MOVS     r1,#0x1a
0005ce  2000              MOVS     r0,#0
0005d0  f7fffffe          BL       SetTextValue
;;;870                        dg_sta = DG_FIX_DOWN; //顶杆归零
0005d4  200f              MOVS     r0,#0xf
0005d6  496a              LDR      r1,|L7.1920|
0005d8  7008              STRB     r0,[r1,#0]
                  |L7.1498|
;;;871                    }
;;;872                }
;;;873    
;;;874    			//if (1) //在xxx速度下，到顶后自动归零
;;;875    			// if ((Tmy.speed == CYCLE_NORMAL) //慢慢速
;;;876                    // || (Tmy.speed == CYCLE_FAST) //常慢速
;;;877                // )
;;;878                // {
;;;879                    // SetTextValue(0, 26, "顶杆归零...");
;;;880    				// dg_sta = DG_FIX_DOWN; //顶杆归零
;;;881                // }
;;;882    
;;;883                break;
0005da  e0cc              B        |L7.1910|
                  |L7.1500|
;;;884    
;;;885            case DG_DOWN: //顶杆下降 可能没有此状态！！！
;;;886    
;;;887                if (dg_sta_c != dg_sta)
0005dc  4868              LDR      r0,|L7.1920|
0005de  7800              LDRB     r0,[r0,#0]  ; dg_sta
0005e0  4284              CMP      r4,r0
0005e2  d006              BEQ      |L7.1522|
;;;888                {
;;;889                    dg_sta_c = dg_sta;
0005e4  4866              LDR      r0,|L7.1920|
0005e6  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;890                    SetTextValue(0, 26, "顶杆下降...");
0005e8  a271              ADR      r2,|L7.1968|
0005ea  211a              MOVS     r1,#0x1a
0005ec  2000              MOVS     r0,#0
0005ee  f7fffffe          BL       SetTextValue
                  |L7.1522|
;;;891                }
;;;892    
;;;893                if (Tmy.Sensor.bit.bottom) //到达底部
0005f2  4864              LDR      r0,|L7.1924|
0005f4  79c0              LDRB     r0,[r0,#7]  ; Tmy
0005f6  f0000001          AND      r0,r0,#1
0005fa  b110              CBZ      r0,|L7.1538|
;;;894                {
;;;895                    dg_sta = DG_STOP_TOP; //停留在底部
0005fc  2004              MOVS     r0,#4
0005fe  4960              LDR      r1,|L7.1920|
000600  7008              STRB     r0,[r1,#0]
                  |L7.1538|
;;;896                }
;;;897    
;;;898                if (Tmy.Motor.state != MOTOR_DOWN) //步进电机不是在下降
000602  4860              LDR      r0,|L7.1924|
000604  7800              LDRB     r0,[r0,#0]  ; Tmy
000606  2802              CMP      r0,#2
000608  d00b              BEQ      |L7.1570|
;;;899                {
;;;900                    MOTOR_Stop();                 //步进电机停止
00060a  f7fffffe          BL       MOTOR_Stop
;;;901                    MOTOR_SetDir(DOWN);           //方向上升
00060e  2001              MOVS     r0,#1
000610  f7fffffe          BL       MOTOR_SetDir
;;;902                    MOTOR_SetSpeed(CYCLE_DGJC);   //设置电机速度 XXX
000614  2026              MOVS     r0,#0x26
000616  f7fffffe          BL       MOTOR_SetSpeed
;;;903                    Tmy.Motor.state = MOTOR_DOWN; //更改步进电机状态
00061a  2002              MOVS     r0,#2
00061c  4959              LDR      r1,|L7.1924|
00061e  7008              STRB     r0,[r1,#0]
000620  e004              B        |L7.1580|
                  |L7.1570|
;;;904                }
;;;905                else //步进电机在下降
;;;906                {
;;;907                    if (key_v == PEDAL_UP) //检测到脚踏抬起
000622  2e1a              CMP      r6,#0x1a
000624  d102              BNE      |L7.1580|
;;;908                    {
;;;909                        dg_sta = DG_STOP; //停止
000626  2000              MOVS     r0,#0
000628  4955              LDR      r1,|L7.1920|
00062a  7008              STRB     r0,[r1,#0]
                  |L7.1580|
;;;910                    }
;;;911                }
;;;912                break;
00062c  e0a3              B        |L7.1910|
                  |L7.1582|
;;;913    
;;;914            case DG_HX_DOWN: //回吸下降
;;;915    
;;;916                if (dg_sta_c != dg_sta)
00062e  4854              LDR      r0,|L7.1920|
000630  7800              LDRB     r0,[r0,#0]  ; dg_sta
000632  4284              CMP      r4,r0
000634  d006              BEQ      |L7.1604|
;;;917                {
;;;918                    dg_sta_c = dg_sta;
000636  4852              LDR      r0,|L7.1920|
000638  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;919                    SetTextValue(0, 26, "回吸下降...");
00063a  a260              ADR      r2,|L7.1980|
00063c  211a              MOVS     r1,#0x1a
00063e  2000              MOVS     r0,#0
000640  f7fffffe          BL       SetTextValue
                  |L7.1604|
;;;920                }
;;;921    
;;;922                if (Motor.counter_step < Motor.counter_hx_step - 1) //到达回吸底部
000644  484d              LDR      r0,|L7.1916|
000646  6841              LDR      r1,[r0,#4]  ; Motor
000648  68c0              LDR      r0,[r0,#0xc]  ; Motor
00064a  1e40              SUBS     r0,r0,#1
00064c  4281              CMP      r1,r0
00064e  d214              BCS      |L7.1658|
;;;923                {
;;;924                    MOTOR_Stop(); //电机停止
000650  f7fffffe          BL       MOTOR_Stop
;;;925                    Motor.counter_hx_step = Motor.counter_step + Motor.max_hx_step;
000654  4849              LDR      r0,|L7.1916|
000656  6840              LDR      r0,[r0,#4]  ; Motor
000658  4948              LDR      r1,|L7.1916|
00065a  6909              LDR      r1,[r1,#0x10]  ; Motor
00065c  4408              ADD      r0,r0,r1
00065e  4947              LDR      r1,|L7.1916|
000660  60c8              STR      r0,[r1,#0xc]  ; Motor
;;;926    
;;;927                    if (Tmy.speed == SLOW) //常慢速
000662  4848              LDR      r0,|L7.1924|
000664  7900              LDRB     r0,[r0,#4]  ; Tmy
000666  2801              CMP      r0,#1
000668  d103              BNE      |L7.1650|
;;;928                    {
;;;929                        vTaskDelay(pdMS_TO_TICKS(1000)); //延时1秒
00066a  f44f707a          MOV      r0,#0x3e8
00066e  f7fffffe          BL       vTaskDelay
                  |L7.1650|
;;;930                    }
;;;931                    dg_sta = DG_HX_UP; //
000672  200a              MOVS     r0,#0xa
000674  4942              LDR      r1,|L7.1920|
000676  7008              STRB     r0,[r1,#0]
000678  e013              B        |L7.1698|
                  |L7.1658|
;;;932                }
;;;933                else
;;;934                {
;;;935                    if (Tmy.Motor.state != MOTOR_DOWN) //步进电机未下降
00067a  4842              LDR      r0,|L7.1924|
00067c  7800              LDRB     r0,[r0,#0]  ; Tmy
00067e  2802              CMP      r0,#2
000680  d00f              BEQ      |L7.1698|
;;;936                    {
;;;937                        MOTOR_Stop();                    //电机暂停
000682  f7fffffe          BL       MOTOR_Stop
;;;938                        MOTOR_SetDir(DOWN);              //设置电机方向
000686  2001              MOVS     r0,#1
000688  f7fffffe          BL       MOTOR_SetDir
;;;939                        MOTOR_SetSpeed(CYCLE_HX);        //设置电机速度，运行
00068c  2086              MOVS     r0,#0x86
00068e  f7fffffe          BL       MOTOR_SetSpeed
;;;940                        SetTextValue(0, 18, "回吸下降"); //更新提示
000692  a24d              ADR      r2,|L7.1992|
000694  2112              MOVS     r1,#0x12
000696  2000              MOVS     r0,#0
000698  f7fffffe          BL       SetTextValue
;;;941                        Tmy.Motor.state = MOTOR_DOWN;    //
00069c  2002              MOVS     r0,#2
00069e  4939              LDR      r1,|L7.1924|
0006a0  7008              STRB     r0,[r1,#0]
                  |L7.1698|
;;;942                    }
;;;943                }
;;;944    
;;;945                //	            if( Motor.counter_step > Motor.counter_hx_step ) //
;;;946                //	            {
;;;947                //	                ;//行进中
;;;948                //	            }else //到达回吸底部
;;;949                //	            {
;;;950                //	                MOTOR_Stop();
;;;951                //	                dg_sta = DG_HX_UP;//
;;;952                //                    Motor.counter_hx_step = Motor.counter_step + Motor.max_hx_step;
;;;953                //                    MOTOR_SetDir( UP );
;;;954                //	                MOTOR_SetSpeed( CYCLE_HX ); //设置电机速度
;;;955                //                    SetTextValue(0,18,"回吸上升");
;;;956                //                    if( Tmy.speed == SLOW )   //常慢速
;;;957                //                    {
;;;958                //                        vTaskDelay(pdMS_TO_TICKS(1000));//延时1秒
;;;959                //                    }
;;;960                //	            }
;;;961    
;;;962                break;
0006a2  e068              B        |L7.1910|
                  |L7.1700|
;;;963    
;;;964            case DG_HX_UP: //回吸上升
;;;965    
;;;966                if (dg_sta_c != dg_sta)
0006a4  4836              LDR      r0,|L7.1920|
0006a6  7800              LDRB     r0,[r0,#0]  ; dg_sta
0006a8  4284              CMP      r4,r0
0006aa  d006              BEQ      |L7.1722|
;;;967                {
;;;968                    dg_sta_c = dg_sta;
0006ac  4834              LDR      r0,|L7.1920|
0006ae  7804              LDRB     r4,[r0,#0]  ; dg_sta
;;;969                    SetTextValue(0, 26, "回吸上升...");
0006b0  a248              ADR      r2,|L7.2004|
0006b2  211a              MOVS     r1,#0x1a
0006b4  2000              MOVS     r0,#0
0006b6  f7fffffe          BL       SetTextValue
                  |L7.1722|
;;;970                }
;;;971    
;;;972                if (Motor.counter_step > Motor.counter_hx_step - 1) //到达回吸顶部
0006ba  4830              LDR      r0,|L7.1916|
0006bc  6841              LDR      r1,[r0,#4]  ; Motor
0006be  68c0              LDR      r0,[r0,#0xc]  ; Motor
0006c0  1e40              SUBS     r0,r0,#1
0006c2  4281              CMP      r1,r0
0006c4  d905              BLS      |L7.1746|
;;;973                {
;;;974                    MOTOR_Stop(); //电机停止
0006c6  f7fffffe          BL       MOTOR_Stop
;;;975                    //Tmy.state.bit.hx = 0;
;;;976                    dg_sta = DG_STOP; //
0006ca  2000              MOVS     r0,#0
0006cc  492c              LDR      r1,|L7.1920|
0006ce  7008              STRB     r0,[r1,#0]
0006d0  e013              B        |L7.1786|
                  |L7.1746|
;;;977                }
;;;978                else
;;;979                {
;;;980                    if (Tmy.Motor.state != MOTOR_UP) //步进电机未下降
0006d2  482c              LDR      r0,|L7.1924|
0006d4  7800              LDRB     r0,[r0,#0]  ; Tmy
0006d6  2801              CMP      r0,#1
0006d8  d00f              BEQ      |L7.1786|
;;;981                    {
;;;982                        MOTOR_Stop();                    //电机暂停
0006da  f7fffffe          BL       MOTOR_Stop
;;;983                        MOTOR_SetDir(UP);                //设置电机方向
0006de  2000              MOVS     r0,#0
0006e0  f7fffffe          BL       MOTOR_SetDir
;;;984                        MOTOR_SetSpeed(CYCLE_HX);        //设置电机速度，运行
0006e4  2086              MOVS     r0,#0x86
0006e6  f7fffffe          BL       MOTOR_SetSpeed
;;;985                        SetTextValue(0, 18, "回吸上升"); //更新提示
0006ea  a23d              ADR      r2,|L7.2016|
0006ec  2112              MOVS     r1,#0x12
0006ee  2000              MOVS     r0,#0
0006f0  f7fffffe          BL       SetTextValue
;;;986                        Tmy.Motor.state = MOTOR_UP;      //
0006f4  2001              MOVS     r0,#1
0006f6  4923              LDR      r1,|L7.1924|
0006f8  7008              STRB     r0,[r1,#0]
                  |L7.1786|
;;;987                    }
;;;988                }
;;;989    
;;;990                //	            if( Motor.counter_step < Motor.counter_hx_step )
;;;991                //	            {
;;;992                //	                ;//行进中
;;;993                //	            }else //到达回吸顶部
;;;994                //	            {
;;;995                //	                MOTOR_Stop();
;;;996                //	                Tmy.state.bit.hx = 0;
;;;997                //	                Tmy.work_state = STA_STANDBY;
;;;998                //	            }
;;;999    
;;;1000               break;
0006fa  e03c              B        |L7.1910|
                  |L7.1788|
;;;1001   
;;;1002           case DG_FIX_UP: //顶杆检查上升
;;;1003   
;;;1004               if ((Motor.counter_step >= Motor.max_step) //到达顶部
0006fc  481f              LDR      r0,|L7.1916|
0006fe  6840              LDR      r0,[r0,#4]  ; Motor
000700  491e              LDR      r1,|L7.1916|
000702  6889              LDR      r1,[r1,#8]  ; Motor
000704  4288              CMP      r0,r1
000706  d204              BCS      |L7.1810|
;;;1005                   || (Tmy.Sensor.bit.top))
000708  481e              LDR      r0,|L7.1924|
00070a  79c0              LDRB     r0,[r0,#7]  ; Tmy
00070c  f3c00040          UBFX     r0,r0,#1,#1
000710  b128              CBZ      r0,|L7.1822|
                  |L7.1810|
;;;1006               {
;;;1007                   MOTOR_Stop();         //这个是冗余操作，多一次保护
000712  f7fffffe          BL       MOTOR_Stop
;;;1008                   dg_sta = DG_STOP_TOP; //停留在顶部
000716  2004              MOVS     r0,#4
000718  4919              LDR      r1,|L7.1920|
00071a  7008              STRB     r0,[r1,#0]
00071c  e00e              B        |L7.1852|
                  |L7.1822|
;;;1009               }
;;;1010               else
;;;1011               {
;;;1012                   if (Tmy.Motor.state != MOTOR_UP) //步进电机未上升
00071e  4819              LDR      r0,|L7.1924|
000720  7800              LDRB     r0,[r0,#0]  ; Tmy
000722  2801              CMP      r0,#1
000724  d00a              BEQ      |L7.1852|
;;;1013                   {
;;;1014                       MOTOR_Stop();               //电机暂停
000726  f7fffffe          BL       MOTOR_Stop
;;;1015                       MOTOR_SetDir(UP);           //设置电机方向
00072a  2000              MOVS     r0,#0
00072c  f7fffffe          BL       MOTOR_SetDir
;;;1016                       MOTOR_SetSpeed(CYCLE_DGJC); //设置电机速度，运行
000730  2026              MOVS     r0,#0x26
000732  f7fffffe          BL       MOTOR_SetSpeed
;;;1017                       //SetTextValue(0,18,"顶杆检查上升"); //更新提示
;;;1018   
;;;1019                       Tmy.Motor.state = MOTOR_UP; //
000736  2001              MOVS     r0,#1
000738  4912              LDR      r1,|L7.1924|
00073a  7008              STRB     r0,[r1,#0]
                  |L7.1852|
;;;1020                   }
;;;1021               }
;;;1022   
;;;1023               break;
00073c  e01b              B        |L7.1910|
                  |L7.1854|
;;;1024   
;;;1025           case DG_FIX_DOWN: //顶杆检查下降
;;;1026   
;;;1027               if (Tmy.Sensor.bit.bottom) //检测到底
00073e  4811              LDR      r0,|L7.1924|
000740  79c0              LDRB     r0,[r0,#7]  ; Tmy
000742  f0000001          AND      r0,r0,#1
000746  b128              CBZ      r0,|L7.1876|
;;;1028               {
;;;1029                   MOTOR_Stop();         //这个是冗余操作，多一次保护
000748  f7fffffe          BL       MOTOR_Stop
;;;1030                   dg_sta = DG_STOP_BOT; //
00074c  2005              MOVS     r0,#5
00074e  490c              LDR      r1,|L7.1920|
000750  7008              STRB     r0,[r1,#0]
000752  e00e              B        |L7.1906|
                  |L7.1876|
;;;1031               }
;;;1032               else
;;;1033               {
;;;1034                   if (Tmy.Motor.state != MOTOR_DOWN) //步进电机未下降
000754  480b              LDR      r0,|L7.1924|
000756  7800              LDRB     r0,[r0,#0]  ; Tmy
000758  2802              CMP      r0,#2
00075a  d00a              BEQ      |L7.1906|
;;;1035                   {
;;;1036                       MOTOR_Stop();               //电机暂停
00075c  f7fffffe          BL       MOTOR_Stop
;;;1037                       MOTOR_SetDir(DOWN);         //设置电机方向
000760  2001              MOVS     r0,#1
000762  f7fffffe          BL       MOTOR_SetDir
;;;1038                       MOTOR_SetSpeed(CYCLE_DGJC); //设置电机速度，运行
000766  2026              MOVS     r0,#0x26
000768  f7fffffe          BL       MOTOR_SetSpeed
;;;1039                       //SetTextValue(0,18,"顶杆检查下降"); //更新提示
;;;1040   
;;;1041                       Tmy.Motor.state = MOTOR_DOWN; //
00076c  2002              MOVS     r0,#2
00076e  4905              LDR      r1,|L7.1924|
000770  7008              STRB     r0,[r1,#0]
                  |L7.1906|
;;;1042                   }
;;;1043               }
;;;1044   
;;;1045               break;
000772  e000              B        |L7.1910|
                  |L7.1908|
;;;1046   
;;;1047           default:
;;;1048               break;
000774  bf00              NOP      
                  |L7.1910|
000776  bf00              NOP                            ;574
                  |L7.1912|
000778  e457              B        |L7.42|
;;;1049           }
;;;1050       }
;;;1051   }
;;;1052   
                          ENDP

00077a  0000              DCW      0x0000
                  |L7.1916|
                          DCD      Motor
                  |L7.1920|
                          DCD      dg_sta
                  |L7.1924|
                          DCD      Tmy
                  |L7.1928|
000788  b6a5b8cb          DCB      182,165,184,203,201,207,201,253,"...",0
00078c  c9cfc9fd
000790  2e2e2e00
                  |L7.1940|
                          DCD      MOTOR_SPEED_INDEX
                  |L7.1944|
                          DCD      MOTOR_SPEED_CYCLE
                  |L7.1948|
                          DCD      MOTOR_SPEED_DISPLAY
                  |L7.1952|
0007a0  b5bdb6a5          DCB      181,189,182,165,205,163,187,250,180,253,187,250,0
0007a4  cda3bbfa
0007a8  b4fdbbfa
0007ac  00      
0007ad  00                DCB      0
0007ae  00                DCB      0
0007af  00                DCB      0
                  |L7.1968|
0007b0  b6a5b8cb          DCB      182,165,184,203,207,194,189,181,"...",0
0007b4  cfc2bdb5
0007b8  2e2e2e00
                  |L7.1980|
0007bc  bbd8cefc          DCB      187,216,206,252,207,194,189,181,"...",0
0007c0  cfc2bdb5
0007c4  2e2e2e00
                  |L7.1992|
0007c8  bbd8cefc          DCB      187,216,206,252,207,194,189,181,0
0007cc  cfc2bdb5
0007d0  00      
0007d1  00                DCB      0
0007d2  00                DCB      0
0007d3  00                DCB      0
                  |L7.2004|
0007d4  bbd8cefc          DCB      187,216,206,252,201,207,201,253,"...",0
0007d8  c9cfc9fd
0007dc  2e2e2e00
                  |L7.2016|
0007e0  bbd8cefc          DCB      187,216,206,252,201,207,201,253,0
0007e4  c9cfc9fd
0007e8  00      
0007e9  00                DCB      0
0007ea  00                DCB      0
0007eb  00                DCB      0

                          AREA ||i.vTaskSensor||, CODE, READONLY, ALIGN=2

                  vTaskSensor PROC
;;;232    */
;;;233    static void vTaskSensor(void *pvParameters)
000000  e07c              B        |L8.252|
                  |L8.2|
;;;234    {
;;;235    
;;;236        //    SoftWdtInit( vTaskSensor_ID, 10 );
;;;237    
;;;238        //timer_sensor = 4;
;;;239        while (1)
;;;240        {
;;;241            //        SoftWdtFed( vTaskSensor_ID );
;;;242    
;;;243            vTaskDelay(pdMS_TO_TICKS(1000)); //vTaskDelay( 2 );
000002  f44f707a          MOV      r0,#0x3e8
000006  f7fffffe          BL       vTaskDelay
;;;244    
;;;245            ADC1_GetV();
00000a  f7fffffe          BL       ADC1_GetV
;;;246            Tmy.pressure = HX711_Read();
00000e  f7fffffe          BL       HX711_Read
000012  493b              LDR      r1,|L8.256|
000014  60c8              STR      r0,[r1,#0xc]  ; Tmy
;;;247    
;;;248            //bsp_KeyScan();
;;;249    
;;;250            if (bsp_GetKeyState(KID_ZERO)) //触底检测
000016  2009              MOVS     r0,#9
000018  f7fffffe          BL       bsp_GetKeyState
00001c  b130              CBZ      r0,|L8.44|
;;;251            {
;;;252                Tmy.Sensor.bit.bottom = 0; //未触底
00001e  4838              LDR      r0,|L8.256|
000020  79c0              LDRB     r0,[r0,#7]  ; Tmy
000022  f0200001          BIC      r0,r0,#1
000026  4936              LDR      r1,|L8.256|
000028  71c8              STRB     r0,[r1,#7]
00002a  e006              B        |L8.58|
                  |L8.44|
;;;253            }
;;;254            else
;;;255            {
;;;256                Tmy.Sensor.bit.bottom = 1; //已触底
00002c  4834              LDR      r0,|L8.256|
00002e  79c0              LDRB     r0,[r0,#7]  ; Tmy
000030  f0200001          BIC      r0,r0,#1
000034  1c40              ADDS     r0,r0,#1
000036  4932              LDR      r1,|L8.256|
000038  71c8              STRB     r0,[r1,#7]
                  |L8.58|
;;;257            }
;;;258    
;;;259            //if( Motor.counter_step > Motor.counter_hx_step-1 ) //触顶检测 //if( bsp_GetKeyState( KID_ZERO ) )
;;;260            if (Motor.counter_step >= Motor.max_step) //触顶检测
00003a  4832              LDR      r0,|L8.260|
00003c  6840              LDR      r0,[r0,#4]  ; Motor
00003e  4931              LDR      r1,|L8.260|
000040  6889              LDR      r1,[r1,#8]  ; Motor
000042  4288              CMP      r0,r1
000044  d307              BCC      |L8.86|
;;;261            {
;;;262                Tmy.Sensor.bit.top = 1; //已触顶
000046  482e              LDR      r0,|L8.256|
000048  79c0              LDRB     r0,[r0,#7]  ; Tmy
00004a  f0200002          BIC      r0,r0,#2
00004e  1c80              ADDS     r0,r0,#2
000050  492b              LDR      r1,|L8.256|
000052  71c8              STRB     r0,[r1,#7]
000054  e005              B        |L8.98|
                  |L8.86|
;;;263            }
;;;264            else
;;;265            {
;;;266                Tmy.Sensor.bit.top = 0; //未触顶
000056  482a              LDR      r0,|L8.256|
000058  79c0              LDRB     r0,[r0,#7]  ; Tmy
00005a  f0200002          BIC      r0,r0,#2
00005e  4928              LDR      r1,|L8.256|
000060  71c8              STRB     r0,[r1,#7]
                  |L8.98|
;;;267            }
;;;268    
;;;269            if (Tmy.State.bit.init) //初始化完成
000062  4827              LDR      r0,|L8.256|
000064  7980              LDRB     r0,[r0,#6]  ; Tmy
000066  f3c00040          UBFX     r0,r0,#1,#1
00006a  b180              CBZ      r0,|L8.142|
;;;270            {
;;;271                if (Motor.counter_step == 0) //触低底检测
00006c  4825              LDR      r0,|L8.260|
00006e  6840              LDR      r0,[r0,#4]  ; Motor
000070  b938              CBNZ     r0,|L8.130|
;;;272                {
;;;273                    Tmy.Sensor.bit.bottom = 1; //已触底
000072  4823              LDR      r0,|L8.256|
000074  79c0              LDRB     r0,[r0,#7]  ; Tmy
000076  f0200001          BIC      r0,r0,#1
00007a  1c40              ADDS     r0,r0,#1
00007c  4920              LDR      r1,|L8.256|
00007e  71c8              STRB     r0,[r1,#7]
000080  e005              B        |L8.142|
                  |L8.130|
;;;274                }
;;;275                else
;;;276                {
;;;277                    Tmy.Sensor.bit.bottom = 0; //未触底
000082  481f              LDR      r0,|L8.256|
000084  79c0              LDRB     r0,[r0,#7]  ; Tmy
000086  f0200001          BIC      r0,r0,#1
00008a  491d              LDR      r1,|L8.256|
00008c  71c8              STRB     r0,[r1,#7]
                  |L8.142|
;;;278                }
;;;279            }
;;;280    
;;;281            if (bsp_GetKeyState(KID_SYRINGE)) //注射器类型
00008e  200a              MOVS     r0,#0xa
000090  f7fffffe          BL       bsp_GetKeyState
000094  b138              CBZ      r0,|L8.166|
;;;282            {
;;;283                Tmy.Sensor.bit.SyringeType = SYRINGE_2ML2; //2.2ml
000096  481a              LDR      r0,|L8.256|
000098  79c0              LDRB     r0,[r0,#7]  ; Tmy
00009a  f0200004          BIC      r0,r0,#4
00009e  1d00              ADDS     r0,r0,#4
0000a0  4917              LDR      r1,|L8.256|
0000a2  71c8              STRB     r0,[r1,#7]
0000a4  e005              B        |L8.178|
                  |L8.166|
;;;284            }
;;;285            else
;;;286            {
;;;287                Tmy.Sensor.bit.SyringeType = SYRINGE_1ML8; //1.8ml
0000a6  4816              LDR      r0,|L8.256|
0000a8  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000aa  f0200004          BIC      r0,r0,#4
0000ae  4914              LDR      r1,|L8.256|
0000b0  71c8              STRB     r0,[r1,#7]
                  |L8.178|
;;;288            }
;;;289    
;;;290            if (bsp_GetKeyState(KID_SYRINGE)) //注射器插入状态 XXX
0000b2  200a              MOVS     r0,#0xa
0000b4  f7fffffe          BL       bsp_GetKeyState
0000b8  b138              CBZ      r0,|L8.202|
;;;291            {
;;;292                Tmy.Sensor.bit.SyringeState = SYRINGE_ON; //已插入
0000ba  4811              LDR      r0,|L8.256|
0000bc  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000be  f0200008          BIC      r0,r0,#8
0000c2  3008              ADDS     r0,r0,#8
0000c4  490e              LDR      r1,|L8.256|
0000c6  71c8              STRB     r0,[r1,#7]
0000c8  e005              B        |L8.214|
                  |L8.202|
;;;293            }
;;;294            else
;;;295            {
;;;296                Tmy.Sensor.bit.SyringeState = SYRINGE_OFF; //未插入
0000ca  480d              LDR      r0,|L8.256|
0000cc  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000ce  f0200008          BIC      r0,r0,#8
0000d2  490b              LDR      r1,|L8.256|
0000d4  71c8              STRB     r0,[r1,#7]
                  |L8.214|
;;;297            }
;;;298    
;;;299            if (Tmy.pressure > MAX_PRESSURE) //过压
0000d6  480a              LDR      r0,|L8.256|
0000d8  68c0              LDR      r0,[r0,#0xc]  ; Tmy
0000da  f5b07f7a          CMP      r0,#0x3e8
0000de  d907              BLS      |L8.240|
;;;300            {
;;;301                Tmy.Sensor.bit.OverPressure = 1; //已插入
0000e0  4807              LDR      r0,|L8.256|
0000e2  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000e4  f0200010          BIC      r0,r0,#0x10
0000e8  3010              ADDS     r0,r0,#0x10
0000ea  4905              LDR      r1,|L8.256|
0000ec  71c8              STRB     r0,[r1,#7]
0000ee  e005              B        |L8.252|
                  |L8.240|
;;;302            }
;;;303            else
;;;304            {
;;;305                Tmy.Sensor.bit.OverPressure = 0; //未插入
0000f0  4803              LDR      r0,|L8.256|
0000f2  79c0              LDRB     r0,[r0,#7]  ; Tmy
0000f4  f0200010          BIC      r0,r0,#0x10
0000f8  4901              LDR      r1,|L8.256|
0000fa  71c8              STRB     r0,[r1,#7]
                  |L8.252|
0000fc  e781              B        |L8.2|
;;;306            }
;;;307        }
;;;308    }
;;;309    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L8.256|
                          DCD      Tmy
                  |L8.260|
                          DCD      Motor

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Tmy
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  dg_sta
000000  00                DCB      0x00
                  dev_sta
000001  000000            DCB      0x00,0x00,0x00
                  xHandleTaskLCD
                          DCD      0x00000000
                  xHandleTaskMotorCtrl
                          DCD      0x00000000
                  xHandleTaskSensor
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_251558ba____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_251558ba____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_251558ba____REVSH|
#line 128
|__asm___6_main_c_251558ba____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
